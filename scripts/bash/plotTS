#!/bin/bash

source gmt_defaults

# set local gmt_defaults
gmt_defaults[ANNOT_FONT_SIZE_PRIMARY]=10p
gmt_defaults[ANNOT_FONT_SIZE_SECONDARY]=12p
gmt_defaults[ANNOT_OFFSET_PRIMARY]=0.1c
gmt_defaults[HEADER_FONT_SIZE]=16p
gmt_defaults[LABEL_FONT_SIZE]=12p
gmt_defaults[TICK_LENGTH]=-0.2c
gmt_defaults[PLOT_DATE_FORMAT]=yyy-mm-dd
gmt_defaults[TIME_SYSTEM]=UNIX

# default optional arguments
declare -A options
options=(['ps']="default" ['T']="default" ['H']="default" ['E']="default" ['MH']=1.5 ['ME']=1.5 ['BTp']="default" ['BTs']="default" ['BH']="default" ['BE']="default" ['DH']=4 ['DE']=4 ['color']="default" ['margin']=2)

usage ()
{
    echo
    echo "usage: $1 file.sec ... [parameter=value]"
    echo "where:"
    echo "  file.sec: file which first column is seconds since 1970-01-01 followed by magnetic and electric data"
    echo "parameters could be:"
    echo "  ps: postscript file name [file.ps]"
    echo "  T : time range: yyyy-mm-ddThh:mm:ss/yyyy-mm-ddThh:mm:ss [start/end of file.sec]"
    echo "  H : magnetic rage: min/max [-std*${options['MH']}/std*${options['MH']}]"
    echo "  E : electric rage: min/max [-std*${options['ME']}/std*${options['ME']}]"
    echo "  MH: factor that multiply magnetic std [${options['MH']}]"
    echo "  ME: factor that multiply electric std [${options['ME']}]"
    echo "boundary annotation and tickmark intervals could be set with:"
    echo "  BTp: primary time boundary [a2hf30m]"
    echo "  BTs: secondary time boundary [a1D]"
    echo "  BH : magnetic boundary [a[range/${options['DH']}]f[range/${options['DH']}**2]]"
    echo "  BE : electric boundary [a[range/${options['DE']}]f[range/${options['DE']}**2]]"
    echo "  DH: factor that divide magnetic range in BH [${options['DH']}]"
    echo "  DE: factor that divide electric range in BE [${options['DE']}]"
    echo
    echo "color: list of color for each file like: black,blue,orange [default based in no_green.cpt]"
    echo "margin: size of margin in cm [${options['margin']}]"
    echo
    echo "parameters could be any one listed by gmtdefaults, example:"
    echo "  LABEL_FONT_SIZE=10p"
    echo
    exit 1
}

if [[ ${#} == 0 ]] ; then
    usage $0
fi

declare -a file
N=0
while [[ -n $1 ]] ; do
    option=($(echo $1 | awk '{gsub("="," ");print $0}'))
    if [[ ${#option[*]} -eq 1 ]] ; then
	file[$N]=${option[0]}
	((N++))
    elif [[ ${#option[*]} -eq 2 ]] ; then
        # check if is a valid option
	if [[ -z ${options[${option[0]}]} ]] ; then
            if [[ -z ${gmt_defaults[${option[0]}]} ]] ; then
		echo "'${option[0]}' isn't a valid option"
		usage $0
            else
		gmt_defaults[${option[0]}]=${option[1]}
            fi
	else
            options[${option[0]}]=${option[1]}
	fi
    else
        echo "error in option:$1"
	usage $0
    fi
    shift
done

# check if file exist
# and get sample period, number of samples and number of channels
declare -a sp ns
max_time=0
max_nc=0
for (( i=0; i< N; i++ )) ; do
    if [[ !(-f ${file[$i]}) ]] ; then
	echo "couldn't find file ${file[$i]}"
	echo
	exit 1
    else
	if [[ ${file[$i]##*\.} == "sec" ]] ; then
	    ns[$i]=$(cat ${file[$i]} | wc -l)
	    sp[$i]=$(awk '{if(NR==1){t0=$1}else{printf "%f\n",$1-t0;nextfile}}' ${file[$i]})
	    nc[$i]=$(awk '{print NF-1;nextfile}' ${file[$i]})
	    max_time=$(echo $max_time ${ns[$i]} ${sp[$i]} | awk '{if($1>=$2*$3){print $1}else{printf "%.0f\n",$2*$3}}')
	    max_nc=$(echo $max_nc ${nc[$i]} | awk '{if($1>=$2){print $1}else{print $2}}')
	else
	    echo ${file[$i]##*\.}
	    echo "expected a *.sec file"
	    usage $0
	fi
    fi
done

# check max_nc
if [[ $max_nc < 3 || $max_nc > 5 ]] ; then
    echo "expected number of channels between 3 and 5"
    for (( i=0; i<N; i++ )) ; do
	echo "${file[$i]} with ${nc[$i]} channels"
    done
    echo
    exit 1
fi

# set gmt options: fast
gmtset_options=""
for index in $(echo ${!gmt_defaults[*]}) ; do
    if [[ $index != "UNIX_TIME_FORMAT" ]] ; then
	gmtset_options="$gmtset_options $index=${gmt_defaults[$index]}"
    fi
done
gmtset UNIX_TIME_FORMAT="${gmt_defaults[UNIX_TIME_FORMAT]}"
gmtset $gmtset_options

if [[ ${options['color']} == "default" ]] ; then
    if (( $N <= 3 )) ; then
	color=(black blue red)
    else
	color=($(makecpt -Cno_green -T0/$N/1 | grep -v \# | head -n $N | awk '{printf " %s/%s/%s",$2,$3,$4}'))
    fi
else
    color=($(echo ${options['color']} | awk '{gsub(","," ");print $0}'))
fi

if [[ ${options['ps']} == "default" ]] ; then
    title=""
    for name in $(echo ${file[*]}) ; do
	name=$(basename $name) # remove directory
	name=${name%\.*} # remove extension
	if [[ -z $title ]] ; then
	    title=${name}
	else
	    title=${title}-${name}
	fi
    done
    options['ps']=${title}.ps
fi

if [[ ${options['T']} == "default" ]] ; then
    tmin=$(head -q -n 1 ${file[*]} | sort -g | head -n 1 | cut -f1)
    tmax=$(tail -q -n 1 ${file[*]} | sort -g | tail -n 1 | cut -f1)
    if(( $max_time < 1800 )) ; then
	round=60
    else
	round=3600
    fi
    tmin=$(echo $tmin | awk -v r=$round '{print int($1/r)*r}' | gmtconvert -fi0t -fo0T --TIME_SYSTEM=UNIX)
    tmax=$(echo $tmax | awk -v r=$round '{print int($1/r)*r+r}' | gmtconvert -fi0t -fo0T --TIME_SYSTEM=UNIX)
    options['T']=${tmin}/${tmax}
fi

# convert T range from iso to seconds:
Trange=($(echo ${options['T']} | cut -d/ --output-delimiter=" " -f1-2 | gmtconvert -fi0-1T -fo0-1t --TIME_SYSTEM=UNIX))
# calculate max_time based in Trange:
max_time=$(echo "${Trange[1]}-${Trange[0]}" | bc -l)

if [[ ${gmt_defaults['PAGE_ORIENTATION']} == "landscape" ]] ; then
    XLEN=$(echo "29.7-2*${options['margin']}" | bc -l)
    YLEN=$(echo "(21.0-2*${options['margin']})/$max_nc" | bc -l)
else
    XLEN=$(echo "21.0-2*${options['margin']}" | bc -l)
    YLEN=$(echo "(29.7-2*${options['margin']})/$max_nc" | bc -l)
fi

# defines the sampling interval
declare -a rsp
for (( i=0; i< N; i++ )) ; do
    rsp[$i]=$(echo $max_time $XLEN ${gmt_defaults['DOTS_PR_INCH']} ${sp[i]} |\
    awk '{T=$1;L=$2;n=$3;sp=$4;printf "%f\n",int(T/((L/2.54)*n)/sp)*sp}')
    if [[ $(echo "${rsp[$i]} < ${sp[$i]}" | bc -l) == 1 ]] ; then
	rsp[$i]="cat"
    else
	sp[$i]=${rsp[$i]}
	rsp[$i]="sample1d -I${rsp[$i]}"
    fi
done

export GMT_TMPDIR=$(mktemp -d /tmp/gmt.XXXXXX)
mkdir $GMT_TMPDIR/T
mkdir $GMT_TMPDIR/X
mkdir $GMT_TMPDIR/Y
mkdir $GMT_TMPDIR/Z
mkdir $GMT_TMPDIR/A
mkdir $GMT_TMPDIR/B

for (( i=0; i< N; i++ )) ; do
    if [[ ${nc[$i]} == 5 ]] ; then
	${rsp[$i]} ${file[$i]} |\
        awk -v d=$GMT_TMPDIR -v f=$i -v b=${Trange[0]} -v e=${Trange[1]} 'BEGIN{s[1]=sprintf("%s/T/%s",d,f);s[2]=sprintf("%s/X/%s",d,f);s[3]=sprintf("%s/Y/%s",d,f);s[4]=sprintf("%s/Z/%s",d,f);s[5]=sprintf("%s/A/%s",d,f);s[6]=sprintf("%s/B/%s",d,f)}{for(c=1;c<=NF;c++){if($1>=b&&$1<=e){print $c >> s[c]}}}'
    elif [[ ${nc[$i]} == 4 ]] ; then
	${rsp[$i]} ${file[$i]} |\
        awk -v d=$GMT_TMPDIR -v f=$i -v b=${Trange[0]} -v e=${Trange[1]} 'BEGIN{s[1]=sprintf("%s/T/%s",d,f);s[2]=sprintf("%s/X/%s",d,f);s[3]=sprintf("%s/Y/%s",d,f);s[4]=sprintf("%s/A/%s",d,f);s[5]=sprintf("%s/B/%s",d,f)}{for(c=1;c<=NF;c++){if($1>=b&&$1<=e){print $c >> s[c]}}}'
    elif [[ ${nc[$i]} == 3 ]] ; then
	${rsp[$i]} ${file[$i]} |\
        awk -v d=$GMT_TMPDIR -v f=$i -v b=${Trange[0]} -v e=${Trange[1]} 'BEGIN{s[1]=sprintf("%s/T/%s",d,f);s[2]=sprintf("%s/X/%s",d,f);s[3]=sprintf("%s/Y/%s",d,f);s[4]=sprintf("%s/Z/%s",d,f)}{for(c=1;c<=NF;c++){if($1>=b&&$1<=e){print $c >> s[c]}}}'
    else
	echo "${file[$i]} with ${nc[$i]} channels"
	echo "expected number of channels between 3 and 5"
    fi
done

# remove magnetic mean value
for data in $(ls $GMT_TMPDIR/[X,Y,Z]/* 2> /dev/null) ; do
    mean=$(gmtmath $data -S -Ca MED =)
    awk -v m=$mean '{print $1-m}' $data > $GMT_TMPDIR/tmp.tmp
    mv $GMT_TMPDIR/tmp.tmp $data
done

# remove electric trend
for data in $(ls $GMT_TMPDIR/[A,B]/* 2> /dev/null) ; do
    time_serie=$(echo $data | awk '{n=split($1,a,"/");a[n-1]="T";printf "%s",a[1];for(i=2;i<=n;i++){printf "/%s",a[i]}}')
    paste $time_serie $data | trend1d -Fxr -N2 | awk '{print $2}' > $GMT_TMPDIR/tmp.tmp
    mv $GMT_TMPDIR/tmp.tmp $data
done

if [[ ${options['H']} == "default" ]] ; then
    options['H']=$(cat $GMT_TMPDIR/[X,Y,Z]/* | gmtmath -S -Ca STDIN STD = | awk -v m=${options['MH']} '{p10=int(log($1*m)/log(10));p10=exp(p10*log(10));m=int($1*m/p10)+1;p10=int(p10*m);if(p10==0){printf "-0.1/0.1"}else{printf "-%d/%d",p10,p10}}')
fi

if [[ $max_nc > 3 && ${options['E']} == "default" ]] ; then
    options['E']=$(cat $GMT_TMPDIR/[A,B]/* | gmtmath -S -Ca STDIN STD = | awk -v m=${options['ME']} '{p10=int(log($1*m)/log(10));p10=exp(p10*log(10));m=int($1*m/p10)+1;p10=int(p10*m);if(p10==0){printf "-0.1/0.1"}else{printf "-%d/%d",p10,p10}}')
fi

if [[ ${options['BH']} == "default" ]] ; then
    options['BH']=$(echo ${options['H']} | awk -v d=${options['DH']} '{split($1,a,"/");s=(a[2]-a[1])/d;printf "a%ff%f",s,s/d}')
fi

if [[ $max_nc > 3 && ${options['BE']} == "default" ]] ; then
    options['BE']=$(echo ${options['E']} | awk -v d=${options['DE']} '{split($1,a,"/");s=(a[2]-a[1])/d;printf "a%ff%f",s,s/d}')
fi

if [[ ${options['BTp']} == "default" ]] ; then
    if (( $max_time < $(echo "60*5" | bc -l) )) ; then
        options['BTp']=a10cf1c
    elif (( $max_time < $(echo "60*10" | bc -l) )) ; then
        options['BTp']=a20cf5c
    elif (( $max_time <= $(echo "60*30" | bc -l) )) ; then
        options['BTp']=a1mf10c
    elif (( $max_time <= $(echo "60*60" | bc -l) )) ; then
        options['BTp']=a2mf30c
    elif (( $max_time < $(echo "60*60*3" | bc -l) )) ; then
        options['BTp']=a5mf1m
    elif (( $max_time < $(echo "60*60*6" | bc -l) )) ; then
        options['BTp']=a15mf5m
    elif (( $max_time < $(echo "60*60*24" | bc -l) )) ; then
        options['BTp']=a1hf10m
    elif (( $max_time < $(echo "60*60*24*2" | bc -l) )) ; then
        options['BTp']=a3hf30m
    elif (( $max_time < $(echo "60*60*24*5" | bc -l) )) ; then
        options['BTp']=a6hf1h
    elif (( $max_time < $(echo "60*60*24*10" | bc -l) )) ; then
        options['BTp']=a8hf2h
    elif (( $max_time <= $(echo "60*60*24*20" | bc -l) )) ; then
        options['BTp']=a12hf3h
    elif (( $max_time <= $(echo "60*60*24*20*4" | bc -l) )) ; then
	aBTp=$(echo $max_time | awk '{printf "%.0f",$1/(20*60*60*24)}')
        options['BTp']=$(echo $aBTp | awk '{printf "a%ddf%fh",$1,$1*24/4}')
    else
	aBTp=$(echo $max_time | awk '{printf "%.0f",$1/(20*60*60*24)}')
        options['BTp']=$(echo $aBTp | awk '{printf "a%ddf%fd",$1,$1/4}')
    fi
fi

if [[ ${options['BTs']} == "default" ]] ; then
    if (( $max_time < $(echo "60*10" | bc -l) )) ; then
	options['BTs']=a1M
	gmtset PLOT_CLOCK_FORMAT=hh:mm
    elif (( $max_time <= $(echo "60*60" | bc -l) )) ; then
	options['BTs']=a10M
	gmtset PLOT_CLOCK_FORMAT=hh:mm
    elif (( $max_time < $(echo "60*60*6" | bc -l) )) ; then
	options['BTs']=a1H
	gmtset PLOT_CLOCK_FORMAT=hh:mm
    elif (( $max_time < $(echo "60*60*24*10" | bc -l) )) ; then
	options['BTs']=a1D
	gmtset PLOT_DATE_FORMAT=yyyy-mm-dd
    elif (( $max_time <= $(echo "60*60*24*20" | bc -l) )) ; then
	options['BTs']=$(echo $max_time | awk '{printf "a%.0fD",$1/(10*60*60*24)}')
	gmtset PLOT_DATE_FORMAT=yyyy-mm-dd
    else
        options['BTs']=a1O
	gmtset PLOT_DATE_FORMAT=yyyy-mm
    fi
fi

ps=${options['ps']}
M=${options['margin']}
if [[ $max_nc == 3 ]] ; then
    psbasemap -X${M}c -Y${M}c -JX${XLEN}cT/${YLEN}c -R${options['T']}/${options['H']} -Bs${options['BTs']}/${options['BH']}weSn -Bp${options['BTp']}/${options['BH']}:"Z":WeSn -K > $ps
    for (( i=0; i< N; i++ )) ; do
	paste $GMT_TMPDIR/T/$i $GMT_TMPDIR/Z/$i |\
        psxy -f0t,1f -J -R -Wthin,${color[$i]} -K -O >> $ps
    done
elif [[ $max_nc == 4 || $max_nc == 5 ]] ; then
    psbasemap -X${options['margin']}c -Y${options['margin']}c -JX${XLEN}cT/${YLEN}c -R${options['T']}/${options['E']} -Bs${options['BTs']}/${options['BE']}weSn -Bp${options['BTp']}/${options['BE']}:"Ey":WeSn -K > $ps
    for (( i=0; i< N; i++ )) ; do
	if [[ ${nc[$i]} == 4 || ${nc[$i]} == 5 ]] ; then
	    paste $GMT_TMPDIR/T/$i $GMT_TMPDIR/B/$i |\
            psxy -f0t,1f -J -R -Wthin,${color[$i]} -K -O >> $ps
	fi
    done
    
    psbasemap -Y${YLEN}c -J -R -Bp${options['BTp']}/${options['BE']}:"Ex":wEsn -K -O >> $ps
    for (( i=0; i< N; i++ )) ; do
	if [[ ${nc[$i]} == 4 || ${nc[$i]} == 5 ]] ; then
	    paste $GMT_TMPDIR/T/$i $GMT_TMPDIR/A/$i |\
	    psxy -f0t,1f -J -R -Wthin,${color[$i]} -K -O >> $ps
	fi
    done
else
    echo "maximum number of channels is $max_ch"
    echo "expected number of channels between 3 and 5"
    echo
    exit 1
fi

if [[ $max_nc == 5 ]] ; then
    psbasemap -Y${YLEN}c -J -R${options['T']}/${options['H']} -Bp${options['BTp']}/${options['BH']}:"Z":Wesn -K -O >> $ps
    for (( i=0; i< N; i++ )) ; do
	if [[ ${nc[$i]} == 3 || ${nc[$i]} == 5 ]] ; then
	    paste $GMT_TMPDIR/T/$i $GMT_TMPDIR/Z/$i |\
            psxy -f0t,1f -J -R -Wthin,${color[$i]} -K -O >> $ps
	fi
    done
fi

if [[  $max_nc == 4 ]] ; then
    MY=Wesn
    MX=wEsn
else
    MY=wEsn
    MX=Wesn
fi

psbasemap -Y${YLEN}c -J -R${options['T']}/${options['H']} -Bp${options['BTp']}/${options['BH']}:"Y":$MY -K -O >> $ps
for (( i=0; i< N; i++ )) ; do
    paste $GMT_TMPDIR/T/$i $GMT_TMPDIR/Y/$i |\
    psxy -f0t,1f -J -R -Wthin,${color[$i]} -K -O >> $ps
done

psbasemap -Y${YLEN}c -J -R -Bp${options['BTp']}/${options['BH']}:"X":$MX -K -O >> $ps
for (( i=0; i< N; i++ )) ; do
    paste $GMT_TMPDIR/T/$i $GMT_TMPDIR/X/$i |\
    psxy -f0t,1f -J -R -Wthin,${color[$i]} -K -O >> $ps
done

size=${gmt_defaults['LABEL_FONT_SIZE']/p/}
LLEN=1
dx=$(echo "$XLEN/($N+1)" | bc -l)
x=$dx
y=$(echo "$LLEN/2" | bc -l)
name=$(basename ${file[0]})
name=${name%\.*}
echo "$x $y $size 0 0 mc $name" | pstext -D0c/0.25c -Y${YLEN}c -Jx1c -R0/${XLEN}/0/${LLEN} -G${color[0]} -K -O >> $ps
echo "$x $y $size 0 0 mc ${sp[0]}" | pstext -D0c/-0.25c -Jx1c -R0/${XLEN}/0/${LLEN} -G${color[0]} -K -O >> $ps

for (( i=1; i< N; i++ )) ; do
    x=$(echo "$x+$dx" | bc -l)
    name=$(basename ${file[$i]})
    name=${name%\.*}
    echo "$x $y $size 0 0 mc $name" | pstext -D0c/0.25c -J -R -G${color[$i]} -K -O >> $ps
    echo "$x $y $size 0 0 mc ${sp[$i]}" | pstext -D0c/-0.25c -J -R -G${color[$i]} -K -O >> $ps
done
psxy -J -R -T -O >> $ps

# Clean up all temporary files and the temporary directory
rm -rf $GMT_TMPDIR

# mostra o resultado
ps2raster $ps -P -Tf
if [[ -n $VIEWER_PDF ]] ; then
    $VIEWER_PDF ${ps/.ps/.pdf}&
else
    echo "figure ${ps/.ps/.pdf} done"
fi
