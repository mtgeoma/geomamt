#!/bin/bash
# script para plotar rho e phi

# valores padrões para saída do sistema
source sysexits

# define as variáveis primárias que podem ser mudadas por linha de comando
TMIN=1e-5 # período mínimo
NDT=10 # no. de décadas de período
RHOMIN=1e-1 # rho mínimo
PHIMIN=0 # phi mínimo
NDRHO=6 # no. de décadas de rho
FS=2 # fator de escala do phi (ver comentário antes da definição de PHIMAX)
ps=rho-phi.ps
COR=(black red blue green)

# função que descreve como usar o script
modo_de_usar ()
# $1: nome do script
{
  echo "uso:" $1 "arquivos_de_impedândia[,angulo_rotação][,[inicio-fim]] [parametro=valor]"
  echo
  echo "  arquivos_de_impedância: arquivos com dados do tensor de impedância"
  echo "                          que o programa parametros-mt conheça."
  echo "      pode-se acrescentar parâmetros separados com uma vírgula:"
  echo "      pode ser uma seleção de dados no formato [inicio-fim]"
  echo "      ou será interpretado como um ângulo de rotação."
  echo
  echo "  pode-se alterar os seguintes parâmetros por linha de comando:"
  echo "  TMIN=período mínimo [$TMIN]"
  echo "  NDT=número de décadas de períodos [$NDT]"
  echo "  RHOMIN=resistividade aparente mínima [$RHOMIN]"
  echo "  PHIMIN=fase mínima [$PHIMIN]"
  echo "  NDRHO=número de décadas de rho [$NDRHO]"
  echo "  FS=fator de escala da fase [$FS]"
  echo "  ps=arquivo de saída para o GMT [$ps]"
  # transforma o vetor COR em uma lista separada por vírgulas
  COR=$(echo ${COR[*]} | awk '{gsub(" ",",");print $0}')
  echo "  COR=cores para identificar cada arquivo [$COR]"
  exit $EX_USAGE
}

# função para mudar os valores das variáveis primárias por linha de comando
# (não gostei da solução, mas não encontrei outra)
define_parametros ()
# $1: nome do parâmetro
# $2: valor do parâmetro
{
    case "$1" in
	TMIN ) TMIN="$2" ;;
	NDT ) NDT="$2" ;;
	RHOMIN ) RHOMIN="$2" ;;
	PHIMIN ) PHIMIN="$2" ;;
	NDRHO ) NDRHO="$2" ;;
	FS ) FS="$2" ;;
	ps ) ps="$2" ;;
        # COR deve ser fornecido como uma lista separada por vírgulas
        # COR=black,red,blue,green
	COR ) COR="" # apaga vetor anterior (parece que não funciona)
	    i=0
	    while [[ $(expr index "$valor" ",") != 0 ]]
	    do
		COR[$i]=${valor%%,*}
		valor=${valor#*,}
		((i++))
	    done
	    if [[ -n $valor ]]
	    then
		COR[$i]=$valor
	    fi ;;
	* ) echo "$1"": parâmetro desconhecido"
	    exit $EX_USAGE ;;
    esac
}

# assume que nenhum arquivo terá número de períodos maior que MAXIMO_REGISTRO
MAXIMO_REGISTRO=2147483647

# variáveis globais para função verifica_selecao
inicio=""
fim=""

# função para encontrar o valor inicial e final de uma seleção de dados
# $1: string no formato [1-12]
verifica_selecao ()
{
  inicio=${1#[} # remove o "[" inicial
  inicio=${inicio%\-*]} # remove qualquer coisa entre "-" e "]" final
  fim=${1#[*\-} # remove qualquer coisa entre "[" e "-" inicial
  fim=${fim%]} # remove o "]" final

  # verifica se é um número inteiro e diferente de zero
  # (int("1a") retorna "1")
  inicio=$(awk -v n=$inicio 'BEGIN{if(int(n)!=n){print 0}else{print n}}')
  fim=$(awk -v n=$fim 'BEGIN{if(int(n)!=n){print 0}else{print n}}')
  if [[ $inicio == 0 || $fim == 0 ]]
  then
      exec 1>&2 # redireciona stdout para stderr
      echo "erro na formatação da seleção: $1"
      echo "formato esperado: [início-fim]"
      echo "sendo início e fim números inteiros maior que zero"
      exit $EX_DATAERR
  fi
  # comparação aritimética
  # Se fosse usado [[ ]], seria comparado os strings como palavras de um
  # dicionário, gerando um resultado errado (string "4" é maior que "14")
  if (( $inicio > $fim ))
  then
      exec 1>&2 # redireciona stdout para stderr
      echo "erro na formatação da seleção: $1"
      echo "formato esperado: [início-fim]"
      echo "sendo início<=fim"
      exit $EX_DATAERR
  fi
  return $EX_OK
}

# verifica se há parâmetros de entrada:
if [[ -z "$1" ]]
then
    modo_de_usar $0
fi

# lê parâmetros de entrada
Ndata=0
until [[ -z "$1" ]]
do
    # parâmetros que possuam o caracter "=" são para alterar variáveis internas
    if [[ $(expr index "$1" "=") != 0 ]]
    then
	parametro=${1%%=*}
	valor=${1##*=}
	define_parametros $parametro $valor
    elif [[ $(expr index "$1" ",") != 0 ]]
    # se não é  para alterar variáveis internas (não tem caracter "="),
    # verifica se há parâmetros separados por vírgula. Se o parâmetro tiver o
    # caracter "[" será usado para determinar a seleção dos dados,
    # senão será considerado a rotação a ser aplicada.
    then
	arquivo=${1%%,*}
	parametros=${1#*,}
        # verifica se arquivo existe e tem permissão de leitura
	verifica_arquivo "$arquivo"
	data[$Ndata]="$arquivo"
	parametro1=${parametros%,*}
	parametro2=${parametros#*,}
	selecao=""
	angulo=""
	if [[ -n $parametro1 && $(expr index "$parametro1" "[") != 0 ]]
	then
	    selecao=$parametro1
	else
	    angulo=$parametro1
	fi
	if [[ -n $parametro2 && $(expr index "$parametro2" "[") != 0 ]]
	then
	    selecao=$parametro2
	else
	    angulo=$parametro2
	fi
	if [[ -n $selecao ]]
	then
	    verifica_selecao $selecao
	    inicio_data[$Ndata]=$inicio
	    fim_data[$Ndata]=$fim
	else
	    inicio_data[$Ndata]=1
	    fim_data[$Ndata]=$MAXIMO_REGISTRO
	fi

        # não sei como verificar se $angulo é um número float válido
	if [[ -n $angulo ]]
	then
	    azimute[$Ndata]=$angulo
	else
	    azimute[$Ndata]=0
	fi
	((Ndata++))
    else
        # verifica se arquivo existe e tem permissão de leitura
	verifica_arquivo "$1"
	data[$Ndata]="$1"
	inicio_data[$Ndata]=1
	fim_data[$Ndata]=$MAXIMO_REGISTRO
	azimute[$Ndata]=0
	((Ndata++))
    fi
    shift
done

# verifica se há cores para todos os arquivos de entrada
if [[ ${#data[*]} > ${#COR[*]} ]]
then
    echo "número de arquivos supera o número de cores da variável COR"
    echo "pode ser mudado por linha de comando ou no próprio script"
    exit $EX_SOFTWARE
fi

# CONFIGURAÇÕES:
# VARIÁVEIS PRIMÁRIAS não modificáveis por linha de comando
cor_legenda=80 # usado na idendificação das componentes
componentes=(xy yx) # componentes a serem plotadas
shift_fase=(0 180) # deslocamento das fases das componentes
simbolos=(S6p C6p) # símbolos para identificar as componentes

# TAMANHO DOS GRÁFICOS
# para manter-se a igualdade entre os tamanhos das décadas de rho e T, cria-se
# um vínculo entre as dimensões dos eixos X e Y. Também é desejável uma
# proporção entre rho e phi, além de clareza na apresentação das legendas e uma
# boa distribuição dos gráficos no papel.
# Para isso, define-se uma distribuição dos gráficos nos eixos X e Y, calcula-se
# os tamanhos de uma década em cada eixo, escolhe-se o menor valor e
# recalcula-se as margens para garantir a centralidade dos gráficos.

# campos no eixo Y (de baixo para cima):
#margem+legenda T+gráfico phi+rótulos+gráfico rho+rótulos+3linhas títulos+margem
#  Y0  +  DELTAY +  YLEN     +DELTAY + YLEN      +DELTAY + 4*pos_legenda + Y0
# Y_PAPEL=2*YLEN+2*Y0+3*DELTAY+4*pos_legenda
Y_PAPEL=21.0 # tamanho do papel em Y (formato paisagem)
Y0=1.5 # margem mínima
DELTAY=0.8 # espaçamento vertical entre gráficos (espaço para legenda/rótulos)
pos_legenda=0.3 # espaçamento entre as legendas
YLEN=$(echo "($Y_PAPEL-(2*$Y0+3*$DELTAY+4*$pos_legenda))/2.0" | bc -l)
YDLEN=$(echo "$YLEN/$NDRHO" | bc -l)

# campos no eixo X (da esquerda para direita):
# margem + rótulos + gráfico phi/rho+margem
# X0     + DELTAX  + XLEN           + X0
# X_PAPEL=XLEN+2*X0+DELTAX
X_PAPEL=29.7 # tamanho do papel em X (formato paisagem)
X0=1.5 # margem mínima
DELTAX=0.8 # espaçamento horizontal entre gráficos (espaço para legenda/rótulos)
XLEN=$(echo "$X_PAPEL-(2*$X0+$DELTAX)" | bc -l)
XDLEN=$(echo "$XLEN/$NDT" | bc -l)

# comprimento de uma década
DLEN=$(echo $XDLEN $YDLEN | awk '{if($1<$2){print $1}else{print $2}}')

# LY= comprimento do eixo Y em cm
# baseado no rho
YLEN=$(echo "$DLEN*$NDRHO" | bc -l)
TLEN=$(echo "$DLEN*$NDT" | bc -l)
PHILEN=$YLEN
RHOLEN=$YLEN
XSHIFT=$(echo "$TLEN+$DELTAX" | bc -l)
YSHIFT=$(echo "$YLEN+$DELTAY" | bc -l)
X0=$(echo "($X_PAPEL-$XSHIFT)/2" | bc -l)

Y0=$(echo "($Y_PAPEL-(2*$YLEN+3*$DELTAY+4*$pos_legenda))/2" | bc -l)
Y0=$(echo "$Y0+$YLEN+2*$DELTAY" | bc -l) # desloca para a base do gráfico rho

# VARIÁVEIS DERIVADAS
# 10^x=exp(x*ln(10))
TMAX=$(awk 'BEGIN{printf "%e\n",exp(('$NDT'+log('$TMIN')/log(10))*log(10))}')
RHOMAX=$(awk 'BEGIN{printf "%e\n",exp(('$NDRHO'\
                                        +log('$RHOMIN')/log(10))*log(10))}')

# 1 década de rho equivale a 2*log10(e) de phi
# FS*2*log10(e)=FS*2/ln(10)
# onde FS é um fator de escala
#   quando FS=1 barras de erro de rho e phi são iguais mas a amplitude
#   entre o mínimo e máximo de rho é maior que o mínimo e máximo de phi
#   com FS=2 a amplitude entre rho e phi são similares, mas o erro de phi dobra
# PHIMAX=PHIMIN+$NDRHO*(180/(PI*(FS*2/log(10))))
# PHIMAX=PHIMIN+$NDRHO*(90*log(10)/(FS*PI))
PI=$(awk 'BEGIN{print atan2(0,-1)}')
PHIMAX=$(awk 'BEGIN{printf "%e\n",'$PHIMIN'\
                                   +'$NDRHO'*(90*log(10)/('$FS'*'$PI'))}')

# configura tamanho das letras
gmtset HEADER_FONT_SIZE 12p ANNOT_FONT_SIZE_PRIMARY 8p LABEL_FONT_SIZE 10p
gmtset TICK_LENGTH -0.2c GRID_PEN_PRIMARY 0.25p,128 ANNOT_OFFSET_PRIMARY 0.1c
gmtset LABEL_OFFSET 0.0c
# GRÁFICO RHO
psbasemap -X${X0}c -Y${Y0}c -JX${TLEN}cl/${RHOLEN}cl \
 -R$TMIN/$TMAX/$RHOMIN/$RHOMAX -Ba1pf3:"T (s)":/a1pf3Wesn -K > $ps

# identifica os arquivos de entrada
if [[ $Ndata == 1 ]]
then
    # havendo apenas um arquivo, rotula-se apenas o nome de arquivo,
    # sem extensão
    rotulo=$(basename ${data[0]})
    rotulo=${rotulo%.*}
    x=$(echo "$TLEN/2" | bc -l)
#    y=$(echo "$pos_legenda*2.5" | bc -l)
    y=$DELTAY
    printf "%s %s 12 0 0 BC %s\n" $TMIN $RHOMAX $rotulo |\
    pstext -N -R -J -D${x}c/${y}c -G${COR[0]} -K -O >> $ps
else
    # havendo mais de um arquivo, rotula-se o nome completo,
    # incluindo o diretório
    # parece-me melhor escrever apenas dois rótulos por linha
    Ncol=2
    delta_x=$(echo "$TLEN/$Ncol" | bc -l)
    x=$(echo "$delta_x/2" | bc -l)
#     delta_y=$(echo "$pos_legenda*2.5" | bc -l)
#     y=$delta_y
    y=$DELTAY
    for (( i=0; i < Ndata; i++ ))
    do
	printf "%s %s 12 0 0 BC %s\n" $TMIN $RHOMAX ${data[$i]} |\
                pstext -N -R -J -D${x}c/${y}c -G${COR[$i]} -K -O >> $ps
	if (( ($i+1)%$Ncol == 0 )) # completou a linha
	then
	    x=$(echo "$delta_x/2" | bc -l)
	    y=$(echo "$y+$pos_legenda*1.5" | bc -l)
	else
	    x=$(echo "$x+$delta_x" | bc -l)
	fi
    done
fi

delta_x=$(echo "$TLEN/(${#componentes[*]}+1)" | bc -l)
delta_y=$pos_legenda
x=$delta_x
y=$delta_y
for (( i=0; i < ${#componentes[*]}; i++ ))
do
    echo "$TMIN $RHOMAX" | psxy -N -J -R -D${x}c/${y}c -S${simbolos[$i]}\
                                -G$cor_legenda -K -O >> $ps
    xtexto=$(echo "$x+0.2" | bc -l)
    printf "%s %s 12 0 0 ML  @~ r@~@-%s\n" $TMIN $RHOMAX ${componentes[$i]} |\
    pstext -N -R -J -D${xtexto}c/${y}c -G$cor_legenda -K -O >> $ps
    x=$(echo "$x+$delta_x" | bc -l)
done

for (( i=0; i < Ndata; i++ ))
do
  for (( j=0; j < ${#componentes[*]}; j++ ))
  do
    parametros-mt ${data[$i]} rho-${componentes[$j]} --azimute ${azimute[$i]} |\
    awk -v min=${inicio_data[$i]} -v max=${fim_data[$i]} \
        '{if(NR>=min&&NR<=max)print $0}' |\
    psxy -J -R -S${simbolos[$j]} -G${COR[$i]} -W0.5p,white \
	-EY0p/0.5p,${COR[$i]} -K -O >> $ps
  done
done

# GRÁFICO PHI
psbasemap -Y-${YSHIFT}c -JX${TLEN}cl/${YLEN}c -R$TMIN/$TMAX/$PHIMIN/$PHIMAX \
          -Ba1pf3:"T (s)":/a30f10WeSn -K -O >> $ps
x=$delta_x
y=$delta_y
for (( i=0; i < ${#componentes[*]}; i++ ))
do
    echo "$TMIN $PHIMAX" | psxy -N -J -R -D${x}c/${y}c -S${simbolos[$i]}\
                                -G$cor_legenda -K -O >> $ps
    xtexto=$(echo "$x+0.2" | bc -l)
    printf "%s %s 12 0 0 ML  @~ f@~@-%s\n" $TMIN $PHIMAX ${componentes[$i]} |\
    pstext -N -R -J -D${xtexto}c/${y}c -G$cor_legenda -K -O >> $ps
    x=$(echo "$x+$delta_x" | bc -l)
done

for (( i=0; i < Ndata; i++ ))
do
  for (( j=0; j < ${#componentes[*]}; j++ ))
  do
    parametros-mt ${data[$i]} phi-${componentes[$j]} --azimute ${azimute[$i]}|\
    awk -v min=${inicio_data[$i]} -v max=${fim_data[$i]} -v s=${shift_fase[$j]}\
        '{if(NR>=min&&NR<=max)print $1,$2+s,$3}' |\
    psxy -J -R -S${simbolos[$j]} -G${COR[$i]} -W0.5p,white \
	-Ey0p/0.5p,${COR[$i]} -K -O >> $ps
  done
done

psxy -J -R -T -O >> $ps

# retorna aos valores defaults
rm -f .gmtcommands4 .gmtdefaults4

ps2raster $ps -A -P -Tg
if [[ -n $VIEWER_PNG ]] ; then
    $VIEWER_PNG ${ps/.ps/.png}&
else
    echo "gerada a figura ${ps/.ps/.png}"
fi

exit $EX_OK
