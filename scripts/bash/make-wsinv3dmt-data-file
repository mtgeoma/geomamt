#!/bin/bash
# default optional arguments
declare -A options
options=(['resp']=full ['T']=all)

usage ()
{
    printf "usage: $1 data_list_file [parameter=value ...]\n"
    printf "\tdata_list_file\tfile with 3 columns:\n"
    printf "\t\t\t1st column: northing station position\n"
    printf "\t\t\t2nd column: easting station position\n"
    printf "\t\t\t3th column: impedance station file\n"
    printf "parameters:\n"
    printf "\tresp\tMT responses. Could be \"full\" impedance or"
    printf " \"off\" diagonal impedance [${options['resp']}]\n"
    echo
    printf "\tT\tnumber of period selection. There are two options:\n"
    printf "\t\t\tfirst/increment/last\n"
    printf "\t\t\tT1,...,Tn\n"
    printf "\t\t\tdefault use all periods\n"
    printf "\t\t\tif you have 5 periods and want to get only odd periods\n"
    printf "\t\t\tthe following two options are equivalent\n"
    printf "\t\t\tT=1/2/5\n"
    printf "\t\t\tT=1,3,5\n"
    echo
    exit 1
}

if [[ ${#} == 0 ]] ; then
    usage $0
fi

# mandatory argument
list_file=$1
shift

if [[ !(-f $list_file) ]] ; then
    echo "couldn't find \"$list_file\" file"
    echo
    exit 1
fi

while [[ -n $1 ]] ; do
    option=($(echo $1 | gawk '{gsub("="," ");print $0}'))
    if [[ ${#option[*]} -eq 2 ]] ; then
        # check if is a valid option
        if [[ -z ${options[${option[0]}]} ]] ; then
            echo "'${option[0]}' isn't a valid option"
            usage $0
        else
            options[${option[0]}]=${option[1]}
        fi
    else
        echo "error in option:$1"
        usage $0
    fi
    shift
done

if [[ ${options['resp']} == "full" ]] ; then
    Zcmp=(xx xy yx yy)
elif [[ ${options['resp']} == "off" ]] ; then
    Zcmp=(xy yx)
else
    echo "option resp could only be \"full\" or \"off\""
    echo
    exit 1
fi

declare -a North
declare -a East
declare -a Zfile

exec 6<&0 # link #6 file with stdin
exec < $list_file # replace stdin by $list_file
n=0
while read -a col ; do
    if [[  ${#col[*]} -ne 0 ]] ; then
	North[$n]=${col[0]}
	East[$n]=${col[1]}
	Zfile[$n]=${col[2]}
	((n++))
    fi
done
exec 0<&6 6<&- # restore stdin and close #6
Nstn=$n

# echo $Nstn
# echo ${North[*]}
# echo ${East[*]}
# echo ${Zfile[*]}
export GMT_TMPDIR=$(mktemp -d /tmp/gmt.XXXXXX)
source check-Zformat
for (( i=0; i<$Nstn; i++ )) ; do
    # stn_t=$(printf "%s/STN%03d_T" $GMT_TMPDIR $i)
    for cmp in $(echo ${Zcmp[*]}) ; do
	check-Zformat ${Zfile[$i]} z$cmp
	Zformat=${Zformats[$?]}
	if [[ $Zformat == "null" ]] ; then
	    echo "couldn't find Z$cmp in file ${Zfile[$i]}"
	    echo
	    rm -rf $GMT_TMPDIR
	    exit 1
	fi
	# transferfunction ${Zfile[$i]} -F$Zformat -Dz$cmp | \
	#     awk '{print $1}' > $stn_t

	transferfunction ${Zfile[$i]} -F$Zformat -Dz$cmp | \
	    awk -v d=$GMT_TMPDIR -v c=$cmp '{
              T=sprintf("%s/%sT%03d",d,c,NR)
              V=sprintf("%s/%sV%03d",d,c,NR)
              E=sprintf("%s/%sE%03d",d,c,NR)
              print $1 >> T
              printf "%s %s\n",$2,$3 >> V
              printf "%s %s\n",$4,$4 >> E
            }'
    done
done
NT=$(ls $GMT_TMPDIR/??T* | \
    awk '{n=split($1,a,"/");printf "%d\n",substr(a[n],4)}' | sort -n | tail -n 1)

declare -a T
if [[ ${options['T']} == "all" ]] ; then
    T=($(seq 1 $NT))
else
    Tseq=($(echo ${options['T']} | gawk '{gsub("/"," ");print $0}'))
    if (( ${#Tseq[*]} == 3 )) ; then
	if (( ${Tseq[2]} < ${Tseq[0]} )) ; then
	    echo "last seq in T option (${Tseq[2]})"
	    echo "must be bigger than start (${Tseq[0]})"
	    echo
	    rm -rf $GMT_TMPDIR
	    exit 1
	fi
	if (( ${Tseq[2]} > $NT )) ; then
	    echo "last seq in T option (${Tseq[2]})"
	    echo "is bigger than maximum number of periods ($NT)"
	    echo
	    rm -rf $GMT_TMPDIR
	    exit 1
	fi
	T=($(seq ${Tseq[0]} ${Tseq[1]} ${Tseq[2]}))
    elif (( ${#Tseq[*]} > 1 )) ; then
	echo "error parsing option T:${options['T']}"
	echo
	rm -rf $GMT_TMPDIR
	exit 1
    else
	T=($(echo ${options['T']} | gawk '{gsub(","," ");print $0}'))
	for (( i=1; i<${#T[*]}; i++ )) ; do
	    if (( ${T[$i]} <= ${T[$[$i-1]]} )) ; then
		echo "period selection in option T must be a growing sequence"
		echo
		rm -rf $GMT_TMPDIR
		exit 1
	    fi
	done
	if (( ${T[$[${#T[*]}-1]]} > $NT )) ; then
	    echo "last period selection in T option (${T[$[${#T[*]}-1]]})"
	    echo "is bigger than maximum number of periods ($NT)"
	    echo
	    rm -rf $GMT_TMPDIR
	    exit 1
	fi
    fi
fi

# write header
echo ${Nstn} ${#T[*]} ${#Zcmp[*]} | awk '{printf "%3d %3d %3d\n",$1,$2,$3*2}'

echo "Station_Location: N-S"
echo ${North[*]} | awk '{
  for(c=1;c<=NF;c++) {
    printf " %11s",$c
    if(NR%5==0) {
      printf "\n"
    }
  }
  if(NR%5!=0) {
    printf "\n"
  }
}'

echo "Station_Location: E-W"
echo ${East[*]} | awk '{
  for(c=1;c<=NF;c++) {
    printf " %11s",$c
    if(NR%5==0) {
      printf "\n"
    }
  }
  if(NR%5!=0) {
    printf "\n"
  }
}'

# write impedance tensor data
for n in $(echo ${T[*]}) ; do
    n=$(printf "%03d" $n)
    Period=($(cat $GMT_TMPDIR/??T$n | sort -u))
    if (( ${#Period[*]} != 1 )) ; then
	echo "there are more than one value for period number $n:"
	echo ${Period[*]}
	echo
	rm -rf $GMT_TMPDIR
	exit 1
    fi
    echo "DATA_Period: $Period"
    declare -a outdata
    for (( i=0; i<${#Zcmp[*]}; i++ )) ; do
	outdata[$i]=$GMT_TMPDIR/${Zcmp[$i]}V$n
    done
    paste ${outdata[*]} | \
	awk 'BEGIN{
            conv=atan2(0,-1)*4e-4
          }
          {for(c=1;c<=NF;c++){printf " %11.4e",$c*conv};printf "\n"}'
done

# write impedance tensor error
for n in $(echo ${T[*]}) ; do
    n=$(printf "%03d" $n)
    Period=($(cat $GMT_TMPDIR/??T$n | sort -u))
    echo "ERROR_Period: $Period"
    declare -a outdata
    for (( i=0; i<${#Zcmp[*]}; i++ )) ; do
	outdata[$i]=$GMT_TMPDIR/${Zcmp[$i]}E$n
    done
    paste ${outdata[*]} | \
	awk 'BEGIN{
            conv=atan2(0,-1)*4e-4
          }
          {for(c=1;c<=NF;c++){printf " %11.4e",$c*conv};printf "\n"}'
done

# write error map
for n in $(echo ${T[*]}) ; do
    n=$(printf "%03d" $n)
    Period=($(cat $GMT_TMPDIR/??T$n | sort -u))
    echo "ERMAP_Period: $Period"
    awk -v Ncmp=${#Zcmp[*]} -v Nstn=${Nstn} 'BEGIN{
      for(s=1;s<=Nstn;s++) {
        for(c=1;c<=Ncmp*2;c++) {
          printf " %11s","1."
        }
        printf "\n"
      }
    }'
done

# Clean up all temporary files and the temporary directory
rm -rf $GMT_TMPDIR
