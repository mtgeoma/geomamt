      SUBROUTINE D02NNS
C     MARK 12 RELEASE. NAG COPYRIGHT 1986.
C-----------------------------------------------------------------------
C     THIS ROUTINE, AFTER A CALL TO F01BRF, GIVES THE USER ADVICE ON HOW
C     HE MIGHT AID BETTER USE OF THE WORKSPACES PROVIDED, OR IMPROVE
C     PERFORMANCE BY INCREASING THE SIZE OF THE WORKSPACES. TO DO THIS
C     WE LOOK AT THE NUMBER OF COMPRESSIONS CARRIED OUT DURING THE
C     DECOMPOSITION. FOR THE ACTUAL SIZES OF THE SPACES SUGGESTED
C     THE USER IS ADVISED TO CALL ROUTINE D02NYF ON EXITING SPRINT AND
C     EXAMINE THE ARRAY JSINFO.
C     ISPIWK LENGTH OF INTEGER STORE AVAILABLE FOR THE ARRAYS IRN AND
C            ICN IN THE CALL TO F01BRF
C     ISPRWK LENGTH OF REAL STORE AVAILABLE FOR THE ARRAY A IN THE CALL
C            TO F01BRF
C     LICN   LENGTH OF ICN AND A
C     LIRN   LENGTH OF IRN
C     MINICN MIN. LENGTHS OF A AND ICN (IE. NO 'ELBOW ROOM')
C     MINIRN MIN. LENGTH OF IRN (IE. NO 'ELBOW ROOM')
C     LENIWK LENGTH OF INTEGER STORE SUPPLIED
C     LENRWK LENGTH OF REAL STORE SUPPLIED
C
C
C     COMPRESSIONS  ADVICE
C     ROW   COL
C     =0    =0      IF 5*(MINIRN+MINICN)/2.LT.ISPIWK THEN DECREASE LENIWK
C                   IF 5*MINICN/2.LT.ISPRWK THEN DECREASE LENRWK
C   GT 0  GT 0      INCREASE LENIWK
C                   AND MAYBE INCREASE LENRWK AS A RESULT OF ABOVE
C   GT 4     0      INCREASE LENIWK
C                   AND ALTER ISPLIT TO RETAIN SAME LICN
C   LE 4     0      WE WUOLD LIKE TO INCREASE LIRN BY 10 PER CENT
C                   IF THIS WOULD NOT TAKE US BELOW 1.50*MINICN THEN
C                      IF USER DIDN'T SET ISPLIT THEN ALTER ISPLIT
C                      ELSE INCREASE LENIWK
C                   ELSE INCREASE LENIWK AND ALTER ISPLIT
C      0  GT 4      IF LICN RESTRICTED BY ISPRWK
C                      INCREASE LENRWK
C                      AND MAYBE INCREASE LENIWK AS A RESULT OF ABOVE
C                      ALTER ISPLIT
C                   ELSE INCREASE LENIWK
C                        AND MAYBE INCREASE LENRWK AS A RESULT OF ABOVE
C                        ALTER ISPLIT
C      0  LE 4      WE WOULD LIKE TO INCREASE LICN BY 10 PER CENT
C                   IF THIS WOULD NOT TAKE US BELOW 1.50*MINIRN THEN
C                      IF USER DIDN'T SET ISPLIT THEN ALTER ISPLIT
C                      ELSE INCREASE LENIWK
C                   ELSE INCREASE LENIWK
C                        AND MAYBE INCREASE LENRWK AS A RESULT OF ABOVEC
C
C      ANOTHER CHECK IS MADE ON THE NUMBER OF DIAGONAL BLOCKS. IF THIS IS
C      ONE THEN F01BRF WASTED TIME TO PERMUTE AN IRREDUCIBLE MATRIX TO
C      BLOCK LOWER TRIANGULAR FORM AND THE USER IS ADVISED TO SET LBLOCK
C      TO .FALSE. FOR RUNS ON A SIMILAR PROBLEM
C
C-----------------------------------------------------------------------
C     .. Scalars in Common ..
      DOUBLE PRECISION ETA, RGROW, RSPLIT, U
      INTEGER         I1, I10, I2, I5, I8, ICCMPS, ICN, IDEV, IKEEP,
     *                IPIWK, IPRWK, IRCMPS, IRN, ISPIWK, ISPRWK, ISPSET,
     *                ITRACE, LENIWK, LENRWK, LICN, LIRN, LIWREQ,
     *                LIWUSD, LRWREQ, LRWUSD, MINICN, MINIRN, NBLOKS
      LOGICAL         GROW, LBLOCK
C     .. Arrays in Common ..
      LOGICAL         ABORT(4)
C     .. Local Scalars ..
      INTEGER         IXTRAI, IXTRAR
      LOGICAL         OKPRNT
C     .. External Subroutines ..
      EXTERNAL        D02NNR
C     .. Intrinsic Functions ..
      INTRINSIC       MAX, MIN, DBLE, NINT
C     .. Common blocks ..
      COMMON          /AD02NM/ITRACE, IDEV
      COMMON          /DD02NN/IKEEP, IPIWK, IPRWK, IRN, LIRN, ICN, LICN,
     *                ISPRWK, ISPIWK
      COMMON          /ED02NN/LENIWK, LENRWK
      COMMON          /FD02NN/RSPLIT, LIWUSD, LIWREQ, LRWREQ, LRWUSD,
     *                ISPSET
      COMMON          /HD02NN/I1, I2, IRCMPS, ICCMPS, I5, MINIRN,
     *                MINICN, I8, NBLOKS, I10
      COMMON          /JD02NN/U, ETA, RGROW, LBLOCK, GROW, ABORT
C     .. Save statement ..
      SAVE            /ED02NN/, /JD02NN/, /FD02NN/, /DD02NN/, /HD02NN/,
     *                /AD02NM/
C     .. Executable Statements ..
      OKPRNT = ITRACE .GT. 2
C
      IF (IRCMPS.EQ.0 .AND. ICCMPS.EQ.0) THEN
C
         IXTRAI = MIN(0,5*(MINICN+MINIRN)/2+1-ISPIWK)
         IF (IXTRAI.LT.0 .AND. OKPRNT) CALL D02NNR(1)
         IXTRAR = MIN(0,5*MINICN/2+1-ISPRWK)
         IF (IXTRAR.LT.0 .AND. OKPRNT) CALL D02NNR(2)
         LRWREQ = LENRWK + IXTRAR
         LIWREQ = LENIWK + IXTRAI
         GO TO 20
C
      ELSE IF (IRCMPS.GT.0 .AND. ICCMPS.GT.0) THEN
C
         IXTRAI = MAX(NINT(1.1D0*ISPIWK),NINT(1.5D0*(MINIRN+MINICN))) -
     *            ISPIWK
         IF (OKPRNT) CALL D02NNR(3)
         IXTRAR = MAX(0,LICN+NINT(RSPLIT*IXTRAI)-ISPRWK)
         IF (IXTRAR.GT.0 .AND. OKPRNT) CALL D02NNR(4)
C
      ELSE IF (IRCMPS.GT.4 .AND. ICCMPS.EQ.0) THEN
C
         IXTRAI = MAX(NINT(1.1D0*LIRN),NINT(1.5D0*MINIRN)) - LIRN
         IF (OKPRNT) CALL D02NNR(3)
         RSPLIT = DBLE(LICN)/(ISPIWK+IXTRAI)
         IF (OKPRNT) CALL D02NNR(5)
C
      ELSE IF (IRCMPS.LE.4 .AND. ICCMPS.EQ.0) THEN
C
         IXTRAI = NINT(0.1D0*LIRN)
         IF (LICN-IXTRAI.GT.3*MINICN/2+1) THEN
            IF (ISPSET.EQ.0) THEN
               RSPLIT = DBLE(LICN-IXTRAI)/ISPIWK
               IF (OKPRNT) CALL D02NNR(6)
               IXTRAI = 0
            ELSE
               IXTRAI = NINT(0.1D0*(LICN+LIRN))
               IF (OKPRNT) CALL D02NNR(3)
            END IF
         ELSE
            IF (OKPRNT) CALL D02NNR(3)
            RSPLIT = DBLE(LICN)/(ISPIWK+IXTRAI)
            IF (OKPRNT) CALL D02NNR(5)
         END IF
C
      ELSE IF (IRCMPS.EQ.0 .AND. ICCMPS.GT.4) THEN
C
         IF (LICN.EQ.ISPRWK) THEN
            IXTRAR = MAX(NINT(1.1D0*ISPRWK),NINT(1.5D0*MINICN)) - ISPRWK
            IF (OKPRNT) CALL D02NNR(7)
            IXTRAI = MAX(0,LICN+IXTRAR+3*MINIRN/2+1-ISPIWK)
            IF (IXTRAI.GT.0 .AND. OKPRNT) CALL D02NNR(8)
            RSPLIT = DBLE(LICN+IXTRAR)/(ISPIWK+MAX(0,IXTRAI))
            IF (OKPRNT) CALL D02NNR(5)
         ELSE
            IXTRAI = MAX(NINT(1.1D0*LICN),NINT(1.5D0*MINICN)) - LICN
            IF (OKPRNT) CALL D02NNR(3)
            IXTRAR = MAX(0,LICN+IXTRAI-ISPRWK)
            IF (IXTRAR.GT.0 .AND. OKPRNT) CALL D02NNR(4)
            RSPLIT = DBLE(LICN+IXTRAI)/(ISPIWK+IXTRAI)
            IF (OKPRNT) CALL D02NNR(5)
         END IF
C
      ELSE IF (IRCMPS.EQ.0 .AND. ICCMPS.LE.4) THEN
C
         IXTRAI = NINT(0.1D0*LICN)
         IF (LIRN-IXTRAI.GT.3*MINIRN/2+1) THEN
            IF (ISPSET.EQ.0) THEN
               RSPLIT = DBLE(IXTRAI+LICN)/ISPIWK
               IF (OKPRNT) CALL D02NNR(6)
               IXTRAI = 0
            ELSE
               IXTRAI = NINT(0.1D0*(LIRN+LICN))
               IF (OKPRNT) CALL D02NNR(3)
            END IF
         ELSE
            IF (OKPRNT) CALL D02NNR(3)
            RSPLIT = DBLE(IXTRAI+LICN)/(ISPIWK+IXTRAI)
            IF (OKPRNT) CALL D02NNR(5)
            IXTRAR = MAX(0,LICN+IXTRAI-ISPRWK)
            IF (IXTRAR.GT.0 .AND. OKPRNT) CALL D02NNR(4)
         END IF
      END IF
C
      LIWREQ = LIWUSD + IXTRAI
      LRWREQ = LRWUSD + IXTRAR
C
   20 IF (LBLOCK .AND. NBLOKS.EQ.1 .AND. OKPRNT) CALL D02NNR(9)
C
      RETURN
      END
