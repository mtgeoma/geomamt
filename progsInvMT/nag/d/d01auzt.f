      SUBROUTINE D01AUZ(F,A,B,RESULT,ABSERR,RESABS,RESASC)
C     MARK 13 RELEASE.  NAG COPYRIGHT 1988.
C     BASED ON QUADPACK ROUTINE  QK61.
C     ..................................................................
C
C        PURPOSE
C           TO COMPUTE I = INTEGRAL OF F OVER (A,B), WITH ERROR
C                          ESTIMATE
C                      J = INTEGRAL OF ABS(F) OVER (A,B)
C
C        PARAMETERS
C         ON ENTRY
C            F      - SUBROUTINE, SUPPLIED BY THE USER.
C
C                     F  MUST RETURN THE VALUE OF THE INTEGRAND AT
C                     A SET OF POINTS X(1),X(2),...,X(N). THAT IS,
C                     F(X(1)),F(X(2)),...,F(X(N)).
C
C                     ITS SPECIFICATION IS:
C                     SUBROUTINE F(X,FV,N)
C                     INTEGER    N
C                     REAL       X(N), FV(N)
C
C                     ON EXIT, FV(J) MUST BE SET TO THE VALUE OF THE
C                     INTEGRAND AT THE POINT X(J) FOR J = 1,2,...,N.
C                     THAT IS, FV(J) = F(X(J)). THE ACTUAL NAME FOR F
C                     NEEDS TO BE DECLARED  E X T E R N A L  IN THE
C                     DRIVER PROGRAM.
C
C           A      - REAL
C                    LOWER LIMIT OF INTEGRATION
C
C           B      - REAL
C                    UPPER LIMIT OF INTEGRATION
C
C         ON RETURN
C           RESULT - REAL
C                    APPROXIMATION TO THE INTEGRAL I
C                    RESULT IS COMPUTED BY APPLYING THE 61-POINT
C                    KRONROD RULE (RESK) OBTAINED BY OPTIMAL ADDITION OF
C                    ABSCISSAE TO THE 30-POINT GAUSS RULE (RESG).
C
C           ABSERR - REAL
C                    ESTIMATE OF THE MODULUS OF THE ABSOLUTE ERROR,
C                    WHICH SHOULD EQUAL OR EXCEED ABS(I-RESULT)
C
C           RESABS - REAL
C                    APPROXIMATION TO THE INTEGRAL J
C
C           RESASC - REAL
C                    APPROXIMATION TO THE INTEGRAL OF ABS(F-I/(B-A))
C
C     .................................................................
C
C           THE ABSCISSAE AND WEIGHTS ARE GIVEN FOR THE
C           INTERVAL (-1,1). BECAUSE OF SYMMETRY ONLY THE POSITIVE
C           ABSCISSAE AND THEIR CORRESPONDING WEIGHTS ARE GIVEN.
C
C           XGK   - ABSCISSAE OF THE 61-POINT KRONROD RULE
C                   XGK(2), XGK(4)  ... ABSCISSAE OF THE 30-POINT
C                   GAUSS RULE
C                   XGK(1), XGK(3)  ... OPTIMALLY ADDED ABSCISSAE
C                   TO THE 30-POINT GAUSS RULE
C
C           WGK   - WEIGHTS OF THE 61-POINT KRONROD RULE
C
C           WG    - WEIGHTS OF THE 30-POINT GAUSS RULE
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION  A, ABSERR, B, RESABS, RESASC, RESULT
C     .. Subroutine Arguments ..
      EXTERNAL          F
C     .. Local Scalars ..
      DOUBLE PRECISION  CENTR, DHLGTH, EPMACH, HLGTH, OFLOW, RESG, RESK,
     *                  RESKH, UFLOW
      INTEGER           I, J
C     .. Local Arrays ..
      DOUBLE PRECISION  ABSC(61), FV(61), WG(15), WGK(31), XGK(31)
C     .. External Functions ..
      DOUBLE PRECISION  X02AJF, X02AMF
      EXTERNAL          X02AJF, X02AMF
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX, MIN
C     .. Data statements ..
      DATA              WG(1)/0.007968192496166605615465883474674D+00/,
     *                  WG(2)/0.018466468311090959142302131912047D+00/,
     *                  WG(3)/0.028784707883323369349719179611292D+00/,
     *                  WG(4)/0.038799192569627049596801936446348D+00/,
     *                  WG(5)/0.048402672830594052902938140422808D+00/,
     *                  WG(6)/0.057493156217619066481721689402056D+00/,
     *                  WG(7)/0.065974229882180495128128515115962D+00/,
     *                  WG(8)/0.073755974737705206268243850022191D+00/,
     *                  WG(9)/0.080755895229420215354694938460530D+00/,
     *                  WG(10)/0.086899787201082979802387530715126D+00/,
     *                  WG(11)/0.092122522237786128717632707087619D+00/,
     *                  WG(12)/0.096368737174644259639468626351810D+00/,
     *                  WG(13)/0.099593420586795267062780282103569D+00/,
     *                  WG(14)/0.101762389748405504596428952168554D+00/,
     *                  WG(15)/0.102852652893558840341285636705415D+00/
      DATA              XGK(1)/0.999484410050490637571325895705811D+00/,
     *                  XGK(2)/0.996893484074649540271630050918695D+00/,
     *                  XGK(3)/0.991630996870404594858628366109486D+00/,
     *                  XGK(4)/0.983668123279747209970032581605663D+00/,
     *                  XGK(5)/0.973116322501126268374693868423707D+00/,
     *                  XGK(6)/0.960021864968307512216871025581798D+00/,
     *                  XGK(7)/0.944374444748559979415831324037439D+00/,
     *                  XGK(8)/0.926200047429274325879324277080474D+00/,
     *                  XGK(9)/0.905573307699907798546522558925958D+00/,
     *                  XGK(10)/0.882560535792052681543116462530226D+00/
     *                  , XGK(11)/
     *                  0.857205233546061098958658510658944D+00/,
     *                  XGK(12)/0.829565762382768397442898119732502D+00/
     *                  , XGK(13)/
     *                  0.799727835821839083013668942322683D+00/,
     *                  XGK(14)/0.767777432104826194917977340974503D+00/
     *                  , XGK(15)/
     *                  0.733790062453226804726171131369528D+00/
      DATA              XGK(16)/0.697850494793315796932292388026640D+00/
     *                  , XGK(17)/
     *                  0.660061064126626961370053668149271D+00/,
     *                  XGK(18)/0.620526182989242861140477556431189D+00/
     *                  , XGK(19)/
     *                  0.579345235826361691756024932172540D+00/,
     *                  XGK(20)/0.536624148142019899264169793311073D+00/
     *                  , XGK(21)/
     *                  0.492480467861778574993693061207709D+00/,
     *                  XGK(22)/0.447033769538089176780609900322854D+00/
     *                  , XGK(23)/
     *                  0.400401254830394392535476211542661D+00/,
     *                  XGK(24)/0.352704725530878113471037207089374D+00/
     *                  , XGK(25)/
     *                  0.304073202273625077372677107199257D+00/,
     *                  XGK(26)/0.254636926167889846439805129817805D+00/
     *                  , XGK(27)/
     *                  0.204525116682309891438957671002025D+00/,
     *                  XGK(28)/0.153869913608583546963794672743256D+00/
      DATA              XGK(29)/0.102806937966737030147096751318001D+00/
     *                  , XGK(30)/
     *                  0.051471842555317695833025213166723D+00/,
     *                  XGK(31)/0.000000000000000000000000000000000D+00/
      DATA              WGK(1)/0.001389013698677007624551591226760D+00/,
     *                  WGK(2)/0.003890461127099884051267201844516D+00/,
     *                  WGK(3)/0.006630703915931292173319826369750D+00/,
     *                  WGK(4)/0.009273279659517763428441146892024D+00/,
     *                  WGK(5)/0.011823015253496341742232898853251D+00/,
     *                  WGK(6)/0.014369729507045804812451432443580D+00/,
     *                  WGK(7)/0.016920889189053272627572289420322D+00/,
     *                  WGK(8)/0.019414141193942381173408951050128D+00/,
     *                  WGK(9)/0.021828035821609192297167485738339D+00/,
     *                  WGK(10)/0.024191162078080601365686370725232D+00/
     *                  , WGK(11)/
     *                  0.026509954882333101610601709335075D+00/,
     *                  WGK(12)/0.028754048765041292843978785354334D+00/
     *                  , WGK(13)/
     *                  0.030907257562387762472884252943092D+00/,
     *                  WGK(14)/0.032981447057483726031814191016854D+00/
     *                  , WGK(15)/
     *                  0.034979338028060024137499670731468D+00/
      DATA              WGK(16)/0.036882364651821229223911065617136D+00/
     *                  , WGK(17)/
     *                  0.038678945624727592950348651532281D+00/,
     *                  WGK(18)/0.040374538951535959111995279752468D+00/
     *                  , WGK(19)/
     *                  0.041969810215164246147147541285970D+00/,
     *                  WGK(20)/0.043452539701356069316831728117073D+00/
     *                  , WGK(21)/
     *                  0.044814800133162663192355551616723D+00/,
     *                  WGK(22)/0.046059238271006988116271735559374D+00/
     *                  , WGK(23)/
     *                  0.047185546569299153945261478181099D+00/,
     *                  WGK(24)/0.048185861757087129140779492298305D+00/
     *                  , WGK(25)/
     *                  0.049055434555029778887528165367238D+00/,
     *                  WGK(26)/0.049795683427074206357811569379942D+00/
     *                  , WGK(27)/
     *                  0.050405921402782346840893085653585D+00/,
     *                  WGK(28)/0.050881795898749606492297473049805D+00/
      DATA              WGK(29)/0.051221547849258772170656282604944D+00/
     *                  , WGK(30)/
     *                  0.051426128537459025933862879215781D+00/,
     *                  WGK(31)/0.051494729429451567558340433647099D+00/
C     .. Executable Statements ..
C
C           LIST OF MAJOR VARIABLES
C           -----------------------
C
C           CENTR  - MID POINT OF THE INTERVAL
C           HLGTH  - HALF-LENGTH OF THE INTERVAL
C           ABSC   - ABSCISSA
C           FVAL*  - FUNCTION VALUE
C           RESG   - RESULT OF THE 30-POINT GAUSS RULE
C           RESK   - RESULT OF THE 61-POINT KRONROD RULE
C           RESKH  - APPROXIMATION TO THE MEAN VALUE OF F
C                    OVER (A,B), I.E. TO I/(B-A)
C
      EPMACH = X02AJF()
      UFLOW = X02AMF()
      OFLOW = 1.0D+00/UFLOW
      CENTR = 5.0D-01*(B+A)
      HLGTH = 5.0D-01*(B-A)
      DHLGTH = ABS(HLGTH)
C
C           COMPUTE THE 61-POINT KRONROD APPROXIMATION TO THE INTEGRAL,
C           AND ESTIMATE THE ABSOLUTE ERROR.
C
      DO 20 I = 1, 30
         ABSC(31-I) = CENTR - HLGTH*XGK(I)
         ABSC(31+I) = CENTR + HLGTH*XGK(I)
   20 CONTINUE
      ABSC(31) = CENTR
      CALL F(ABSC,FV,61)
      RESG = 0.0D+00
      RESK = WGK(31)*FV(31)
      RESABS = ABS(RESK)
      DO 40 J = 1, 30
         RESK = RESK + WGK(J)*(FV(31-J)+FV(31+J))
         RESABS = RESABS + WGK(J)*(ABS(FV(31-J))+ABS(FV(31+J)))
   40 CONTINUE
      DO 60 J = 1, 15
         RESG = RESG + WG(J)*(FV(31-2*J)+FV(31+2*J))
   60 CONTINUE
      RESKH = RESK*5.0D-01
      RESASC = WGK(31)*ABS(FV(31)-RESKH)
      DO 80 J = 1, 30
         RESASC = RESASC + WGK(J)*(ABS(FV(31-J)-RESKH)+ABS(FV(31+J)
     *            -RESKH))
   80 CONTINUE
      RESULT = RESK*HLGTH
      RESABS = RESABS*DHLGTH
      RESASC = RESASC*DHLGTH
      ABSERR = ABS((RESK-RESG)*HLGTH)
      IF (RESASC.NE.0.0D+00 .AND. ABSERR.NE.0.0D+00)
     *    ABSERR = RESASC*MIN(1.0D+00,(2.0D+02*ABSERR/RESASC)**1.5D+00)
      IF (RESABS.GT.UFLOW/(5.0D+01*EPMACH))
     *    ABSERR = MAX((EPMACH*5.0D+01)*RESABS,ABSERR)
      RETURN
      END
