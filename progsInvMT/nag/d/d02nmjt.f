      SUBROUTINE D02NMJ(NEQ,Y,YH,NYH,EWT,FTEM,SAVF,YDOT,WK,IWK,IFJ,H,
     *                  EL0,TN,IFUNC,RDAE,IREVCM)
C     MARK 12 RELEASE. NAG COPYRIGHT 1986.
C
C     OLD NAME PRJS
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION  EL0, H, TN
      INTEGER           IFJ, IFUNC, IREVCM, NEQ, NYH
C     .. Array Arguments ..
      DOUBLE PRECISION  EWT(*), FTEM(*), RDAE(*), SAVF(*), WK(*), Y(*),
     *                  YDOT(*), YH(NYH,*)
      INTEGER           IWK(*)
C     .. Scalars in Common ..
      DOUBLE PRECISION  CCMXJ, CON, CON0, CONMIN, DUNFLO, FAC, HL0,
     *                  HL0OLD, PIJ, PSMALL, R, R0, RBIG, RCON, RCONT,
     *                  SETH, SRUR, UROUND
      INTEGER           I, IBA, IBIAN, IBJAN, IBJGP, ICOL, IDEV, IDSTRC,
     *                  IESP, IOVFLO, IPA, IPC, IPIAN, IPIC, IPIGP,
     *                  IPISP, IPJAN, IPJGP, IPLOST, IPR, IPRSP, IROW,
     *                  ISTATC, ITRACE, IYS, J, JJ, JMAX, JMIN, JOK,
     *                  JPFLAG, K, KMAX, KMIN, LENWK, LRAT, LREQ, LREST,
     *                  LWMIN, MM4, MOSS, MSBJ, N, NG, NGP, NLU, NNZ,
     *                  NSLJ, NSP
      CHARACTER*6       SINGLR
C     .. Local Scalars ..
      DOUBLE PRECISION  FAC1
      INTEGER           IFZAF
C     .. External Functions ..
      DOUBLE PRECISION  D02ZAF
      EXTERNAL          D02ZAF
C     .. External Subroutines ..
      EXTERNAL          D02NMH, D02NNN, D02NNU
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX, SQRT, DBLE
C     .. Common blocks ..
      COMMON            /AD02NM/ITRACE, IDEV
      COMMON            /AD02NN/J, MM4
      COMMON            /BD02NN/CON0, CONMIN, CCMXJ, PSMALL, RBIG, SETH,
     *                  IPLOST, IESP, ISTATC, IYS, IBA, IBIAN, IBJAN,
     *                  IBJGP, IPIAN, IPJAN, IPJGP, IPIGP, IPR, IPC,
     *                  IPIC, IPISP, IPRSP, IPA, LENWK, LREQ, LRAT,
     *                  LREST, LWMIN, MOSS, MSBJ, NSLJ, NGP, NLU, NNZ,
     *                  NSP
      COMMON            /FD02NM/DUNFLO, UROUND, IOVFLO
      COMMON            /GD02NN/IDSTRC
      COMMON            /MD02NM/SINGLR
      COMMON            /ND02NM/IROW, ICOL
      COMMON            /QD02NN/CON, FAC, HL0, HL0OLD, PIJ, R, R0,
     *                  RCONT, SRUR, RCON, I, JJ, JMAX, JMIN, JOK,
     *                  JPFLAG, K, KMAX, KMIN, N, NG
C     .. Save statement ..
      SAVE              /QD02NN/, /BD02NN/, /FD02NM/, /MD02NM/,
     *                  /GD02NN/, /AD02NN/, /ND02NM/, /AD02NM/
C     .. Executable Statements ..
C
C-----------------------------------------------------------------------
C D02NMJ IS CALLED TO COMPUTE AND PROCESS THE MATRIX DF/DYDOT - H*EL0*J
C WHERE J = DF/DY AND BOTH J AND DF/DYDOT ARE
C COMPUTED BY COLUMNS, EITHER BY THE USER-SUPPLIED ROUTINE JAC
C IF MITER = 1, OR BY FINITE DIFFERENCING IF MITER = 2.
C IF MITER = 1 OR 2, AND IF THE EXISTING VALUE OF THE JACOBIAN
C (AS CONTAINED IN P) IS CONSIDERED ACCEPTABLE, THEN A NEW VALUE OF
C P IS RECONSTRUCTED FROM THE OLD VALUE.  IN ANY CASE, WHEN MITER
C IS 1 OR 2, THE P MATRIX IS SUBJECTED TO LU DECOMPOSITION IN CDRV.
C P AND ITS LU DECOMPOSITION ARE STORED (SEPARATELY) IN WK.
C
C IN ADDITION TO VARIABLES DESCRIBED PREVIOUSLY, COMMUNICATION
C WITH D02NMJ USES THE FOLLOWING..
C Y     = ARRAY CONTAINING PREDICTED VALUES ON ENTRY.
C YDOT  = ARRAY CONTAINING PREDICTED VALUES OF TIME DERIVATIVE ON ENTRY
C FTEM  = WORK ARRAY OF LENGTH N (ACOR IN STODE).
C SAVF  = ARRAY CONTAINING F EVALUATED AT PREDICTED Y.
C WK    = REAL WORK SPACE FOR MATRICES.  ON OUTPUT IT CONTAINS THE
C         THE SPARSE LU DECOMPOSITION IF MITER IS 1 OR 2.
C         STORAGE OF MATRIX ELEMENTS STARTS AT WK(1).
C IWK   = INTEGER WORK SPACE FOR MATRIX-RELATED DATA, ASSUMED TO
C         BE EQUIVALENCED TO WK.  IN ADDITION, WK(IPRSP) AND IWK(IPISP)
C         ARE ASSUMED TO HAVE IDENTICAL LOCATIONS.
C EL0   = EL(1) (INPUT).
C IERPJ = OUTPUT ERROR FLAG (IN COMMON).
C       = 0 IF NO ERROR.
C       = 1  IF ZERO PIVOT FOUND IN CDRV.
C       = 2  IF A SINGULAR MATRIX AROSE WITH MITER = 3.
C       = -1 IF INSUFFICIENT STORAGE FOR CDRV (SHOULD NOT OCCUR HERE).
C       = -2 IF OTHER ERROR FOUND IN CDRV (SHOULD NOT OCCUR HERE).
C H     =  CURRENT STEPSIZE IN USE
C TN    =  CURRENT VALUE OF THE TIME STEP
C IFJ   =  OUTPUT ERROR FLAG
C          .LT. 0 IF THE JACOBIAN MATRIX IS SINGULAR
C             = 0 IF THE DECOMPOSTION WENT 0.K.
C          .GT. 0 IF THIS IS A REVERSE COMMUNICATION EXIT.
C IFUNC = INDICATOR TO DETERMINE THE MODE OF OPERATION OF THE ROUTINE
C          = 0 MEANS REVERSE COMMUNICATION ENTRY.
C          = 1 MEANS CALCULATE THE NORMAL JACOBIAN MATRIX
C THIS ROUTINE ALSO USES UROUND IN COMMON/FD02NM/
C-----------------------------------------------------------------------
      IF (IREVCM.EQ.8) GO TO 60
      IF (IFJ.GT.0) GO TO 160
      N = NEQ
      HL0 = H*EL0
      CON = -HL0
C
C  THE JACOBIAN IS TO BE REEVALUATED. --------------------------------
C
      IPLOST = 0
      HL0OLD = HL0
      CONMIN = ABS(CON)
      IF (MOSS.EQ.0 .OR. MOSS.EQ.2) GO TO 100
C     IF(MOSS .NE. 1)GOTO 200
C
C  MOSS = 1 - THE JACOBIAN IS TO BE FORMED FROM THE USERS ROUTINE.
C
      KMIN = IWK(IPIAN)
      J = 0
   20 J = J + 1
      KMAX = IWK(IPIAN+J) - 1
      DO 40 I = 1, N
         Y(I) = YH(I,1)
         YDOT(I) = YH(I,2)/H
         FTEM(I) = 0.0D0
   40 CONTINUE
      IREVCM = 8
      RETURN
C
C         CALL JAC( NEQ, TN, Y, YDOT, H, EL0, J, IWK(IPIAN), IWK(IPJAN),
C     1             FTEM)
C
   60 CONTINUE
      IREVCM = 0
      DO 80 K = KMIN, KMAX
         I = IWK(IBJAN+K)
         WK(IBA+K) = FTEM(I)*(RDAE(I)+(1.0D0-RDAE(I))/(EL0*H))
   80 CONTINUE
      KMIN = KMAX + 1
      IF (J.EQ.N) GO TO 240
      GO TO 20
C
C IF MITER = 2, MAKE NGP CALLS TO F TO APPROXIMATE J AND P. ------------
C
  100 CONTINUE
      IFZAF = 1
      FAC = D02ZAF(N,SAVF,EWT,IFZAF)
      R0 = 1000.0D0*ABS(H)*UROUND*DBLE(N)*FAC
      IF (R0.EQ.0.0D0) R0 = 1.0D0
      SRUR = SQRT(UROUND)
      JMIN = IWK(IPIGP)
      IFJ = 0
  120 IFJ = IFJ + 1
      NG = IFJ
      JMAX = IWK(IPIGP+NG) - 1
      DO 140 J = JMIN, JMAX
         JJ = IWK(IBJGP+J)
         R = MAX(SRUR*ABS(Y(JJ)),R0/EWT(JJ))
C   THE FOLLOWING LINE BY M.BERZINS 3/12/83. REMOVE FOR HINDMARSH CODE
         R = MAX(R,UROUND)
C205
C205      COULD VECTORISE THIS LOOP BY SPLITTING INTO TWO LOOPS AT
C205      THIS POINT AND STORING THE QUANTITIES 'R' IN A
C205      TEMPORARY VECTOR
C205
         YDOT(JJ) = YH(JJ,2)/H + R/HL0
         Y(JJ) = YH(JJ,1) + R
  140 CONTINUE
      RETURN
C
C    REVERSE COMMUNICATION EXIT FOR A FUNCTION CALL
C
  160 CONTINUE
      DO 220 J = JMIN, JMAX
         JJ = IWK(IBJGP+J)
         R = Y(JJ) - YH(JJ,1)
         Y(JJ) = YH(JJ,1)
         YDOT(JJ) = YH(JJ,2)/H
CRWB      R =  MAX (SRUR* ABS(Y(JJ)),R0/EWT(JJ))
C    THE FOLLOWING LINE BY M.BERZINS 3/12/83. REMOVE FOR HINDMARSH CODE
CRWB      R =  MAX (R, UROUND)
         FAC = -HL0/R
         FAC1 = -1.0D0/R
         KMIN = IWK(IBIAN+JJ)
         KMAX = IWK(IBIAN+JJ+1) - 1
         DO 180 K = KMIN, KMAX
            I = IWK(IBJAN+K)
            WK(IBA+K) = (FTEM(I)-SAVF(I))*(FAC*RDAE(I)+(1.0D0-RDAE(I))
     *                  *FAC1)
  180    CONTINUE
         IF (ITRACE.GE.3) THEN
            DO 200 K = KMIN, KMAX
               I = IWK(IBJAN+K)
               IROW = I
               ICOL = JJ
               CALL D02NNN(WK(IBA+K),1,25)
  200       CONTINUE
         END IF
  220 CONTINUE
      JMIN = JMAX + 1
      IF (NG.EQ.NGP) THEN
         IFJ = 0
      ELSE
         GO TO 120
      END IF
C
C DO NUMERICAL FACTORIZATION OF P MATRIX. ------------------------------
C
  240 NLU = NLU + 1
      CON0 = CON
      IFJ = 0
      DO 260 I = 1, N
         FTEM(I) = 0.0D0
  260 CONTINUE
      SINGLR = 'NSING3'
      IF (IDSTRC.EQ.0) THEN
C        FIRST TIME THIS SPARSITY STRUCTURE HAS BEEN USED
         CALL D02NNU(N,IWK,WK,WK,1,IFJ)
      ELSE IF (IDSTRC.EQ.1) THEN
C        DECOMPOSE NEW MATRIX WITH OLD SPARSITY STRUCTURE
         CALL D02NNU(N,IWK,WK,WK,2,IFJ)
      END IF
      IF (IFJ.EQ.0) THEN
         IDSTRC = 1
         RETURN
      END IF
      CALL D02NMH(IFJ,IDSTRC,N)
      IF (IFJ.EQ.-1) SINGLR = 'SINGLR'
      IDSTRC = 0
C                 TO HANDLE ERROR MESSAGE NUMBER FROM D02NNU
      RETURN
      END
