      SUBROUTINE D02NMM(NEQ,Y,YH,NYH,EWT,FTEM,SAVF,YDOT,WK,JACPVT,IFJ,H,
     *                  EL0,TN,IFUNC,RDAE,RWORK,IREVCM,INFORM)
C     MARK 12 RELEASE. NAG COPYRIGHT 1986.
C     MARK 14B REVISED. IER-838 (MAR 1990).
C     MARK 17 REVISED. IER-1670 (JUN 1995).
C
C     OLD NAME PREPJS
C
C VP changed 11/5/95 following bug fix by Justin Ware -- changes marked VP
C
C----------------------------------------------------------------------
C       DRIVING ROUTINE TO CALL EITHER THE ROUTINE D02NML TO DETERMINE
C       THE SPARSITRY PATTERN OF THE JACOBIAN (D02NML) AN /OR TO CALL
C       THE ROUTINE TO ACTUALLY FORM THE JACOBIAN.
C----------------------------------------------------------------------
C GD02NN
C   IDSTRC  THIS IS SET TO 0 EVERY TIME THE SPARSITY PATTERN IS
C           RECOMPUTED SO THAT D02NNU CAN USE F01BRF TO DECOMPOSE THE
C           MATRIX WHEN IT HAS BEEN FORMED. IDSTRC SET TO 1 AFTER A
C           CALL TO F01BRF SO THAT F01BSF CAN BE USED TO DECOMPOSE
C           MATRICES OF THE SAME STRUCTURE USNG INFORMATION ALREADY
C           GENERATED BY F01BRF.
C     .. Scalar Arguments ..
      DOUBLE PRECISION  EL0, H, TN
      INTEGER           IFJ, IFUNC, IREVCM, NEQ, NYH
C     .. Array Arguments ..
      DOUBLE PRECISION  EWT(*), FTEM(*), RDAE(*), RWORK(50), SAVF(*),
     *                  WK(*), Y(*), YDOT(*), YH(NYH,*)
      INTEGER           INFORM(*), JACPVT(*)
C     .. Scalars in Common ..
      DOUBLE PRECISION  CCMXJ, ETA, RGROW, RSPLIT, SENS, U
      INTEGER           ICURR, IDSTRC, IDUM2, IDUM4, IFSAVE, IJCNT,
     *                  IPREP, ISEND, ISPSET, LENIWK, LENRWK, LIWREQ,
     *                  LIWUSD, LRWREQ, LRWUSD, MM1, MOSS, MSBJ, N,
     *                  NBLOCK, NGP, NLU, NNZ, NP1, NSLJ
C VP  LOGICAL           COPYPT, GROW, LBLOCK, SETINF
      LOGICAL           COPYPT, GROW, LBLOCK, RESOKY, SETINF
C     .. Arrays in Common ..
      DOUBLE PRECISION  RDUM1(2), RDUM2(2)
      INTEGER           IDUM1(23), IDUM3(8)
      LOGICAL           ABORT(4)
C     .. Local Scalars ..
      INTEGER           I
C     .. External Functions ..
      INTEGER           X02BBF
      EXTERNAL          X02BBF
C     .. External Subroutines ..
      EXTERNAL          D02NMJ, D02NML
C     .. Intrinsic Functions ..
      INTRINSIC         DBLE, INT, MIN, NINT
C     .. Common blocks ..
      COMMON            /AD02NN/MM1, ISEND
      COMMON            /BD02NN/RDUM1, CCMXJ, RDUM2, SENS, IDUM1, MOSS,
     *                  MSBJ, NSLJ, NGP, NLU, NNZ, IDUM2
      COMMON            /ED02NN/LENIWK, LENRWK
      COMMON            /FD02NN/RSPLIT, LIWUSD, LIWREQ, LRWREQ, LRWUSD,
     *                  ISPSET
      COMMON            /GD02NN/IDSTRC
      COMMON            /HD02NN/IDUM3, NBLOCK, IDUM4
      COMMON            /JD02NN/U, ETA, RGROW, LBLOCK, GROW, ABORT
      COMMON            /KD02NN/COPYPT
C VP  COMMON            /LD02NN/IJCNT, N
      COMMON            /LD02NN/IJCNT, N, RESOKY
      COMMON            /MD02NN/IFSAVE, ICURR, NP1, IPREP, SETINF
C     .. Save statement ..
      SAVE              /LD02NN/, /MD02NN/, /GD02NN/, /AD02NN/,
     *                  /FD02NN/, /BD02NN/, /JD02NN/, /ED02NN/,
     *                  /HD02NN/, /KD02NN/
C     .. Executable Statements ..
      IF (IREVCM.EQ.8) THEN
         GO TO (20,60) ISEND
      END IF
C
      IF (RWORK(35).EQ.1.0D0) THEN
         RWORK(35) = 2.0D0
         MOSS = INT(RWORK(48))
         RSPLIT = RWORK(36)
         ISPSET = INT(RWORK(37))
         U = RWORK(38)
         ETA = RWORK(39)
         LBLOCK = RWORK(42) .EQ. 1.0D0
         GROW = RWORK(41) .EQ. 1.0D0
         COPYPT = .TRUE.
         SENS = RWORK(43)
         ABORT(1) = .TRUE.
         ABORT(2) = .TRUE.
         ABORT(3) = .FALSE.
         ABORT(4) = .TRUE.
         IJCNT = 0
         SETINF = .TRUE.
         N = NEQ
         MSBJ = 50
         NLU = 0
         NSLJ = 0
         CCMXJ = 0.2D0
         LENIWK = INT(RWORK(47))
         LENRWK = INT(RWORK(46))
      END IF
C
      IF (N.NE.NEQ) THEN
C        O.D.E. PROBLEM HAS CHANGED DIMENSION RECOMPUTE SPARSITY
         N = NEQ
         IJCNT = 0
         SETINF = .TRUE.
      END IF
      NP1 = NEQ + 2
      IF (IFUNC.NE.0) IFSAVE = IFUNC
      IF (IFUNC.EQ.0) THEN
         IF (ICURR.EQ.1) GO TO 40
      ELSE
         IFJ = 0
         IF (IJCNT.GT.0) GO TO 40
      END IF
      IDSTRC = 0
C
C VP NEXT SECTION ADDED
C Prior to call iterML we have to ensure that SAVF contains a residual
C evaluation with the y and ydot extracted from the back vectors.
      IF (IFJ.EQ.0) THEN
         DO 10 I = 1, NEQ
           Y(I) = YH(I,1)
           YDOT(I) = YH(I,2)/H
   10    CONTINUE
         RESOKY = .FALSE.
C        Reverse out to get a clean residual evaluation in FTEM.
         ICURR = 0
         IFUNC = 0
         IFJ = 1
         RETURN
      END IF
      IF (IFJ.EQ.1 .AND. .NOT. RESOKY) THEN
C        Put the clean residual in SAVF and pretend nothing happened.
         DO 15 I = 1, NEQ
           SAVF(I) = FTEM(I)
   15    CONTINUE
C        Residual is okay so don't get trapped in here again.
         RESOKY = .TRUE.
         IFJ = 0
      END IF
C END OF VP ADDITION
C
   20 CALL D02NML(NEQ,Y,YDOT,YH,NYH,SAVF,EWT,FTEM,WK,JACPVT,IFJ,H,EL0,
     *            TN,IREVCM)
      IF (IREVCM.EQ.8) THEN
         ISEND = 1
         INFORM(23) = ISEND
         INFORM(20) = MM1
         RETURN
      END IF
      IPREP = 0
C           IS SET TO 1 BELOW WHEN SYMBOLIC FACTOR FAILS.
      IF (IFJ.GT.0) THEN
         ICURR = 0
         IFUNC = 0
         RETURN
      ELSE
         IFUNC = IFSAVE
C      IJCNT COULD BE USED TO FORCE A PERIODIC RE-EVALUATION OF SPARSITY
         IJCNT = 1
         IF (IFJ.LT.0) THEN
            ICURR = 1
            IPREP = 1
            IFJ = -2
            INFORM(10) = LIWREQ
            INFORM(11) = LIWUSD
            INFORM(12) = LRWREQ
            INFORM(13) = LRWUSD
            RETURN
         END IF
      END IF
   40 IF (IPREP.EQ.1) THEN
C        SYMBOLIC FACTOR FAILED
         IFJ = -1
         RETURN
      END IF
C
C       CALL ROUTINE TO FORM THE JACOBIAN
C
   60 CALL D02NMJ(NEQ,Y,YH,NYH,EWT,FTEM,SAVF,YDOT,WK,JACPVT,IFJ,H,EL0,
     *            TN,IFUNC,RDAE,IREVCM)
      IF (IREVCM.EQ.8) THEN
         ISEND = 2
         INFORM(23) = ISEND
         INFORM(20) = MM1
         RETURN
      END IF
      IF (IFJ.GT.0) THEN
         ICURR = 1
         IFUNC = 0
      ELSE
         IFUNC = IFSAVE
      END IF
      IF (SETINF .AND. IFJ.LE.0) THEN
         SETINF = .FALSE.
         INFORM(10) = LIWREQ
         INFORM(11) = LIWUSD
         INFORM(12) = LRWREQ
         INFORM(13) = LRWUSD
         IF (IFJ.EQ.0) THEN
            INFORM(15) = NNZ
            INFORM(16) = NGP
            INFORM(17) = NINT(RSPLIT*100.0D0)
            IF (LBLOCK) INFORM(19) = NBLOCK
         END IF
      END IF
      INFORM(14) = NLU
      IF (IFJ.EQ.0 .AND. GROW) INFORM(18) =
     *   NINT(MIN(DBLE(X02BBF(0.0D0)),RGROW))
      IF (MOSS.GT.0 .AND. MOSS.LT.3 .AND. NLU.EQ.1 .AND. IFJ.EQ.0) THEN
         IJCNT = 0
         SETINF = .TRUE.
         COPYPT = .TRUE.
C        FORCES RE-EVALUATION OF SPARSITY PATTERN
      END IF
      RETURN
      END
