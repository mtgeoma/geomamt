      SUBROUTINE D02PDX(NEQ,Y,YP,H,YNEW,STAGES,THRES,ERR,MAIN,WEIGHT)
C     MARK 16 RELEASE. NAG COPYRIGHT 1993.
C$$$$ SUBROUTINE STEPB $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
C************************************************
C**** NOT A DESIGNATED USER-CALLABLE ROUTINE ****
C************************************************
C
C  Purpose:      To compute an error estimate for METHD = 2 prior
C                to completing the step.
C
C  Input:        NEQ, Y(*), YP(*), H, STAGES(NEQ,*), THRES(*), MAIN,
C                WEIGHT(*)
C  Output:       ERR
C
C  Common:       Initializes:    none
C                Reads:          /DD02PD/ E, PTR
C                Alters:         none
C
C  Comments:
C  =========
C  If global error assessment is taking place, then MAIN = .FALSE. and
C  the weight vector generated by the primary integration is used.  The
C  error estimate is a linear combination (with coefficients in E(*))
C  of the stages stored in STAGES(*,*) (located by PTR(*)).
C
C     .. Parameters ..
      DOUBLE PRECISION  ZERO, HALF
      PARAMETER         (ZERO=0.0D0,HALF=0.5D0)
C     .. Scalar Arguments ..
      DOUBLE PRECISION  ERR, H
      INTEGER           NEQ
      LOGICAL           MAIN
C     .. Array Arguments ..
      DOUBLE PRECISION  STAGES(NEQ,*), THRES(*), WEIGHT(*), Y(*),
     *                  YNEW(*), YP(*)
C     .. Scalars in Common ..
      INTEGER           METHD, MINTP, NSTAGE
      LOGICAL           INTP
C     .. Arrays in Common ..
      DOUBLE PRECISION  A(13,13), B(13), BHAT(13), C(13), E(7), R(11,6)
      INTEGER           PTR(13)
C     .. Local Scalars ..
      DOUBLE PRECISION  AVGY, SUM, WT
      INTEGER           INDEX, L
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX
C     .. Common blocks ..
      COMMON            /DD02PD/A, B, C, BHAT, R, E, PTR, NSTAGE, METHD,
     *                  MINTP, INTP
C     .. Save statement ..
      SAVE              /DD02PD/
C     .. Executable Statements ..
C
      ERR = ZERO
      DO 40 L = 1, NEQ
C
C  Estimate the local error of component L. The coding makes use of
C  E(2) = 0.0D0 and E(7) = 0.0D0.
C
         SUM = E(1)*YP(L)
         DO 20 INDEX = 3, 6
            SUM = SUM + E(INDEX)*STAGES(L,PTR(INDEX))
   20    CONTINUE
C
C  The local error is H*SUM.  A weighted maximum norm of SUM is formed
C  and then the factor of H is taken into account.
C
         IF (MAIN) THEN
            AVGY = HALF*(ABS(Y(L))+ABS(YNEW(L)))
            WT = MAX(AVGY,THRES(L))
         ELSE
            WT = WEIGHT(L)
         END IF
C
         ERR = MAX(ERR,ABS(SUM/WT))
   40 CONTINUE
      ERR = ABS(H)*ERR
C
      RETURN
      END
