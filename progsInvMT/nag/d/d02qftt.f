      SUBROUTINE D02QFT(A,FA,B,FB,REZ,AEZ,IFLAG)
C     MARK 13 RELEASE. NAG COPYRIGHT 1988.
C
C
C     PURPOSE
C     =======
C     D02QFT SEARCHES FOR A ZERO OF A FUNCTION F(X) BETWEEN
C     THE GIVEN VALUES A AND B UNTIL THE WIDTH OF THE INTERVAL
C     (A,B) HAS COLLAPSED TO WITHIN A TOLERANCE SPECIFIED BY
C     THE STOPPING CRITERION, ABS(A-B) .LE. 2.*(REZ*ABS(B)+AEZ).
C
C     DESCRIPTION
C     ===========
C     D02QFT IS A MODIFICATION OF THE CODE ZEROIN WHICH WAS BASED ON A
C     METHOD BY T.J. DEKKER AND WRITTEN BY L.F. SHAMPINE AND H.A. WATTS.
C     THE METHOD USED IS AN EFFICIENT COMBINATION OF BISECTION AND THE
C     SECANT RULE.  THIS ROUTINE WAS DESIGNED TO BE USED IN CONJUNCTION
C     WITH AN ODE SOLVER FROM DEPAC, UTILIZING THE TECHNIQUE OF REVERSE
C     COMMUNICATION.
C
C     DESCRIPTION OF ARGUMENTS
C
C     A,FA,B,FB,REZ,AEZ, AND IFLAG ARE INPUT PARAMETERS
C
C     A,B AND IFLAG ARE OUTPUT PARAMETERS
C
C     C,FC,D,FD,FM,FX,FPREV,FMIN,FMAX,FAVG,AMB,AMBS,SBMA,SF,DEZU34,
C     IC,KMC,ISING,LOCEXT,KTEST, AND KOUNT ARE VALUES NEEDED INTERNALLY
C     IN THE COMPUTATION.
C
C     * A,B     - ENDS OF THE INTERVAL (A,B).  ON INPUT, IT IS ASSUMED
C                 THAT INTEGRATION PROCEEDS IN THE DIRECTION FROM A TO
C                 B.  ON OUTPUT, B IS EXPECTED TO BE USED FOR THE
C                 COMPUTED ZERO OF F IN AN APPROPRIATE ODE ROOT SOLVING
C                 ROUTINE.  IN PARTICULAR, THE SIGN OF B-A WILL BE
C                 PRESERVED FROM INPUT TO OUTPUT.  THE CONSEQUENCE OF
C                 THIS IS THAT B MAY NOT CORRESPOND TO THE POINT HAVING
C                 THE SMALLEST RESIDUAL.
C
C     FA,FB     - VALUES OF F(A) AND F(B).  ON INPUT (IFLAG=0) BOTH F(A)
C                 AND F(B) MUST BE PROVIDED.  ON SUBSEQUENT CALLS (WHEN
C                 IFLAG = -1) F(B) MUST BE EVALUATED AND PROVIDED.
C
C     REZ,AEZ   - RELATIVE AND ABSOLUTE ERRORS USED IN THE STOPPING
C                 CRITERION.
C
C     * IFLAG   - A STATUS CODE.  USER MUST CHECK IFLAG AFTER EACH CALL.
C                 CONTROL RETURNS TO THE USER FROM D02QFT IN ALL CASES.
C
C                 0 INDICATES INITIALIZATION OF THE ROUTINE.  THE
C                   BRACKETING INTERVAL (A,B) MUST BE PROVIDED ALONG
C                   WITH THE VALUES F(A) AND F(B).  IT IS TACITLY
C                   ASSUMED THAT  F(A)*F(B) .LE. 0.  ERROR TOLERANCES
C                   REZ AND AEZ MUST BE PROVIDED.
C
C                -1 INDICATES THAT A FUNCTION EVALUATION F(B) IS NEEDED.
C                   SET FB=F(B) AND CALL THE CODE AGAIN WITHOUT CHANGING
C                   IFLAG.
C
C                 1 B IS WITHIN THE REQUESTED TOLERANCE OF A ZERO.
C                   THE INTERVAL (A,B) COLLAPSED TO THE REQUESTED
C                   TOLERANCE, THE FUNCTION CHANGES SIGN IN (A,B),
C                   AND F(X) DECREASED IN MAGNITUDE AS (A,B) COLLAPSED.
C
C                 2 F(B) = 0.  HOWEVER, THE INTERVAL (A,B) MAY NOT HAVE
C                   COLLAPSED TO THE REQUESTED TOLERANCE.
C
C                 3 NO CHANGE IN SIGN OF F(X) WAS FOUND ALTHOUGH THE
C                   INTERVAL (A,B) COLLAPSED TO THE REQUESTED TOLERANCE.
C                   BECAUSE F(X) CONTINUALLY DECREASED IN MAGNITUDE, B
C                   APPEARS TO BE NEAR TO A ZERO OF EVEN MULTIPLICITY.
C                   REDUCING THE TOLERANCE WILL HELP CLARIFY THE ISSUE.
C
C                 4 NO CHANGE IN SIGN OF F(X) WAS FOUND.  ALSO, THE
C                   INTERVAL (A,B) MAY NOT HAVE COLLAPSED TO THE
C                   REQUESTED TOLERANCE.  IT APPEARS THAT A LOCAL
C                   EXTREMAL POINT OF F(X) IS BEING ISOLATED.  THE USER
C                   MUST EXAMINE THIS CASE AND DECIDE WHETHER B IS NEAR
C                   LOCAL EXTREMA OF F(X), OR B IS NEAR A ZERO OF EVEN
C                   MULTIPLICITY.
C
C                 5 B MAY BE NEAR A SINGULAR POINT OF F(X).
C                   THE FUNCTION CHANGES SIGN IN (A,B) BUT THE INTERVAL
C                   MAY NOT HAVE COLLAPSED TO THE REQUESTED TOLERANCE.
C                   F(X) INCREASED IN MAGNITUDE AS (A,B) COLLAPSED.
C
C                 6 TOO MANY (.GT. 500) FUNCTION EVALUATIONS WERE USED.
C
C     REFERENCES
C     ==========
C               SHAMPINE L.F., WATTS H.A., *ZEROIN, A ROOT-SOLVING
C                 CODE*, SC-TM-70-631, SANDIA LABORATORIES, 1970.
C               DEKKER T.J., FINDING A ZERO BY MEANS OF SUCCESSIVE
C                 LINEAR INTERPOLATION, *CONSTRUCTIVE ASPECTS OF THE
C                 FUNDAMENTAL THEOREM OF ALGEBRA*, EDITED BY B DEJON
C                 AND P HENRICI, 1969.
C
C     DATE WRITTEN   820701   (YYMMDD)
C     REVISION DATE  840427   (YYMMDD)
C     AUTHOR  WATTS, H. A., (SNLA)
C
C
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION  A, AEZ, B, FA, FB, REZ
      INTEGER           IFLAG
C     .. Scalars in Common ..
      DOUBLE PRECISION  AMB, AMBS, C, D, DEZU34, FAVG, FC, FD, FM, FMAX,
     *                  FMIN, FPREV, FX, SBMA, SF
      INTEGER           IC, ISING, KMC, KOUNT, KTEST
      LOGICAL           LOCEXT
C     .. Local Scalars ..
      DOUBLE PRECISION  AAMB, FTEST, P, Q, TOL
      LOGICAL           ABC, SIGNC
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX, MIN, SIGN
C     .. Common blocks ..
      COMMON            /DD02QF/C, FC, D, FD, FM, FX, FPREV, FMIN, FMAX,
     *                  FAVG, AMB, AMBS, SBMA, SF, DEZU34, IC, KMC,
     *                  ISING, KOUNT, KTEST, LOCEXT
C     .. Save statement ..
      SAVE              /DD02QF/
C     .. Executable Statements ..
C
      IF (IFLAG.LT.0) GO TO 20
C
C     INITIALIZE
C
      IC = 0
      AMBS = ABS(A-B)
      SF = AMBS/MAX(ABS(A),ABS(B))
      SBMA = SIGN(1.0D0,B-A)
      ABC = .TRUE.
      C = A
      FC = FA
      KOUNT = 0
      KTEST = 0
      FX = MAX(ABS(FA),ABS(FB))
      D = B
      FD = FB
      KMC = 0
      FM = MIN(ABS(FA),ABS(FB))
      FPREV = FX
      FMIN = FM
      FMAX = FM
      FAVG = 0.D0
      ISING = 0
      LOCEXT = .FALSE.
      SIGNC = .TRUE.
      IF (SIGN(1.D0,FA).EQ.SIGN(1.D0,FB)) SIGNC = .FALSE.
      GO TO 180
C
C     SET UP TESTS FOR SINGULARITY AND LOCAL MINIMUM
C
   20 FTEST = ABS(FB)
      FAVG = FAVG + FTEST
      IF (KOUNT.LT.KTEST+5) GO TO 40
      KTEST = KOUNT
      FAVG = FAVG/5.D0
      ISING = ISING + 1
      IF (FAVG.LE.2.0D0*FMAX) ISING = 0
      IF (ISING.EQ.5) GO TO 440
      FMAX = MAX(FMAX,FAVG)
      LOCEXT = .TRUE.
      IF (FAVG.LE.0.5D0*FMIN) LOCEXT = .FALSE.
      FMIN = MIN(FMIN,FAVG)
      FAVG = 0.D0
C
C     DECIDE WHETHER NEXT STEP IS INTERPOLATION OR EXTRAPOLATION
C
   40 IF (SIGN(1.0D0,FB).EQ.SIGN(1.0D0,FA)) GO TO 60
      SIGNC = .TRUE.
      D = B
      GO TO 180
   60 IF (SIGN(1.0D0,FC).EQ.SIGN(1.0D0,FA)) GO TO 80
      A = C
      FA = FC
      SIGNC = .TRUE.
      D = B
      GO TO 180
C
C     USE DIFFERENT STRATEGY WHEN NO CHANGE IN SIGN IS FOUND
C
   80 SIGNC = .FALSE.
      IF (ABS(FB).GT.ABS(FC)) GO TO 120
      IF (SIGN(1.D0,B-A).EQ.SIGN(1.D0,B-C)) GO TO 100
      ABC = .TRUE.
      D = C
      FD = FC
      GO TO 160
  100 ABC = .FALSE.
      A = C
      FA = FC
      GO TO 160
  120 IF (SIGN(1.D0,B-A).EQ.SIGN(1.D0,B-C)) GO TO 140
      A = B
      FA = FB
      B = C
      FB = FC
      C = A
      FC = FA
      ABC = .FALSE.
      GO TO 160
  140 D = B
      FD = FB
      B = C
      FB = FC
      C = D
      FC = FD
      ABC = .TRUE.
  160 IF (ABS(AMB).LE.DEZU34*ABS(B)) GO TO 180
      KMC = KMC + 1
      IF (FTEST.LT.0.99D0*FPREV) KMC = 0
      IF (KMC.EQ.4) GO TO 420
      FPREV = FTEST
C
  180 IF (ABS(FA).GE.ABS(FB)) GO TO 200
C
C     PERFORM INTERCHANGE SO THAT F(B) IS ASSOCIATED WITH THE
C     MINIMUM VALUE.
C
      C = B
      FC = FB
      B = A
      FB = FA
      A = C
      FA = FC
      D = B
      FD = FB
C
  200 AMB = 0.5D0*(A-D)
      AAMB = ABS(AMB)
      TOL = REZ*ABS(B) + AEZ
C
C      TEST STOPPING CRITERION AND FUNCTION COUNT
C
      IF (AAMB.LE.TOL) GO TO 360
      IF (FB.EQ.0.D0) GO TO 380
      IF (KOUNT.GE.500) GO TO 460
C
C     IF NO SIGN CHANGE, BISECT APPROPRIATE SUBINTERVAL
C
      IF (SIGNC) GO TO 220
      C = B
      FC = FB
      IF (ABC .OR. B.EQ.D) GO TO 320
      B = B + 0.5D0*(D-B)
      GO TO 340
C
C     CALCULATE NEW ITERATE IMPLICITLY AS B+P/Q
C     WHERE WE ARRANGE P .GE. 0.
C     THE IMPLICIT FORM IS USED TO PREVENT OVERFLOW.
C
  220 P = (B-C)*FB
      Q = FC - FB
      IF (P.GE.0.D0) GO TO 240
      P = -P
      Q = -Q
C
C     UPDATE C AND CHECK FOR SATISFACTORY REDUCTION
C     IN THE SIZE OF THE BRACKETING INTERVAL.  IF NOT,
C     PERFORM BISECTION.
C
  240 C = B
      FC = FB
      IC = IC + 1
      IF (IC.LT.4) GO TO 260
      IF (8.D0*AAMB.GE.AMBS) GO TO 320
      IC = 0
      AMBS = AAMB
C
C     TEST FOR TOO SMALL A CHANGE
C
  260 IF (P.GT.ABS(Q)*TOL) GO TO 280
C
C     INCREMENT BY TOLERANCE
C
      B = B + SIGN(TOL,AMB)
      GO TO 340
C
C     ROOT OUGHT TO BE BETWEEN B AND (A+B)/2.
C
  280 IF (P.GE.AMB*Q) GO TO 300
C
C     USE SECANT RULE
C
      B = B + P/Q
      GO TO 340
C
C     SECANT RULE UNACCEPTABLE
C
  300 IF (1.D+3*ABS(FB).GT.ABS(FA)) GO TO 320
C
C     INCREMENT B BY A REASONABLE AMOUNT
C
      B = B + SIGN(MAX(0.01D0*AAMB,TOL),AMB)
      GO TO 340
C
C     USE BISECTION
C
  320 B = B + 0.5D0*(A-B)
C
C     HAVE COMPLETED COMPUTATION FOR NEW ITERATE B.
C     NOW RETURN TO CALLING PROGRAM FOR EVALUATION
C     OF F(B).
C
  340 IFLAG = -1
      KOUNT = KOUNT + 1
      RETURN
C
C     FINISHED. PROCESS RESULTS FOR PROPER SETTING OF IFLAG
C
  360 IF ( .NOT. SIGNC) GO TO 400
      IF (ABS(FB).GT.FX) GO TO 440
      IFLAG = 1
      IF (SIGN(1.0D0,B-A).EQ.SBMA) RETURN
      C = B
      FC = FB
      B = A
      FB = FA
      A = C
      FA = FC
      RETURN
  380 IFLAG = 2
      RETURN
  400 SF = MAX(1.D+10*MIN(2.D0*SF,1.D0),10.D0)
      IF (SF*ABS(FB).GT.FM .OR. LOCEXT) GO TO 420
      IFLAG = 3
      RETURN
  420 IFLAG = 4
      RETURN
  440 IFLAG = 5
      RETURN
  460 IFLAG = 6
      RETURN
C
C
C     END OF D02QFT (DEZERO)
C
C
      END
