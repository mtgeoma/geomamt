      SUBROUTINE D02NMH(IER,IDSTRC,N)
C     MARK 12 RELEASE. NAG COPYRIGHT 1986.
C ZD02NN
C   I1  AN INTEGER SUPPLIED ROUTINE D02NNT
C       THE I1TH ELEMENT HAS ROW/COL INDICES OUT OF RANGE
C    OR THE I1TH ROW CONTAINS A DUPLICATE ELEMENT
C     .. Scalar Arguments ..
      INTEGER           IDSTRC, IER, N
C     .. Scalars in Common ..
      DOUBLE PRECISION  RSPLIT
      INTEGER           I1, ICN, IKEEP, IPIWK, IPRWK, IRN, ISPIWK,
     *                  ISPRWK, ISPSET, LENIWK, LENRWK, LICN, LIRN,
     *                  LIWREQ, LIWUSD, LRWREQ, LRWUSD
C     .. Arrays in Common ..
      INTEGER           IDISP(10)
C     .. Local Scalars ..
      INTEGER           NEWIWK
C     .. External Subroutines ..
      EXTERNAL          D02NNQ
C     .. Intrinsic Functions ..
      INTRINSIC         MAX, NINT
C     .. Common blocks ..
      COMMON            /DD02NN/IKEEP, IPIWK, IPRWK, IRN, LIRN, ICN,
     *                  LICN, ISPRWK, ISPIWK
      COMMON            /ED02NN/LENIWK, LENRWK
      COMMON            /FD02NN/RSPLIT, LIWUSD, LIWREQ, LRWREQ, LRWUSD,
     *                  ISPSET
      COMMON            /HD02NN/IDISP
      COMMON            /ZD02NN/I1
C     .. Save statement ..
      SAVE              /DD02NN/, /HD02NN/, /ZD02NN/, /ED02NN/, /FD02NN/
C     .. Executable Statements ..
C***********************************************************************
C     ROUTINE TO PRINT ERROR MESSAGE CORRESPONDING TO THE ERROR NUMBER
C     RETURNED BY THE SPARSE MATRIX DRIVER D02NNU.
C     INPUTS :
C        IDSTRC = 0 INDICATES ERROR FROM F01BRF
C               = 1 INDICATES ERROR FROM F01BSF
C        IER THE ERROR MESSAGE NUMBER
C
C     IER = -3    ILLEGAL PATH SPECIFICATION
C     IDSTRC = 0  IE. ERROR FROM F01BRF
C     IER = -2    SUCCESSFUL DECOMPOSITION OF NUMERICALLY SINGULAR
C                 MATRIX. THIS SHOULD NOT HAPPEN SINCE WE SET ABORT(2)O
C                 TO .TRUE. . ON DETECTION OF NUMERICAL SINGULARITY
C                 F01BRF SHOULD EXIT WITH IER = 2.
C          = -1   SUCCESSFUL DECOMPOSITION OF STRUCTURALLY SINGULAR
C                 MATRIX. THIS SHOULD NOT HAPPEN SINCE WE SET ABORT(1)
C                 TO .TRUE. . ON DETECTION OF STRUCTURAL SINGULARITY
C                 F01BRF SHOULD EXIT WITH IER = 1.
C          =  0   NO ERRORS HAVE BEEN DETECTED. THIS ROUTINE SHOULD NOT
C                 BE ENTERED WITH THIS VALUE , HENCE THIS IS CONSIDERED
C                 FATAL.
C          =  1   THE MATRIX IS STRUCTURALLY SINGULAR AND THE DECOMPOSI-
C                 TION HAS BEEN ABANDONED.
C          =  2   THE MATRIX IS NUMERICALLY SINGULAR AND THE DECOMPOSIT-
C                 ION HAS BEEN ABANDONED.
C          =  3   LIRN IS TO SMALL: THERE IS NOT ENOUGH SPACE TO
C                 CONTINUE THE DECOMPOSITION. THE USER IS RECOMMENDED TO
C                 TRY AGAIN WITH LIRN = IDISP(6)+N/2+1, IE. WE ADVISE
C                 THE USER TO EXTEND THE INTEGER WORKSPACE AND MAYBE THE
C                 REAL WORKSPACE AS A RESULT.
C          =  4   LICN IS MUCH TOO SMALL USER MUST EXTEND INTEGER AND/OR
C                 REAL SPACE(S).
C          =  5   LICN IS TOO SMALL; USER MUST EXTEND THE INTEGER AND/OR
C                 REAL SPACE(S).
C ( THE SIZE OF LICN MAY BE GOVERNED BY THE FACT THE USER SUPPLIED TOO
C   LITTLE REAL WORKSPACE , HENCE FOR THE ABOVE TWO ERROR RETURNS THE
C   USER MAY HAVE TO EXTEND BOTH WORKSPACES )
C          =  6   LICN AND LIRN ARE BOTH TOO SMALL.
C          =  7   LICN IS TOO SMALL: THERE IS NOT ENOUGH SPACE TO PERMUT
C                 PERMUTE TO BLOCK TRIANGULAR FORM. THE USER MUST SUPPLY
C                 MORE INTEGER AND/OR REAL SPACE(S).
C          =  8   ON ENTRY , N .LE. 0 .
C          =  9   ON ENTRY , NNZ .LE. 0.
C          = 10   ON ENTRY , LICN .LT. NNZ.
C          = 11   ON ENTRY , LIRN .LT. NNZ.
C          = 12   ON ENTRY , AN ELEMENT OF THE INPUT MATRIX HAS A ROW
C                 OR COLUMN INDEX OUTSIDE THE RANGE 1 TO N.
C          = 13   ON ENTRY , DUPLICATE ELEMENTS HAVE BEEN FOUND IN THE
C                 INPUT MATRIX.
C ( THE ABOVE SIX ERROR RETURNS ARE CHECKED FOR IN THE ROUTINE D02NNT.
C   THIS IS SO AS TO ENABLE US TO SUPPRESS NAG ERROR DIAGNOSTICS BUT TO
C   SUPPLY THE SAME INFORMATION IN OUR OWN FORMAT )
C
C   IDSTRC =  1   IE. ERROR RETURN FROM F01BSF
C      IER =  0   SAME AS FOR IDSTRC = 0
C          =  1   SAME AS FOR IDSTRC = 0 , IER = 8
C          =  2   SAME AS FOR IDSTRC = 0 , IER = 9
C          =  3   SAME AS FOR IDSTRC = 0 , IER = 10
C          =  4   SAME AS FOR IDSTRC = 0 , IER = 12
C          =  5   THE INPUT MATRIX IS INCOMPATIBLE WITH THE MATRIX
C                 DECOMPOSED BY THE PREVIOUS CALL TO F01BRF.
C          =  6   THE INPUT MATRIX IS NUMERICALLY SINGULAR.
C          =  7   A VERY SMALL PIVOT HAS BEEN DETECTED
C                 THE DECOMPOSITION HAS BEEN COMPLETED BUT IS
C                 POTENTIALLY UNSTABLE.
C          =  8   SAME AS FOR IDSTRC = 0 , IER = 13
C
C
C***********************************************************************
      IF (IER.EQ.-3) THEN
         CALL D02NNQ(' ILLEGAL PATH SPECIFICATION ON ENTRY',1,0,0,0,0,
     *               0.0D0,0.0D0)
         GO TO 200
      END IF
      IF (IDSTRC.EQ.1) GO TO 20
      IER = IER + 3
      GO TO (40,40,40,60,80,100,120,120,120,
     *       120,40,40,40,40,140,160) IER
   20 IER = IER + 1
      GO TO (40,40,40,40,140,40,80,180,160) IER
   40 CALL D02NNQ(
     *' ERROR DETECTED BUT THE ERROR MESSAGE PARAMETER           HAD AN
     *ILLEGAL VALUE - THE FORM OF THE ERROR IS NOT KNOWN',1,0,0,0,0,
     *            0.0D0,0.0D0)
      GO TO 200
   60 CALL D02NNQ(
     *' THE JACOBIAN MATRIX WAS FOUND TO BE STRUCTURALLY         SINGULA
     *R',2,0,0,0,0,0.0D0,0.0D0)
      GO TO 220
   80 CALL D02NNQ(
     *' THE JACOBIAN MATRIX WAS FOUND TO BE NUMERICALLY          SINGULA
     *R',2,0,0,0,0,0.0D0,0.0D0)
      GO TO 220
  100 NEWIWK = NINT(1.0D0/(1.0D0-RSPLIT)*(IDISP(6)+N/2+1))
      LIWREQ = LENIWK - ISPIWK + NEWIWK
      LRWREQ = N + NINT(RSPLIT*NEWIWK)
      CALL D02NNQ(
     *' THE ROUTINE F01BRF DID NOT HAVE ENOUGH STORAGE            - USEF
     *UL INFORMATION SUPPLIED BY CALLING ROUTINE D02NYF',1,0,0,0,0,
     *            0.0D0,0.0D0)
      GO TO 200
  120 LIWREQ = MAX(NINT(1.1D0*ISPIWK),NINT(1.5D0*(IDISP(6)+IDISP(7))))
      LIWREQ = LIWREQ + LENIWK - ISPIWK
      LRWREQ = N + MAX(NINT(1.1D0*LICN),NINT(1.5D0*IDISP(7)))
      CALL D02NNQ(
     *' THE ROUTINE F01BRF DID NOT HAVE ENOUGH STORAGE       - INFORMATI
     *ON SUPPLIED BY A CALL TO ROUTINE D02NYF NOT USEFUL',1,0,0,0,0,
     *            0.0D0,0.0D0)
      GO TO 200
  140 CALL D02NNQ(
     *' THE F01BRF/F01BSF FOUND THE (=I1)TH ELEMENT OF      THE JACOBIAN
     * WITH A ROW/COL INDEX OUTSIDE SPECIFIED RANGE OF           1 TO N'
     *            ,1,1,I1,0,0,0.0D0,0.0D0)
      GO TO 200
  160 CALL D02NNQ(
     *' THE ROUTINE FO1BRF/F01BSF FOUND DUPLICATE ELEMENT    IN THE  (=I
     *1)TH ROW OF THE JACOBIAN MATRIX - RUN ABANDONED',1,0,0,0,0,0.0D0,
     *            0.0D0)
      GO TO 200
  180 CALL D02NNQ(
     *' THE ROUTINE F01BSF HAS DETECTED A VERY SMALL             PIVOT -
     *ASSUMING SINGULARITY',2,0,0,0,0,0.0D0,0.0D0)
      GO TO 220
  200 CONTINUE
      IER = -2
      RETURN
  220 CONTINUE
      IER = -1
      RETURN
      END
