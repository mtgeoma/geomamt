      SUBROUTINE D03EAF(STAGE1,EXT,DORM,N,P,Q,X,Y,N1P1,PHI,PHID,ALPHA,C,
     *                  IC,NP4,ICINT,NP1,IFAIL)
C     MARK 7 RELEASE. NAG COPYRIGHT 1978.
C     MARK 7G REVISED. IER-218 (FEB 1980)
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C     MARK 13 REVISED. USE OF MARK 12 X02 FUNCTIONS (APR 1988).
C
C     THIS SUBROUTINE SOLVES DIRICHLET, NEUMANN AND MIXED BOUNDARY
C     VALUE PROBLEMS FOR LAPLACES EQUATION IN TWO DIMENSIONS, BY AN
C     INTEGRAL EQUATION METHOD BASED UPON GREENS FORMULA. IT IS
C     APPLICABLE TO ANY DOMAIN BOUNDED, INTERNALLY AND/OR
C     EXTERNALLY, BY CLOSED CONTOURS.
C
C
C     THE NEXT TWO VARIABLES ARE MACHINE-DEPENDENT CONSTANTS. THE
C     FIRST CONTAINS THE VALUE OF PI AND THE SECOND THE VALUE OF EPS
C     WHICH IS THE SMALLEST NUMBER FOR WHICH 1.0 + EPS .GT. 1.0
C     WITHIN THE MACHINE.
C
C     .. Parameters ..
      CHARACTER*6       SRNAME
      PARAMETER         (SRNAME='D03EAF')
C     .. Scalar Arguments ..
      DOUBLE PRECISION  ALPHA, P, Q
      INTEGER           IC, IFAIL, N, N1P1, NP1, NP4
      LOGICAL           DORM, EXT, STAGE1
C     .. Array Arguments ..
      DOUBLE PRECISION  C(IC,NP4), PHI(N), PHID(N), X(N1P1), Y(N1P1)
      INTEGER           ICINT(NP1)
C     .. Local Scalars ..
      DOUBLE PRECISION  A, AIN, ANGLE, B, CTHETA, EPS, H, OMEGA, PI,
     *                  PSI, S, SLOPE, SUM, T, TWOPI, U, U1, V, V1, X1,
     *                  X2, Y1, Y2
      INTEGER           I, I1, ISAVE, J, JPLUSI, K, L, M, NP2, NP3
      LOGICAL           FIRST
C     .. Local Arrays ..
      CHARACTER*1       P01REC(1)
C     .. External Functions ..
      DOUBLE PRECISION  X01AAF, X02AJF
      INTEGER           P01ABF
      EXTERNAL          X01AAF, X02AJF, P01ABF
C     .. External Subroutines ..
      EXTERNAL          F01BKF, F04AUF
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX, LOG, ATAN, DBLE, SQRT
C     .. Executable Statements ..
      PI = X01AAF(PI)
      EPS = X02AJF()
      TWOPI = PI + PI
      M = N
      NP2 = NP1 + 1
      NP3 = NP2 + 1
      IF ((EXT .AND. DORM) .OR. ( .NOT. EXT .AND. .NOT. DORM)) M = N + 1
      I = 0
      IF (EXT .AND. DORM) I = 1
      IF ( .NOT. STAGE1) GO TO 540
C
C     EVALUATE PHI OR ITS NORMAL DERIVATIVE IN EACH INTERVAL.
C
      K = 1
      I = 1
C
C     OMEGA IS THE INTERIOR ANGLE AT THE NODE AS REQUIRED FOR GREENS
C     FORMULA. THE SUM OF PSI WILL CONTAIN EITHER OMEGA OR OMEGA -
C     2*PI, (WHEN SUM OF PSI IS NEGATIVE). THIS SUM IS FORMED IN
C     OMEGA, AND THEN 2*PI IS ADDED IF OMEGA IS NEGATIVE. THE SET OF
C     LINEAR EQUATIONS TO FIND THE COMPLEMENTARY VALUES ARE NOW
C     FORMED.
C
   20 SUM = 0.0D0
      J = 0
      IF (X(K).EQ.X(K+1) .AND. Y(K).EQ.Y(K+1)) K = K + 2
      S = X(K+1)
      T = Y(K+1)
      OMEGA = 0.0D0
      L = 1
   40 GO TO 600
   60 OMEGA = OMEGA + PSI
      IF (PHID(L).NE.0.0D0) GO TO 80
      C(I,L) = AIN
      SUM = SUM - PSI*PHI(L)
      GO TO 100
   80 C(I,L) = PSI
      SUM = SUM - AIN*PHI(L)
  100 L = L + 1
      IF (L.LE.N) GO TO 40
      IF (OMEGA.LT.0.0D0) OMEGA = OMEGA + TWOPI
      IF (PHID(I).EQ.0.0D0) GO TO 120
      C(I,NP2) = SUM
      C(I,I) = C(I,I) - OMEGA
      GO TO 140
  120 C(I,NP2) = SUM + OMEGA*PHI(I)
  140 IF ( .NOT. EXT .OR. DORM) GO TO 160
      C(I,NP2) = C(I,NP2) - TWOPI*ALPHA
      GO TO 180
  160 IF (EXT .AND. DORM) C(I,M) = TWOPI
  180 K = K + 2
      I = I + 1
      IF (I.LE.N) GO TO 20
      IF ( .NOT. ((EXT .AND. DORM) .OR. ( .NOT. EXT .AND. .NOT. DORM)))
     *    GO TO 340
C
C     IF THE PROBLEM IS AN INTERIOR NEUMANN PROBLEM, AN EXTRA
C     EQUATION IS ADDED TO MAKE THE INTEGRAL OF PHI AROUND THE OUTER
C     BOUNDARY EQUAL TO ALPHA (AS PRESCRIBED ON ENTRY). IF THE
C     PROBLEM IS AN EXTERIOR DIRICHLET OR MIXED BOUNDARY VALUE
C     PROBLEM, AN EXTRA EQUATION IS ADDED TO COMPUTE THE VALUE OF C
C     SUCH THAT THE SOLUTION TENDS TO C AT INFINITY. THIS CONSTANT C
C     IS STORED IN THE VARIABLE ALPHA ON EXIT.
C
      SUM = 0.0D0
      J = 1
      DO 300 I = 1, N
         IF (X(J+1).NE.X(J) .OR. Y(J+1).NE.Y(J)) GO TO 240
         IF ( .NOT. DORM) GO TO 200
         J = J + 2
         GO TO 240
  200    DO 220 J = I, N
            C(M,J) = 0.0D0
  220    CONTINUE
         GO TO 320
  240    U = X(J+2) - X(J+1)
         V = Y(J+2) - Y(J+1)
         S = SQRT(U*U+V*V)
         U = X(J+1) - X(J)
         V = Y(J+1) - Y(J)
         T = S + SQRT(U*U+V*V)
         IF (PHID(I).NE.0.0D0 .AND. DORM) GO TO 260
         C(M,I) = T
         GO TO 280
  260    C(M,I) = 0.0D0
         SUM = SUM - T*PHI(I)
  280    J = J + 2
  300 CONTINUE
      IF ( .NOT. DORM) GO TO 320
      C(M,M) = 0.0D0
      C(M,NP2) = SUM
      GO TO 340
  320 C(M,NP2) = ALPHA
C
C     END EXTRA EQUATION.
C
  340 I = N
      IF (EXT .AND. DORM) I = M
      T = 0.0D0
      DO 380 J = 1, I
         DO 360 K = 1, M
            T = MAX(T,ABS(C(K,J)))
  360    CONTINUE
  380 CONTINUE
      T = T*EPS*DBLE(M)
      ISAVE = IFAIL
      IFAIL = 1
      CALL F01BKF(M,I,T,C,IC,C(1,NP3),C(1,NP4),ICINT,J,IFAIL)
      IF (IFAIL.EQ.0) GO TO 400
      IFAIL = 1
      ICINT(1) = J
      IFAIL = P01ABF(ISAVE,IFAIL,SRNAME,0,P01REC)
      RETURN
  400 IF (J.EQ.I) GO TO 420
      IFAIL = 2
      ICINT(1) = J
      IFAIL = P01ABF(ISAVE,IFAIL,SRNAME,0,P01REC)
      RETURN
  420 IFAIL = 0
      CALL F04AUF(M,I,C,IC,1,C(1,NP3),ICINT,J,C(1,NP2),IC,C(1,NP2)
     *            ,IC,C,IC,C(1,NP3),IFAIL)
C
C     IF THE DOMAIN IS AN EXTERIOR ONE, ASSIGN THE VALUE OF THE
C     CONSTANT C TO ALPHA. OTHERWISE SET ALPHA TO ZERO.
C
      IF ( .NOT. EXT) GO TO 460
      IF ( .NOT. DORM) GO TO 440
      ALPHA = C(M,NP2)
  440 GO TO 480
  460 ALPHA = 0.0D0
C
C     NOW PUT THE VALUES OF PHI AND ITS DERIVATIVE INTO THE ARRAYS
C     PHI AND PHID RESPECTIVELY.
C
  480 DO 520 I = 1, N
         IF (PHID(I).NE.0.0D0) GO TO 500
         PHID(I) = C(I,NP2)
         GO TO 520
  500    PHID(I) = PHI(I)
         PHI(I) = C(I,NP2)
  520 CONTINUE
C
C     END BOUNDARY VALUES.
C
      IFAIL = 0
      RETURN
  540 S = P
      T = Q
C
C     PHI AND ITS NORMAL DERIVATIVE ARE KNOWN ON THE BOUNDARY. NOW
C     CALCULATE THE VALUE OF PHI AT (S,T).
C
      J = 0
      SUM = 0.0D0
      OMEGA = 0.0D0
      I = 1
  560 GO TO 600
  580 SUM = SUM + PSI*PHI(I) + AIN*PHID(I)
      OMEGA = OMEGA + PSI
      I = I + 1
      IF (I.LE.N) GO TO 560
      IF (OMEGA.LT.DBLE(N1P1)*EPS) OMEGA = OMEGA + TWOPI
      ALPHA = (TWOPI*ALPHA+SUM)/ABS(OMEGA)
      IFAIL = 0
      RETURN
C
C     THIS SECTION EVALUATES THE INTEGRALS
C
C     (1)   PSI = -INTEGRAL(NORMAL DERIVATIVE AT Q OF
C                  LOG(ABS(Q-P)) )DQ
C     (2)   AIN = INTEGRAL ( LOG(ABS(Q-P)) )DQ
C
C     ALONG THE TWO STRAIGHT LINES JOINING (X(J),Y(J)),
C     (X(J+1),Y(J+1)) AND (X(J+2),Y(J+2)) IN ORDER, BY ANALYTIC
C     FORMULAE GIVEN IN NPL REPORT NAC 44. THE VARIABLE J IS UPDATED
C     BY THIS SECTION OF THE SUBROUTINE SO THAT THE ITH ENTRY GIVES
C     THE INTEGRALS PERTAINING TO THE ITH INTERVAL OF THE BOUNDARY.
C
C     THIS SECTION OF THE SUBROUTINE ACTS IN THE MANNER OF A
C     DEPENDENT SUBROUTINE WITH THE FOLLOWING PARAMETERS FROM THE
C     MAIN SUBROUTINE.
C
C     S,T     COORDINATES OF THE POINT P IN EQUATIONS (1) AND (2)
C     J       THIS MUST EQUAL ZERO FOR THE FIRST BOUNDARY
C             INTERVAL AND THEREAFTER IS UPDATED BY THIS SECTION,
C             SO THAT ON SUBSEQUENT ENTRIES THE INTEGRALS ARE
C             EVALUATED FOR CONSECUTIVE INTERVALS.
C     PSI,AIN THE RESULTS OF THE ANALYTIC INTEGRATIONS.
C     SLOPE   THE SLOPE OF THE VECTOR R AS USED THROUGHOUT THIS
C             SECTION IS THE ANGLE BETWEEN R AND THE POSITIVE
C             DIRECTION OF THE X-AXIS. THIS ANGLE TAKES THE DIRECTION
C             OF R INTO ACCOUNT, AND IS MEASURED ANTI-CLOCKWISE SO
C             0 .LT. SLOPE .LT. 2*PI. ON ENTRY SLOPE IS THE SLOPE
C             OF THE VECTOR FROM (S,T) TO THE BOUNDARY POINT
C             COMMON TO BOTH THE ITH INTERVAL AND THE (I-1)TH
C             INTERVAL. ON EXIT SLOPE CONTAINS THE VALUE TO BE USED
C             IN THE NEXT ENTRY TO THIS SECTION. THE FIRST INTERVAL
C             OF ANY CONTOUR IS RECOGNISED BY THIS SECTION AND THE
C             INITIAL VALUE OF SLOPE IS CALCULATED.
C     PI      THE VALUE OF PI.
C     TWOPI   THE VALUE OF 2*PI.
C     EPS     THE VARIABLE AS DEFINED IN THE MAIN PART OF THE
C             SUBROUTINE.
C     X,Y     THE ARRAYS AS DEFINED FOR THE MAIN PART OF THE
C             SUBROUTINE.
C
  600 FIRST = .TRUE.
      X2 = 0.0D0
      Y2 = 0.0D0
      PSI = 0.0D0
      AIN = 0.0D0
      IF (J.EQ.0) GO TO 640
      IF (X(J).NE.X(J+1) .OR. Y(J).NE.Y(J+1)) GO TO 620
      J = J + 1
      GO TO 640
  620 FIRST = .FALSE.
      X2 = X(J)
      Y2 = Y(J)
  640 DO 960 I1 = 1, 2
C
C        CALCULATE SLOPE FROM (S,T) TO (X2,Y2). IF FIRST THEN USE THIS
C        VALUE AS SLOPE AND RETURN TO START.
C
  660    JPLUSI = J + I1
         X1 = X2
         Y1 = Y2
         X2 = X(JPLUSI)
         Y2 = Y(JPLUSI)
         A = X2 - S
         B = Y2 - T
         IF (ABS(B).GE.EPS) GO TO 700
         IF (X2.LE.S) GO TO 680
         U1 = 0.0D0
         GO TO 800
  680    U1 = PI
         GO TO 800
  700    IF (ABS(A).GE.EPS) GO TO 740
         IF (Y2.LE.T) GO TO 720
         U1 = 0.5D0*PI
         GO TO 800
  720    U1 = 1.5D0*PI
         GO TO 800
  740    H = ATAN(B/A)
         IF (A.GE.0.0D0) GO TO 760
         U1 = PI + H
         GO TO 800
  760    IF (H.GE.0.0D0) GO TO 780
         U1 = TWOPI + H
         GO TO 800
  780    U1 = H
  800    IF ( .NOT. FIRST) GO TO 820
         SLOPE = U1
         J = J + 1
         FIRST = .FALSE.
         GO TO 660
C
C        THE ANGLE FROM (S,T) TO (X1,Y1) IS IN SLOPE AND FROM (S,T) TO
C        (X2,Y2) IS IN U1. NOW CALCULATE THE INTEGRALS.
C
  820    A = SQRT((X1-S)*(X1-S)+(Y1-T)*(Y1-T))
         B = SQRT((X2-S)*(X2-S)+(Y2-T)*(Y2-T))
         H = SQRT((X1-X2)*(X1-X2)+(Y1-Y2)*(Y1-Y2))
         ANGLE = 0.0D0
         IF (H.GE.EPS) GO TO 840
         V1 = 0.0D0
         GO TO 940
  840    IF (A.GE.EPS .AND. B.GE.EPS) GO TO 860
         V1 = H*(LOG(H)-1.0D0)
         GO TO 940
  860    CTHETA = (A*A+H*H-B*B)/(2.0D0*A*H)
         IF (CTHETA.GT.1.0D0) CTHETA = 1.0D0
         IF (CTHETA.LT.-1.0D0) CTHETA = -1.0D0
         ANGLE = U1 - SLOPE
         IF (ABS(ANGLE).LE.PI) GO TO 920
         IF (ANGLE.GE.0.0D0) GO TO 880
         ANGLE = ANGLE + TWOPI
         GO TO 920
  880    IF (ANGLE.GT.0.0D0) GO TO 900
         GO TO 920
  900    ANGLE = ANGLE - TWOPI
  920    IF (ABS(ANGLE).GT.PI-100.0D0*EPS) ANGLE = 0.0D0
         V1 = A*CTHETA*LOG(A/B) + H*(LOG(B)-1.0D0) + A*ABS(ANGLE)
     *        *SQRT(1.0D0-CTHETA*CTHETA)
  940    PSI = PSI + ANGLE
         AIN = AIN + V1
         SLOPE = U1
  960 CONTINUE
      J = J + 2
      IF (STAGE1) GO TO 60
      GO TO 580
      END
