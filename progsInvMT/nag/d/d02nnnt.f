      SUBROUTINE D02NNN(X,N,IMSG)
C     MARK 14 RE-ISSUE. NAG COPYRIGHT 1989.
C
C     HANDLES ALL PRINTING REQUIRED BY ITRACE .GT. 0
C
C     QUANTITIES EITHER PASSED AS VECTOR ARGUMENT OR BY COMMON
C
C     .. Scalar Arguments ..
      INTEGER           IMSG, N
C     .. Array Arguments ..
      DOUBLE PRECISION  X(N)
C     .. Scalars in Common ..
      DOUBLE PRECISION  BDCON, BDEL, BEL1H, CRATE, DCON, DEL, EL1H, HU,
     *                  RDM11, RDM12, RDM3, RDM9(3), TN
      INTEGER           IC, ICOL, ICOUNT, IDACNT, IDM13, IDM2, IDM4,
     *                  IDM7, IDM8, IDM9, IMXER, IROW, J, JCOUNT, NNZ,
     *                  NQU
      LOGICAL           LDM1
C     .. Arrays in Common ..
      DOUBLE PRECISION  RDM1(2), RDM10(6), RDM13(34), RDM14(6), RDM2(7),
     *                  RDM4(4), RDM5(9), RDM6(2), RDM7(5), RDM8(2)
      INTEGER           IDM1(9), IDM10(4), IDM11(17), IDM12(28),
     *                  IDM14(2), IDM3(5), IDM5(4), IDM6(6)
      LOGICAL           LDM2(2)
C     .. Local Scalars ..
      INTEGER           I, IDEV, K, MB, MLEFT, MPRS
      CHARACTER*80      REC
C     .. External Subroutines ..
      EXTERNAL          X04ABF, X04BAF
C     .. Common blocks ..
      COMMON            /BD02NM/RDM3, IDM2, NQU, IDM3, IDM4
      COMMON            /BD02NN/RDM14, IDM12, NNZ, IDM13
      COMMON            /DD02NM/RDM1, TN, HU, RDM2, IDM1
      COMMON            /GD02NM/RDM8, CRATE, IDM9
      COMMON            /LD02NM/RDM4, RDM5, IDM5, IMXER, IDM6, IDM14,
     *                  LDM2, LDM1
      COMMON            /ND02NM/IROW, ICOL
      COMMON            /VD02NN/IC, IDACNT
      COMMON            /XD02NN/RDM6, RDM7, IDM7, ICOUNT, JCOUNT, IDM8
      COMMON            /YD02NM/RDM10, BDEL, RDM11, BEL1H, RDM12, BDCON,
     *                  RDM13, IDM11
      COMMON            /YD02NN/DCON, DEL, RDM9, EL1H, IDM10, J
C     .. Save statement ..
      SAVE              /DD02NM/, /BD02NM/, /LD02NM/, /XD02NN/,
     *                  /GD02NM/, /YD02NN/, /VD02NN/, /ND02NM/,
     *                  /YD02NM/, /BD02NN/
C     .. Executable Statements ..
      CALL X04ABF(0,IDEV)
C
      GO TO (20,40,60,80,100,120,140,160,180,
     *       200,220,240,260,280,300,560,320,340,
     *       360,380,400,420,440,460,480,500,520,
     *       540,600) IMSG
C
   20 CONTINUE
      WRITE (REC,FMT=99999) X(1)
      CALL X04BAF(IDEV,REC)
      GO TO 640
   40 CONTINUE
      WRITE (REC,FMT=99998) TN, HU, NQU, IMXER
      CALL X04BAF(IDEV,REC)
      GO TO 640
   60 CONTINUE
      WRITE (REC,FMT=99997) TN
      CALL X04BAF(IDEV,REC)
      GO TO 640
   80 CONTINUE
      WRITE (REC,FMT=99996)
      CALL X04BAF(IDEV,REC)
      GO TO 640
  100 CONTINUE
      WRITE (REC,FMT=99995) X(1)
      CALL X04BAF(IDEV,REC)
      WRITE (REC,FMT=99994) ICOUNT, JCOUNT
      CALL X04BAF(IDEV,REC)
      GO TO 640
  120 CONTINUE
      GO TO 640
  140 CONTINUE
      WRITE (REC,FMT=99993)
      CALL X04BAF(IDEV,REC)
      GO TO 640
  160 CONTINUE
      WRITE (REC,FMT=99992)
      CALL X04BAF(IDEV,REC)
      GO TO 600
  180 CONTINUE
      WRITE (REC,FMT=99990) DCON, CRATE
      CALL X04BAF(IDEV,REC)
      WRITE (REC,FMT=99989) EL1H, DEL
      CALL X04BAF(IDEV,REC)
      GO TO 640
  200 CONTINUE
      WRITE (REC,FMT=99988)
      CALL X04BAF(IDEV,REC)
      GO TO 600
  220 CONTINUE
      WRITE (REC,FMT=99987) IC, IDACNT
      CALL X04BAF(IDEV,REC)
      WRITE (REC,FMT=99986)
      CALL X04BAF(IDEV,REC)
      GO TO 640
  240 CONTINUE
      WRITE (REC,FMT=99985)
      CALL X04BAF(IDEV,REC)
      GO TO 600
  260 CONTINUE
      WRITE (REC,FMT=99984)
      CALL X04BAF(IDEV,REC)
      GO TO 600
  280 CONTINUE
      WRITE (REC,FMT=99983)
      CALL X04BAF(IDEV,REC)
      WRITE (REC,FMT=99982)
      CALL X04BAF(IDEV,REC)
      WRITE (REC,FMT=99981)
      CALL X04BAF(IDEV,REC)
      WRITE (REC,FMT=99980)
      CALL X04BAF(IDEV,REC)
      GO TO 600
  300 CONTINUE
      WRITE (REC,FMT=99979) X(1)
      CALL X04BAF(IDEV,REC)
      GO TO 640
  320 CONTINUE
      WRITE (REC,FMT=99977) BDCON, CRATE, BEL1H, BDEL
      CALL X04BAF(IDEV,REC)
      GO TO 640
  340 CONTINUE
      WRITE (REC,FMT=99976)
      CALL X04BAF(IDEV,REC)
      GO TO 640
  360 CONTINUE
      WRITE (REC,FMT=99975)
      CALL X04BAF(IDEV,REC)
      GO TO 640
  380 CONTINUE
      WRITE (REC,FMT=99974)
      CALL X04BAF(IDEV,REC)
      GO TO 640
  400 CONTINUE
      WRITE (REC,FMT=99973)
      CALL X04BAF(IDEV,REC)
      GO TO 640
  420 CONTINUE
      WRITE (REC,FMT=99972) IROW, ICOL, X(1)
      CALL X04BAF(IDEV,REC)
      GO TO 640
  440 CONTINUE
      WRITE (REC,FMT=99971) IROW, ICOL
      CALL X04BAF(IDEV,REC)
      GO TO 640
  460 CONTINUE
      WRITE (REC,FMT=99970) NNZ
      CALL X04BAF(IDEV,REC)
      GO TO 640
  480 CONTINUE
      WRITE (REC,FMT=99969) IROW, ICOL, X(1)
      CALL X04BAF(IDEV,REC)
      GO TO 640
  500 CONTINUE
      WRITE (REC,FMT=99968) X(1)
      CALL X04BAF(IDEV,REC)
      GO TO 640
  520 CONTINUE
      WRITE (REC,FMT=99967) J
      CALL X04BAF(IDEV,REC)
      GO TO 600
  540 CONTINUE
      WRITE (REC,FMT=99966)
      CALL X04BAF(IDEV,REC)
      GO TO 640
C
  560 CONTINUE
      MPRS = N/5
      MB = 0
      MLEFT = N - 5*MPRS
      DO 580 I = 1, MPRS
         WRITE (REC,FMT=99978) (X(MB+K),K=1,5)
         CALL X04BAF(IDEV,REC)
         MB = MB + 5
  580 CONTINUE
      IF (MLEFT.NE.0) THEN
         WRITE (REC,FMT=99978) (X(MB+K),K=1,MLEFT)
         CALL X04BAF(IDEV,REC)
      END IF
      GO TO 640
C
  600 CONTINUE
      MPRS = N/5
      MB = 0
      MLEFT = N - 5*MPRS
      DO 620 I = 1, MPRS
         WRITE (REC,FMT=99991) (X(MB+K),K=1,5)
         CALL X04BAF(IDEV,REC)
         MB = MB + 5
  620 CONTINUE
      IF (MLEFT.NE.0) THEN
         WRITE (REC,FMT=99991) (X(MB+K),K=1,MLEFT)
         CALL X04BAF(IDEV,REC)
      END IF
C
  640 CONTINUE
      RETURN
C
99999 FORMAT (' INITIAL STEP SIZE IS ',D12.4)
99998 FORMAT (' TIME=',D11.3,' STEP H=',D11.3,' ORDER K=',I5,' MAX. ER',
     *       'R. COMP=',I6)
99997 FORMAT (' RESTART IN PROGRESS AT TIME ',D11.3)
99996 FORMAT (' CHECKING THE ODE/DAE SPLIT')
99995 FORMAT (' ODE/DAE SPLIT - AT TIME=',D12.4)
99994 FORMAT ('   THE NO. OF DIFFERENTIAL EQUATIONS HAS CHANGED FROM ',
     *       I7,' TO ',I7)
99993 FORMAT (' JACOBIAN  EVALUATION')
99992 FORMAT (' INCREMENTS ARE ')
99991 FORMAT (2X,5D11.3)
99990 FORMAT (' SCALED TEST =',D11.3,' CONVERGENCE   RATE      =',D11.3)
99989 FORMAT (' GAMMA * H   =',D11.3,' NORM OF LAST INCREMENTS =',D11.3)
99988 FORMAT (' INITIAL VALUES OF RESIDUAL WITH ZERO YDOT ARE:')
99987 FORMAT (2X,I6,' DIFFERENTIAL EQUATION(S) AND',I6,' ALGEBRAIC EQU',
     *       'ATION(S)')
99986 FORMAT ('         HAVE BEEN DETECTED')
99985 FORMAT (' INITIAL Y VALUES AFTER YDOT CALCULATED ARE')
99984 FORMAT (' CALCULATED VALUES OF YDOT ARE ')
99983 FORMAT (' SUPPLIED INITIAL VALUES DID NOT SATISFY THE ')
99982 FORMAT (' ALGEBRAIC EQUATIONS PERHAPS RESULTING IN THE CALCULATED'
     *       )
99981 FORMAT (' VALUES FOR SOME YDOT BEING TO LARGE. D02NNY TRIED TO ')
99980 FORMAT (' FILTER OUT THESE VALUES. NEW YDOT VALUES ARE: ')
99979 FORMAT (' SCALED LOCAL ERROR ESTIMATE =',D12.4)
99978 FORMAT (' SAVR=',5D11.3)
99977 FORMAT (' DCON=',D11.3,' CRTE=',D11.3,' EL0H=',D11.3,' DEL=',
     *       D11.3)
99976 FORMAT (' DUMP OF BANDED ANALYTIC JACOBIAN MATRIX (SCALED BY THE',
     *       ' SYSTEM)')
99975 FORMAT (' DUMP OF BANDED JACOBIAN (SCALED BY THE SYSTEM)')
99974 FORMAT (' DUMP OF FULL ANALYTIC JACOBIAN MATRIX (SCALED BY THE S',
     *       'YSTEM)')
99973 FORMAT (' DUMP OF FULL JACOBIAN (SCALED BY THE SYSTEM)')
99972 FORMAT (' ROW',I4,'  COL',I4,' OF JAC. IS',D11.3)
99971 FORMAT (' ROW',I8,' COL',I8,' IS FULL')
99970 FORMAT (' NUMBER OF ELEMENTS IN JACOBIAN IS',I8)
99969 FORMAT (' DF',I4,'/DY',I4,' IS',D11.3)
99968 FORMAT (' DAMPING FACTOR REDUCED TO ',D11.4)
99967 FORMAT (' ITER. ',I3,' CALCULATED SOLUTION IS ')
99966 FORMAT (' CONVERGENCE FAILURE OCCURED ')
      END
