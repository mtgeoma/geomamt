      SUBROUTINE S17DEW(ZR,FNU,IKFLG,IPMTR,TOL,INIT,PHI,ZETA1,ZETA2,SUM,
     *                  CWRK,ELIM)
C     MARK 13 RELEASE. NAG COPYRIGHT 1988.
C     MARK 14 REVISED. IER-766 (DEC 1989).
C
C     Original name: CUNIK
C
C        S17DEW COMPUTES PARAMETERS FOR THE UNIFORM ASYMPTOTIC
C        EXPANSIONS OF THE I AND K FUNCTIONS ON IKFLG= 1 OR 2
C        RESPECTIVELY BY
C
C        W(FNU,ZR) = PHI*EXP(ZETA)*SUM
C
C        WHERE       ZETA=-ZETA1 + ZETA2       OR
C                          ZETA1 - ZETA2
C
C        THE FIRST CALL MUST HAVE INIT=0. SUBSEQUENT CALLS WITH THE
C        SAME ZR AND FNU WILL RETURN THE I OR K FUNCTION ON IKFLG=
C        1 OR 2 WITH NO CHANGE IN INIT. CWRK IS A COMPLEX WORK
C        ARRAY. IPMTR=0 COMPUTES ALL PARAMETERS. IPMTR=1 COMPUTES PHI,
C        ZETA1,ZETA2.
C
C     .. Scalar Arguments ..
      COMPLEX*16        PHI, SUM, ZETA1, ZETA2, ZR
      DOUBLE PRECISION  ELIM, FNU, TOL
      INTEGER           IKFLG, INIT, IPMTR
C     .. Array Arguments ..
      COMPLEX*16        CWRK(16)
C     .. Local Scalars ..
      COMPLEX*16        CFN, CONE, CRFN, CZERO, S, SR, T, T2, ZN
      DOUBLE PRECISION  AC, RFN, TEST, TSTI, TSTR
      INTEGER           I, J, K, L
C     .. Local Arrays ..
      COMPLEX*16        CON(2)
      DOUBLE PRECISION  C(120)
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, DIMAG, DCMPLX, EXP, LOG, DBLE, SQRT
C     .. Data statements ..
      DATA              CZERO, CONE/(0.0D0,0.0D0), (1.0D0,0.0D0)/
      DATA              CON(1), CON(2)/(3.98942280401432678D-01,0.0D0),
     *                  (1.25331413731550025D+00,0.0D0)/
      DATA              C(1), C(2), C(3), C(4), C(5), C(6), C(7), C(8),
     *                  C(9), C(10), C(11), C(12), C(13), C(14), C(15),
     *                  C(16)/1.00000000000000000D+00,
     *                  -2.08333333333333333D-01,
     *                  1.25000000000000000D-01,
     *                  3.34201388888888889D-01,
     *                  -4.01041666666666667D-01,
     *                  7.03125000000000000D-02,
     *                  -1.02581259645061728D+00,
     *                  1.84646267361111111D+00,
     *                  -8.91210937500000000D-01,
     *                  7.32421875000000000D-02,
     *                  4.66958442342624743D+00,
     *                  -1.12070026162229938D+01,
     *                  8.78912353515625000D+00,
     *                  -2.36408691406250000D+00,
     *                  1.12152099609375000D-01,
     *                  -2.82120725582002449D+01/
      DATA              C(17), C(18), C(19), C(20), C(21), C(22), C(23),
     *                  C(24)/8.46362176746007346D+01,
     *                  -9.18182415432400174D+01,
     *                  4.25349987453884549D+01,
     *                  -7.36879435947963170D+00,
     *                  2.27108001708984375D-01,
     *                  2.12570130039217123D+02,
     *                  -7.65252468141181642D+02,
     *                  1.05999045252799988D+03/
      DATA              C(25), C(26), C(27), C(28), C(29), C(30), C(31),
     *                  C(32), C(33), C(34), C(35), C(36), C(37), C(38),
     *                  C(39), C(40)/-6.99579627376132541D+02,
     *                  2.18190511744211590D+02,
     *                  -2.64914304869515555D+01,
     *                  5.72501420974731445D-01,
     *                  -1.91945766231840700D+03,
     *                  8.06172218173730938D+03,
     *                  -1.35865500064341374D+04,
     *                  1.16553933368645332D+04,
     *                  -5.30564697861340311D+03,
     *                  1.20090291321635246D+03,
     *                  -1.08090919788394656D+02,
     *                  1.72772750258445740D+00,
     *                  2.02042913309661486D+04,
     *                  -9.69805983886375135D+04,
     *                  1.92547001232531532D+05,
     *                  -2.03400177280415534D+05/
      DATA              C(41), C(42), C(43), C(44), C(45), C(46), C(47),
     *                  C(48)/1.22200464983017460D+05,
     *                  -4.11926549688975513D+04,
     *                  7.10951430248936372D+03,
     *                  -4.93915304773088012D+02,
     *                  6.07404200127348304D+00,
     *                  -2.42919187900551333D+05,
     *                  1.31176361466297720D+06,
     *                  -2.99801591853810675D+06/
      DATA              C(49), C(50), C(51), C(52), C(53), C(54), C(55),
     *                  C(56), C(57), C(58), C(59), C(60), C(61), C(62),
     *                  C(63), C(64)/3.76327129765640400D+06,
     *                  -2.81356322658653411D+06,
     *                  1.26836527332162478D+06,
     *                  -3.31645172484563578D+05,
     *                  4.52187689813627263D+04,
     *                  -2.49983048181120962D+03,
     *                  2.43805296995560639D+01,
     *                  3.28446985307203782D+06,
     *                  -1.97068191184322269D+07,
     *                  5.09526024926646422D+07,
     *                  -7.41051482115326577D+07,
     *                  6.63445122747290267D+07,
     *                  -3.75671766607633513D+07,
     *                  1.32887671664218183D+07,
     *                  -2.78561812808645469D+06,
     *                  3.08186404612662398D+05/
      DATA              C(65), C(66), C(67), C(68), C(69), C(70), C(71),
     *                  C(72)/-1.38860897537170405D+04,
     *                  1.10017140269246738D+02,
     *                  -4.93292536645099620D+07,
     *                  3.25573074185765749D+08,
     *                  -9.39462359681578403D+08,
     *                  1.55359689957058006D+09,
     *                  -1.62108055210833708D+09,
     *                  1.10684281682301447D+09/
      DATA              C(73), C(74), C(75), C(76), C(77), C(78), C(79),
     *                  C(80), C(81), C(82), C(83), C(84), C(85), C(86),
     *                  C(87), C(88)/-4.95889784275030309D+08,
     *                  1.42062907797533095D+08,
     *                  -2.44740627257387285D+07,
     *                  2.24376817792244943D+06,
     *                  -8.40054336030240853D+04,
     *                  5.51335896122020586D+02,
     *                  8.14789096118312115D+08,
     *                  -5.86648149205184723D+09,
     *                  1.86882075092958249D+10,
     *                  -3.46320433881587779D+10,
     *                  4.12801855797539740D+10,
     *                  -3.30265997498007231D+10,
     *                  1.79542137311556001D+10,
     *                  -6.56329379261928433D+09,
     *                  1.55927986487925751D+09,
     *                  -2.25105661889415278D+08/
      DATA              C(89), C(90), C(91), C(92), C(93), C(94), C(95),
     *                  C(96)/1.73951075539781645D+07,
     *                  -5.49842327572288687D+05,
     *                  3.03809051092238427D+03,
     *                  -1.46792612476956167D+10,
     *                  1.14498237732025810D+11,
     *                  -3.99096175224466498D+11,
     *                  8.19218669548577329D+11,
     *                  -1.09837515608122331D+12/
      DATA              C(97), C(98), C(99), C(100), C(101), C(102),
     *                  C(103), C(104), C(105), C(106), C(107), C(108),
     *                  C(109), C(110)/1.00815810686538209D+12,
     *                  -6.45364869245376503D+11,
     *                  2.87900649906150589D+11,
     *                  -8.78670721780232657D+10,
     *                  1.76347306068349694D+10,
     *                  -2.16716498322379509D+09,
     *                  1.43157876718888981D+08,
     *                  -3.87183344257261262D+06,
     *                  1.82577554742931747D+04,
     *                  2.86464035717679043D+11,
     *                  -2.40629790002850396D+12,
     *                  9.10934118523989896D+12,
     *                  -2.05168994109344374D+13,
     *                  3.05651255199353206D+13/
      DATA              C(111), C(112), C(113), C(114), C(115), C(116),
     *                  C(117), C(118), C(119),
     *                  C(120)/-3.16670885847851584D+13,
     *                  2.33483640445818409D+13,
     *                  -1.23204913055982872D+13,
     *                  4.61272578084913197D+12,
     *                  -1.19655288019618160D+12,
     *                  2.05914503232410016D+11,
     *                  -2.18229277575292237D+10,
     *                  1.24700929351271032D+09,
     *                  -2.91883881222208134D+07,
     *                  1.18838426256783253D+05/
C     .. Executable Statements ..
C
      IF (INIT.EQ.0) THEN
C        ---------------------------------------------------------------
C        INITIALIZE ALL VARIABLES
C        ---------------------------------------------------------------
         RFN = 1.0D0/FNU
         CRFN = DCMPLX(RFN,0.0D0)
         TSTR = DBLE(ZR)
         TSTI = DIMAG(ZR)
         TEST = FNU*EXP(-ELIM)
         IF (ABS(TSTR).LT.TEST) TSTR = 0.0D0
         IF (ABS(TSTI).LT.TEST) TSTI = 0.0D0
         IF (TSTR.EQ.0.0D0 .AND. TSTI.EQ.0.0D0) THEN
            ZETA1 = DCMPLX(ELIM+ELIM+FNU,0.0D0)
            ZETA2 = DCMPLX(FNU,0.0D0)
            PHI = CONE
            RETURN
         END IF
         T = DCMPLX(TSTR,TSTI)*CRFN
         S = CONE + T*T
         SR = SQRT(S)
         CFN = DCMPLX(FNU,0.0D0)
         ZN = (CONE+SR)/T
         ZETA1 = CFN*LOG(ZN)
         ZETA2 = CFN*SR
         T = CONE/SR
         SR = T*CRFN
         CWRK(16) = SQRT(SR)
         PHI = CWRK(16)*CON(IKFLG)
         IF (IPMTR.NE.0) THEN
            RETURN
         ELSE
            T2 = CONE/S
            CWRK(1) = CONE
            CRFN = CONE
            AC = 1.0D0
            L = 1
            DO 40 K = 2, 15
               S = CZERO
               DO 20 J = 1, K
                  L = L + 1
                  S = S*T2 + DCMPLX(C(L),0.0D0)
   20          CONTINUE
               CRFN = CRFN*SR
               CWRK(K) = CRFN*S
               AC = AC*RFN
               TSTR = DBLE(CWRK(K))
               TSTI = DIMAG(CWRK(K))
               TEST = ABS(TSTR) + ABS(TSTI)
               IF (AC.LT.TOL .AND. TEST.LT.TOL) GO TO 60
   40       CONTINUE
            K = 15
   60       INIT = K
         END IF
      END IF
      IF (IKFLG.EQ.2) THEN
C        ---------------------------------------------------------------
C        COMPUTE SUM FOR THE K FUNCTION
C        ---------------------------------------------------------------
         S = CZERO
         T = CONE
         DO 80 I = 1, INIT
            S = S + T*CWRK(I)
            T = -T
   80    CONTINUE
         SUM = S
         PHI = CWRK(16)*CON(2)
      ELSE
C        ---------------------------------------------------------------
C        COMPUTE SUM FOR THE I FUNCTION
C        ---------------------------------------------------------------
         S = CZERO
         DO 100 I = 1, INIT
            S = S + CWRK(I)
  100    CONTINUE
         SUM = S
         PHI = CWRK(16)*CON(1)
      END IF
      RETURN
      END
