      SUBROUTINE G05FAF(A,B,N,X)
C     MARK 14 RELEASE. NAG COPYRIGHT 1989.
C
C     Returns a vector of N pseudo-random numbers uniformly distributed
C     between A and B.
C
C     Pseudo-random numbers are generated by the auxiliary routine
C     G05CAY, 63 at a time, and stored in the array RV in common block
C     CG05CA. G05FAF copies numbers from the array RV into X,
C     transforming them to the interval (A, B), and calling G05CAY to
C     replenish RV when necessary.
C
C     A call of G05FAF returns the same sequence of pseudo-random
C     numbers as N consecutive calls to G05DAF.
C
C     Jeremy Du Croz, NAG Ltd, June 1989.
C
C     .. Parameters ..
      INTEGER           LV
      PARAMETER         (LV=63)
      DOUBLE PRECISION  ONE, ZERO
      PARAMETER         (ONE=1.0D0,ZERO=0.0D0)
C     .. Scalar Arguments ..
      DOUBLE PRECISION  A, B
      INTEGER           N
C     .. Array Arguments ..
      DOUBLE PRECISION  X(N)
C     .. Scalars in Common ..
      INTEGER           KV
C     .. Arrays in Common ..
      DOUBLE PRECISION  RV(LV)
C     .. Local Scalars ..
      DOUBLE PRECISION  Y, Z
      INTEGER           I, I1, I2, IV
      LOGICAL           INIT
C     .. External Subroutines ..
      EXTERNAL          G05CAY, G05CAZ
C     .. Intrinsic Functions ..
      INTRINSIC         MAX, MIN
C     .. Common blocks ..
      COMMON            /CG05CA/RV, KV
C     .. Save statement ..
      SAVE              /CG05CA/, INIT
C     .. Data statements ..
      DATA              INIT/.TRUE./
C     .. Executable Statements ..
      IF (N.LE.0) RETURN
      Y = MIN(A,B)
      Z = MAX(A,B)
C
C     Ensure that the basic generator has been initialized
C
      IF (INIT) CALL G05CAZ(INIT)
C
C     Replenish the buffer if necessary
C
      IF (KV.GE.LV) CALL G05CAY(.FALSE.)
C
C     Fill the array X in segments: I1 and I2 are indices of first and
C     last elements in current segment
C
      I1 = 1
      I2 = -KV
   20 CONTINUE
      I2 = MIN(I2+LV,N)
      IV = KV - I1 + 1
C
C     Generate values for the current segment of X. These loops should
C     be vectorizable; their length is at most LV.
C
      IF (Y.EQ.ZERO) THEN
CDIR$ SHORTLOOP
         DO 40 I = I1, I2
            X(I) = RV(I+IV)*Z
   40    CONTINUE
      ELSE IF (Z.EQ.ZERO) THEN
CDIR$ SHORTLOOP
         DO 60 I = I1, I2
            X(I) = (ONE-RV(I+IV))*Y
   60    CONTINUE
      ELSE
CDIR$ SHORTLOOP
         DO 80 I = I1, I2
            X(I) = MAX(Y,MIN(Z,Y*(ONE-RV(I+IV))+Z*RV(I+IV)))
   80    CONTINUE
      END IF
      KV = I2 + IV
C
      IF (I2.GE.N) RETURN
C
C     Replenish buffer and go back to generate next segment
C
      CALL G05CAY(.FALSE.)
      I1 = I2 + 1
      GO TO 20
      END
