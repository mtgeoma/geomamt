      SUBROUTINE G02BMF(N,M,X,IX,MISS,XMISS,NVARS,KVAR,XBAR,STD,SSPZ,
     *                  ISSPZ,RZ,IRZ,NCASES,COUNT,IC,IFAIL)
C     MARK 4 RELEASE NAG COPYRIGHT 1974.
C     MARK 4.5 REVISED
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C
C     NAG SUBROUTINE G02BMF
C     WRITTEN 17. 8. 73 BY PAUL GRIFFITHS (OXFORD UNIVERSITY)
C
C     COMPUTES MEANS AND STANDARD DEVIATIONS OF VARIABLES, SUMS OF
C     SQUARES AND CROSS-PRODUCTS ABOUT ZERO AND CORRELATION-LIKE
C     COEFFICIENTS FOR A SET OF DATA IN SPECIFIED COLUMNS OF THE
C     ARRAY X, OMITTING CASES WITH MISSING VALUES FROM ONLY THOSE
C     CALCULATIONS INVOLVING THE VARIABLES FOR WHICH THE VALUES ARE
C     MISSING
C
C     USES NAG ERROR ROUTINE P01AAF
C     NAG LIBRARY ROUTINE    X02BEF
C
C
C     ABOVE DATA STATEMENT MAY BE MACHINE-DEPENDENT -- DEPENDS ON
C     NUMBER OF CHARACTERS WHICH CAN BE STORED IN A REAL VARIABLE
C
C     .. Parameters ..
      CHARACTER*6       SRNAME
      PARAMETER         (SRNAME='G02BMF')
C     .. Scalar Arguments ..
      INTEGER           IC, IFAIL, IRZ, ISSPZ, IX, M, N, NCASES, NVARS
C     .. Array Arguments ..
      DOUBLE PRECISION  COUNT(IC,NVARS), RZ(IRZ,NVARS),
     *                  SSPZ(ISSPZ,NVARS), STD(NVARS), X(IX,M),
     *                  XBAR(NVARS), XMISS(M)
      INTEGER           KVAR(NVARS), MISS(M)
C     .. Local Scalars ..
      DOUBLE PRECISION  ACC, XJ, XK, XN
      INTEGER           I, IERROR, J, JP, JV, K, KV
C     .. Local Arrays ..
      CHARACTER*1       P01REC(1)
C     .. External Functions ..
      INTEGER           P01ABF, X02BEF
      EXTERNAL          P01ABF, X02BEF
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, SQRT, DBLE, INT
C     .. Executable Statements ..
      ACC = 0.1D0**(X02BEF(ACC)-2)
      IERROR = 0
      IF (IX.LT.N .OR. ISSPZ.LT.NVARS .OR. IRZ.LT.NVARS .OR. IC.LT.
     *    NVARS) IERROR = 3
      IF (NVARS.LT.2 .OR. NVARS.GT.M) IERROR = 2
      IF (N.LT.2) IERROR = 1
      IF (IERROR) 20, 20, 520
   20 DO 40 I = 1, NVARS
         IF (KVAR(I).LT.1 .OR. KVAR(I).GT.M) GO TO 480
   40 CONTINUE
C
C     ARRAYS USED FOR WORKSPACE IN FOLLOWING WAY:
C
C     SSPZ  DIAGONAL AND UPPER TRIANGLE USED FOR CUMULATING SUMS
C     OF CROSS-PRODUCTS
C     RZ    USED FOR CUMULATING SUMS OF SQUARES
C     RZ(I,J) CONTAINS SUM OF SQUARES OF VARIABLE I USED IN
C     FORMING SUM OF CROSS-PRODUCTS OF I AND J.
C     COUNT DIAGONAL AND UPPER TRIANGLE USED TO RECORD NUMBER OF
C     CASES USED IN CALCULATION OF SUMS OF SQUARES AND
C     CROSS-PRODUCTS.
C
C     COUNT COULD BE OMITTED AND LOWER TRIANGLE OF SSPZ USED
C     INSTEAD, BUT NUMBER OF CASES USED IN EACH CALCULATION IS
C     USEFUL OUTPUT AND INCLUSION OF COUNT MAINTAINS COMPATIBILITY
C     WITH G02BCF
C
C     INITIALISE THIS WORKSPACE AS NECESSARY
C
      DO 100 J = 1, NVARS
         XBAR(J) = 0.0D0
         STD(J) = 0.0D0
         DO 60 K = 1, NVARS
            RZ(K,J) = 0.0D0
   60    CONTINUE
         DO 80 K = 1, J
            SSPZ(K,J) = 0.0D0
            COUNT(K,J) = 0.0D0
   80    CONTINUE
  100 CONTINUE
C
C     ITERATIVE PROCESS THROUGH CASES BUILDING UP SUMS OF SQUARES
C     AND CROSS-PRODUCTS
C
      DO 300 I = 1, N
         DO 280 J = 1, NVARS
            JV = KVAR(J)
            IF (MISS(JV)) 140, 140, 120
  120       IF (ABS(X(I,JV)-XMISS(JV)).LE.ABS(ACC*XMISS(JV)))
     *          GO TO 280
  140       IF (COUNT(J,J)) 160, 160, 180
  160       COUNT(J,J) = 1.0D0
            XBAR(J) = X(I,JV)
            GO TO 200
  180       XK = COUNT(J,J)
            XN = XK + 1.0D0
            XJ = (X(I,JV)-XBAR(J))/XN
            STD(J) = STD(J) + XJ*XJ*XN*XK
            XBAR(J) = XBAR(J) + XJ
            COUNT(J,J) = XN
  200       IF (J.EQ.NVARS) GO TO 280
            JP = J + 1
            XJ = X(I,JV)
            DO 260 K = JP, NVARS
               KV = KVAR(K)
               IF (MISS(KV)) 240, 240, 220
  220          IF (ABS(X(I,KV)-XMISS(KV)).LE.ABS(ACC*XMISS(KV)))
     *             GO TO 260
  240          COUNT(J,K) = COUNT(J,K) + 1.0D0
               XK = X(I,KV)
               SSPZ(J,K) = SSPZ(J,K) + XJ*XK
               RZ(J,K) = RZ(J,K) + XJ*XJ
               RZ(K,J) = RZ(K,J) + XK*XK
  260       CONTINUE
  280    CONTINUE
  300 CONTINUE
C
C     TIDY UP MATRICES TO PROVIDE PROMISED OUTPUT
C
      DO 420 J = 1, NVARS
         XJ = STD(J)
         XN = COUNT(J,J)
         IF (XJ.LE.0.0D0 .OR. XN.LT.1.5D0) GO TO 320
         SSPZ(J,J) = XJ + XN*XBAR(J)*XBAR(J)
         STD(J) = SQRT(XJ/(XN-1.0D0))
         RZ(J,J) = 1.0D0
         GO TO 340
  320    STD(J) = 0.0D0
  340    IF (J.EQ.NVARS) GO TO 420
         JP = J + 1
         DO 400 K = JP, NVARS
            XJ = RZ(K,J)*RZ(J,K)
            IF (XJ.LE.0.0D0 .OR. COUNT(J,K).LT.1.5D0) GO TO 360
            RZ(J,K) = SSPZ(J,K)/SQRT(XJ)
            GO TO 380
  360       RZ(J,K) = 0.0D0
  380       SSPZ(K,J) = SSPZ(J,K)
            RZ(K,J) = RZ(J,K)
            COUNT(K,J) = COUNT(J,K)
  400    CONTINUE
  420 CONTINUE
C
C     CHECK ON NUMBER OF CASES
C
      XN = DBLE(N)
      DO 460 J = 1, NVARS
         DO 440 K = J, NVARS
            IF (COUNT(K,J).LT.XN) XN = COUNT(K,J)
  440    CONTINUE
  460 CONTINUE
      NCASES = INT(XN+0.5D0)
      IF (NCASES.LT.2) GO TO 500
      IFAIL = 0
      RETURN
  480 IERROR = 4
      GO TO 520
  500 IERROR = 5
  520 IFAIL = P01ABF(IFAIL,IERROR,SRNAME,0,P01REC)
      RETURN
      END
