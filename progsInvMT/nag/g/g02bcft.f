      SUBROUTINE G02BCF(N,M,X,IX,MISS,XMISS,XBAR,STD,SSP,ISSP,R,IR,
     *                  NCASES,COUNT,IC,IFAIL)
C     MARK 4 RELEASE NAG COPYRIGHT 1974.
C     MARK 4.5 REVISED
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C
C     NAG SUBROUTINE G02BCF
C     WRITTEN 16. 7.73 BY PAUL GRIFFITHS (OXFORD UNIVERSITY)
C
C     COMPUTES MEANS, STANDARD DEVIATIONS, SUMS OF SQUARES AND
C     CROSS-PRODUCTS OF DEVIATIONS FROM MEANS, AND PEARSON PRODUCT-
C     MOMENT CORRELATION COEFFICIENTS FOR A SET OF DATA IN THE
C     ARRAY X, OMITTING CASES WITH MISSING VALUES FROM ONLY THOSE
C     CALCULATIONS INVOLVING THE VARIABLES FOR WHICH THE VALUES
C     ARE MISSING
C
C     USES NAG ERROR ROUTINE P01AAF
C     NAG LIBRARY ROUTINE    X02BEF
C
C
C     ABOVE DATA STATEMENT MAY BE MACHINE DEPENDENT -- DEPENDS ON
C     NUMBER OF CHARACTERS WHICH MAY BE STORED IN A REAL VARIABLE
C
C     .. Parameters ..
      CHARACTER*6       SRNAME
      PARAMETER         (SRNAME='G02BCF')
C     .. Scalar Arguments ..
      INTEGER           IC, IFAIL, IR, ISSP, IX, M, N, NCASES
C     .. Array Arguments ..
      DOUBLE PRECISION  COUNT(IC,M), R(IR,M), SSP(ISSP,M), STD(M),
     *                  X(IX,M), XBAR(M), XMISS(M)
      INTEGER           MISS(M)
C     .. Local Scalars ..
      DOUBLE PRECISION  ACC, XJ, XK, XN, XNM
      INTEGER           I, IERROR, J, JP, K
C     .. Local Arrays ..
      CHARACTER*1       P01REC(1)
C     .. External Functions ..
      INTEGER           P01ABF, X02BEF
      EXTERNAL          P01ABF, X02BEF
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, SQRT, DBLE, INT
C     .. Executable Statements ..
      ACC = 0.1D0**(X02BEF(ACC)-2)
      IERROR = 0
      IF (IX.LT.N .OR. ISSP.LT.M .OR. IR.LT.M .OR. IC.LT.M) IERROR = 3
      IF (M.LT.2) IERROR = 2
      IF (N.LT.2) IERROR = 1
      IF (IERROR) 20, 20, 500
C
C
C     ARRAYS USED FOR WORKSPACE IN FOLLOWING WAY
C     SSP   UPPER TRIANGLE (EXCLUDING DIAGONAL) USED FOR CUMULATING
C     SUMS OF SQUARES AND CROSS-PRODUCTS OF DEVIATIONS
C     DIAGONAL AND LOWER TRIANGLE USED FOR CUMULATING SUMS OF
C     SQUARES OF DEVIATIONS USED IN ITERATIVE CALCULATIONS
C     (DIAGONAL CONTAINS ACTUAL SUMS OF SQUARES OF DEVIATIONS
C     OF VARIABLES FOR STANDARD DEVIATIONS)
C     R     USED FOR CUMULATING MEANS USED IN ITERATIVE
C     CALCULATIONS
C     COUNT UPPER TRIANGLE (EXCLUDING DIAGONAL) USED FOR CUMULATING
C     SUMS OF SQUARES OF DEVIATIONS USED IN ITERATIVE
C     CALCULATIONS
C     DIAGONAL AND LOWER TRIANGLE USED TO RECORD NUMBER OF
C     CASES USED IN CALCULATION OF SUMS OF SQUARES AND
C     CROSS-PRODUCTS OF DEVIATIONS
C
C     R(I,J)     CONTAINS MEAN OF VARIABLE I FOR USE IN FORMING
C     SUM OF CROSS-PRODUCT OF DEVIATIONS OF I AND J
C     SSP(I,J)   (I.GE.J) CONTAINS SUM OF SQUARES OF DEVIATIONS
C     OF VARIABLE I USED IN FORMING SUM OF CROSS-PRODUCT
C     OF DEVIATIONS OF I AND J
C     COUNT(I,J) (I.LT.J) CONTAINS SUM OF SQUARES OF DEVIATIONS
C     OF VARIABLE  J USED IN FORMING SUM OF CROSS-PRODUCT
C     OF DEVIATIONS OF I AND J
C
C     INITIALISE THIS WORKSPACE AS NECESSARY
C
   20 DO 60 J = 1, M
         DO 40 K = 1, M
            SSP(K,J) = 0.0D0
            COUNT(K,J) = 0.0D0
   40    CONTINUE
         R(J,J) = 0.0D0
   60 CONTINUE
C
C     ITERATIVE PROCESS THROUGH CASES BUILDING UP SUMS OF SQUARES
C     AND CROSS-PRODUCTS OF DEVIATIONS
C
      DO 300 I = 1, N
         DO 280 J = 1, M
            IF (MISS(J)) 100, 100, 80
   80       IF (ABS(X(I,J)-XMISS(J)).LE.ABS(ACC*XMISS(J))) GO TO 280
  100       IF (COUNT(J,J)) 120, 120, 140
  120       COUNT(J,J) = 1.0D0
            R(J,J) = X(I,J)
            GO TO 160
  140       XNM = COUNT(J,J)
            XN = XNM + 1.0D0
            XJ = (X(I,J)-R(J,J))/XN
            SSP(J,J) = SSP(J,J) + XJ*XJ*XN*XNM
            R(J,J) = R(J,J) + XJ
            COUNT(J,J) = XN
  160       IF (J.EQ.M) GO TO 280
            JP = J + 1
            DO 260 K = JP, M
               IF (MISS(K)) 200, 200, 180
  180          IF (ABS(X(I,K)-XMISS(K)).LE.ABS(ACC*XMISS(K)))
     *             GO TO 260
  200          IF (COUNT(K,J)) 220, 220, 240
  220          COUNT(K,J) = 1.0D0
               R(K,J) = X(I,K)
               R(J,K) = X(I,J)
               GO TO 260
  240          XNM = COUNT(K,J)
               XN = XNM + 1.0D0
               XJ = (X(I,J)-R(J,K))/XN
               XK = (X(I,K)-R(K,J))/XN
               COUNT(K,J) = XN
               COUNT(J,K) = COUNT(J,K) + XJ*XJ*XNM*XN
               SSP(K,J) = SSP(K,J) + XK*XK*XNM*XN
               SSP(J,K) = SSP(J,K) + XJ*XK*XNM*XN
               R(K,J) = R(K,J) + XK
               R(J,K) = R(J,K) + XJ
  260       CONTINUE
  280    CONTINUE
  300 CONTINUE
C
C     TIDY UP MATRICES TO PROVIDE PROMISED OUTPUT
C
      DO 420 J = 1, M
         XBAR(J) = R(J,J)
         XJ = SSP(J,J)
         XNM = COUNT(J,J) - 1.0D0
         IF (XJ.LE.0.0D0 .OR. XNM.LT.0.5D0) GO TO 320
         STD(J) = SQRT(XJ/XNM)
         R(J,J) = 1.0D0
         GO TO 340
  320    STD(J) = 0.0D0
         R(J,J) = 0.0D0
  340    IF (J.EQ.M) GO TO 420
         JP = J + 1
         DO 400 K = JP, M
            XJ = SSP(K,J)*COUNT(J,K)
            IF (XJ.LE.0.0D0 .OR. COUNT(K,J).LT.1.5D0) GO TO 360
            R(J,K) = SSP(J,K)/SQRT(XJ)
            GO TO 380
  360       R(J,K) = 0.0D0
  380       R(K,J) = R(J,K)
            SSP(K,J) = SSP(J,K)
            COUNT(J,K) = COUNT(K,J)
  400    CONTINUE
  420 CONTINUE
C
C     CHECK NUMBER OF CASES
C
      XN = DBLE(N)
      DO 460 J = 1, M
         DO 440 K = J, M
            IF (COUNT(K,J).LT.XN) XN = COUNT(K,J)
  440    CONTINUE
  460 CONTINUE
      NCASES = INT(XN+0.5D0)
      IF (NCASES.LT.2) GO TO 480
      IFAIL = 0
      RETURN
  480 IERROR = 4
  500 IFAIL = P01ABF(IFAIL,IERROR,SRNAME,0,P01REC)
      RETURN
      END
