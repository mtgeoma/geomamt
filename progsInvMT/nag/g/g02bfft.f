      SUBROUTINE G02BFF(N,M,X,IX,MISS,XMISS,XBAR,STD,SSPZ,ISSPZ,RZ,IRZ,
     *                  NCASES,COUNT,IC,IFAIL)
C     MARK 4 RELEASE NAG COPYRIGHT 1974.
C     MARK 4.5 REVISED
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C
C     NAG SUBROUTINE G02BFF
C     WRITTEN 17. 7.73 BY PAUL GRIFFITHS (OXFORD UNIVERSITY)
C
C     COMPUTES MEANS AND STANDARD DEVIATIONS OF VARIABLES, SUMS OF
C     SQUARES AND CROSS-PRODUCTS ABOUT ZERO AND CORRELATION-LIKE
C     COEFFICIENTS FOR A SET OF DATA IN THE ARRAY X, OMITTING CASES
C     WITH MISSING VALUES FROM ONLY THOSE CALCULATIONS INVOLVING
C     THE VARIABLES FOR WHICH THE VALUES ARE MISSING.
C
C     USES NAG ERROR ROUTINE P01AAF
C     NAG LIBRARY ROUTINE    X02BEF
C
C
C     ABOVE DATA STATEMENT MAY BE MACHINE-DEPENDENT -- DEPENDS ON
C     NUMBER OF CHARACTERS WHICH CAN BE STORED IN A REAL VARIABLE
C
C     .. Parameters ..
      CHARACTER*6       SRNAME
      PARAMETER         (SRNAME='G02BFF')
C     .. Scalar Arguments ..
      INTEGER           IC, IFAIL, IRZ, ISSPZ, IX, M, N, NCASES
C     .. Array Arguments ..
      DOUBLE PRECISION  COUNT(IC,M), RZ(IRZ,M), SSPZ(ISSPZ,M), STD(M),
     *                  X(IX,M), XBAR(M), XMISS(M)
      INTEGER           MISS(M)
C     .. Local Scalars ..
      DOUBLE PRECISION  ACC, XJ, XK, XN
      INTEGER           I, IERROR, J, JP, K
C     .. Local Arrays ..
      CHARACTER*1       P01REC(1)
C     .. External Functions ..
      INTEGER           P01ABF, X02BEF
      EXTERNAL          P01ABF, X02BEF
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, SQRT, DBLE, INT
C     .. Executable Statements ..
      ACC = 0.1D0**(X02BEF(ACC)-2)
      IERROR = 0
      IF (IX.LT.N .OR. ISSPZ.LT.M .OR. IRZ.LT.M .OR. IC.LT.M) IERROR = 3
      IF (M.LT.2) IERROR = 2
      IF (N.LT.2) IERROR = 1
      IF (IERROR) 20, 20, 480
C
C     ARRAYS USED FOR WORKSPACE IN FOLLOWING WAY:
C
C     SSPZ  DIAGONAL AND UPPER TRIANGLE USED FOR CUMULATING SUMS
C     OF CROSS-PRODUCTS
C     RZ    USED FOR CUMULATING SUMS OF SQUARES
C     RZ(I,J) CONTAINS SUM OF SQUARES OF VARIABLE I USED IN
C     FORMING SUM OF CROSS-PRODUCTS OF I AND J.
C     COUNT DIAGONAL AND UPPER TRIANGLE USED TO RECORD NUMBER OF
C     CASES USED IN CALCULATION OF SUMS OF SQUARES AND
C     CROSS-PRODUCTS.
C
C     COUNT COULD BE OMITTED AND LOWER TRIANGLE OF SSPZ USED
C     INSTEAD, BUT NUMBER OF CASES USED IN EACH CALCULATION IS
C     USEFUL OUTPUT AND INCLUSION OF COUNT MAINTAINS COMPATIBILITY
C     WITH G02BCF
C
C     INITIALISE THIS WORKSPACE AS NECESSARY
C
   20 DO 80 J = 1, M
         XBAR(J) = 0.0D0
         STD(J) = 0.0D0
         DO 40 K = 1, M
            RZ(K,J) = 0.0D0
   40    CONTINUE
         DO 60 K = 1, J
            SSPZ(K,J) = 0.0D0
            COUNT(K,J) = 0.0D0
   60    CONTINUE
   80 CONTINUE
C
C     ITERATIVE PROCESS THROUGH CASES BUILDING UP SUMS OF SQUARES
C     AND CROSS-PRODUCTS
C
      DO 280 I = 1, N
         DO 260 J = 1, M
            IF (MISS(J)) 120, 120, 100
  100       IF (ABS(X(I,J)-XMISS(J)).LE.ABS(ACC*XMISS(J))) GO TO 260
  120       IF (COUNT(J,J)) 140, 140, 160
  140       COUNT(J,J) = 1.0D0
            XBAR(J) = X(I,J)
            GO TO 180
  160       XK = COUNT(J,J)
            XN = XK + 1.0D0
            XJ = (X(I,J)-XBAR(J))/XN
            STD(J) = STD(J) + XJ*XJ*XN*XK
            XBAR(J) = XBAR(J) + XJ
            COUNT(J,J) = XN
  180       IF (J.EQ.M) GO TO 260
            JP = J + 1
            XJ = X(I,J)
            DO 240 K = JP, M
               IF (MISS(K)) 220, 220, 200
  200          IF (ABS(X(I,K)-XMISS(K)).LE.ABS(ACC*XMISS(K)))
     *             GO TO 240
  220          COUNT(J,K) = COUNT(J,K) + 1.0D0
               XK = X(I,K)
               SSPZ(J,K) = SSPZ(J,K) + XJ*XK
               RZ(J,K) = RZ(J,K) + XJ*XJ
               RZ(K,J) = RZ(K,J) + XK*XK
  240       CONTINUE
  260    CONTINUE
  280 CONTINUE
C
C     TIDY UP MATRICES TO PROVIDE PROMISED OUTPUT
C
      DO 400 J = 1, M
         XJ = STD(J)
         XN = COUNT(J,J)
         IF (XJ.LE.0.0D0 .OR. XN.LT.1.5D0) GO TO 300
         SSPZ(J,J) = XJ + XN*XBAR(J)*XBAR(J)
         STD(J) = SQRT(XJ/(XN-1.0D0))
         RZ(J,J) = 1.0D0
         GO TO 320
  300    STD(J) = 0.0D0
  320    IF (J.EQ.M) GO TO 400
         JP = J + 1
         DO 380 K = JP, M
            XJ = RZ(K,J)*RZ(J,K)
            IF (XJ.LE.0.0D0 .OR. COUNT(J,K).LT.1.5D0) GO TO 340
            RZ(J,K) = SSPZ(J,K)/SQRT(XJ)
            GO TO 360
  340       RZ(J,K) = 0.0D0
  360       SSPZ(K,J) = SSPZ(J,K)
            RZ(K,J) = RZ(J,K)
            COUNT(K,J) = COUNT(J,K)
  380    CONTINUE
  400 CONTINUE
C
C     CHECK ON NUMBER OF CASES
C
      XN = DBLE(N)
      DO 440 J = 1, M
         DO 420 K = J, M
            IF (COUNT(K,J).LT.XN) XN = COUNT(K,J)
  420    CONTINUE
  440 CONTINUE
      NCASES = INT(XN+0.5D0)
      IF (NCASES.LT.2) GO TO 460
      IFAIL = 0
      RETURN
  460 IERROR = 4
  480 IFAIL = P01ABF(IFAIL,IERROR,SRNAME,0,P01REC)
      RETURN
      END
