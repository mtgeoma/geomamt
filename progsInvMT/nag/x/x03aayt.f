      SUBROUTINE X03AAY(A,ISIZEA,B,ISIZEB,N,ISTEPA,ISTEPB,C1,C2,D1,D2)
C     MARK 10 RELEASE. NAG COPYRIGHT 1982
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C     DOUBLE PRECISION BASE VERSION
C
C     PERFORMS QUADRUPLE PRECISION COMPUTATION FOR X03AAF
C
C     **************************************************************
C     THIS FORTRAN CODE WILL NOT WORK ON ALL MACHINES. IT IS
C     PRESUMED TO WORK IF THE MACHINE SATISFIES ONE OF THE FOLLOWING
C     ASSUMPTIONS.
C
C     A.) THERE ARE AN EVEN NUMBER OF B-ARY DIGITS IN THE MANTISSA
C     -   OF A DOUBLE PRECISION NUMBER (WHERE B IS THE BASE FOR THE
C     -   REPRESENTATION OF FLOATING-POINT NUMBERS), AND THE
C     -   COMPUTED RESULT OF A DOUBLE PRECISION ADDITION,
C     -   SUBTRACTION OR MULTIPLICATION IS EITHER CORRECTLY ROUNDED
C     -   OR CORRECTLY CHOPPED.
C
C     B.) FLOATING-POINT NUMBERS ARE REPRESENTED TO THE BASE 2 (WITH
C     -   ANY NUMBER OF BITS IN THE MANTISSA OF A DOUBLE PRECISION
C     -   NUMBER), AND THE COMPUTED RESULT OF A DOUBLE PRECISION
C     -   ADDITION, SUBTRACTION OR MULTIPLICATION IS CORRECTLY
C     -   ROUNDED.
C
C     REFERENCES-
C
C     T.J. DEKKER  A FLOATING-POINT TECHNIQUE FOR EXTENDING THE
C     AVAILABLE PRECISION. NUMER. MATH. 18, 224-242 (1971)
C
C     S. LINNAINMAA  SOFTWARE FOR DOUBLED-PRECISION FLOATING-POINT
C     COMPUTATIONS. ACM TRANS. MATH. SOFTWARE 7, 272-283 (1981)
C
C     IF THE ABOVE ASSUMPTIONS ARE NOT SATISFIED, THIS ROUTINE MUST
C     BE IMPLEMENTED IN ASSEMBLY LANGUAGE. IN ANY CASE ASSEMBLY
C     LANGUAGE MAY BE PREFERABLE FOR GREATER EFFICIENCY.  CONSULT
C     NAG CENTRAL OFFICE.
C
C     THE ROUTINE MUST SIMULATE THE FOLLOWING QUADRUPLE PRECISION
C     CODING IN PSEUDO-FORTRAN, WHERE
C     - QEXTD CONVERTS FROM DOUBLE TO QUADRUPLE PRECISION
C     - DBLEQ CONVERTS FROM QUADRUPLE TO DOUBLE PRECISION.
C
C     QUADRUPLE PRECISION SUM
C     SUM = QEXTD(C1) + QEXTD(C2)
C     IF (N.LT.1) GO TO 80
C     IS = 1
C     IT = 1
C     DO 60 I = 1, N
C        SUM = SUM + QEXTD(A(IS))*QEXTD(B(IT))
C        IS = IS + ISTEPA
C        IT = IT + ISTEPB
C  60 CONTINUE
C  80 D1 = SUM -- ROUNDED TO DOUBLE PRECISION
C     D2 = DBLEQ(SUM-QEXTD(D1))
C
C     **************************************************************
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION  C1, C2, D1, D2
      INTEGER           ISIZEA, ISIZEB, ISTEPA, ISTEPB, N
C     .. Array Arguments ..
      DOUBLE PRECISION  A(ISIZEA), B(ISIZEB)
C     .. Local Scalars ..
      DOUBLE PRECISION  AA, BB, CONS, HA, HB, R, S, SUM, SUMM, TA, TB,
     *                  Z, ZZ
      INTEGER           I, IS, IT
C     .. Intrinsic Functions ..
      INTRINSIC         ABS
C     .. Data statements ..
C     ************* IMPLEMENTATION-DEPENDENT CONSTANT **************
C     CONS MUST BE SET TO  B**(T - INT(T/2)) + 1 , WHERE T IS THE
C     NUMBER OF B-ARY DIGITS IN THE MANTISSA OF A DOUBLE PRECISION
C     NUMBER.
C     FOR B = 16 AND T = 14 (E.G. IBM 370) OR
C     FOR B = 2 AND T = 56 (E.G. DEC VAX-11)
C      DATA CONS /268435457.0D0/
      DATA CONS /1.34217729000000D+8/ 
C     **************************************************************
C     .. Executable Statements ..
      SUM = C1 + C2
      SUMM = (C1-SUM) + C2
      IF (N.LT.1) GO TO 80
      IS = 1
      IT = 1
      DO 60 I = 1, N
         AA = A(IS)
         BB = B(IT)
         Z = AA*CONS
         HA = (AA-Z) + Z
         TA = AA - HA
         Z = BB*CONS
         HB = (BB-Z) + Z
         TB = BB - HB
         Z = AA*BB
         ZZ = (((HA*HB-Z)+HA*TB)+TA*HB) + TA*TB
         R = Z + SUM
         IF (ABS(Z).GT.ABS(SUM)) GO TO 20
         S = (((SUM-R)+Z)+ZZ) + SUMM
         GO TO 40
   20    S = (((Z-R)+SUM)+SUMM) + ZZ
   40    SUM = R + S
         SUMM = (R-SUM) + S
         IS = IS + ISTEPA
         IT = IT + ISTEPB
   60 CONTINUE
C  80 D1 = SUM + (SUMM+SUMM)
C     *************** IMPLEMENTATION DEPENDENT CODE ****************
C     THE PREVIOUS STATEMENT ASSUMES THAT THE RESULT OF A DOUBLE
C     PRECISION ADDITION IS TRUNCATED.  IF IT IS ROUNDED, THEN
C     THE STATEMENT MUST BE CHANGED TO
   80 D1 = SUM + SUMM
C     **************************************************************
      D2 = (SUM-D1) + SUMM
      RETURN
      END
