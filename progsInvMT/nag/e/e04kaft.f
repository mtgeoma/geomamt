      SUBROUTINE E04KAF(N,IBOUND,BL,BU,X,F,G,IW,LIW,W,LW,IFAIL)
C
C     MARK 6 RELEASE NAG COPYRIGHT 1977
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C     MARK 13 REVISED. USE OF MARK 12 X02 FUNCTIONS (APR 1988).
C     MARK 13A REVISED. IER-632 (APR 1988).
C     MARK 14 REVISED. IER-816 (DEC 1989).
C     MARK 16 REVISED. IER-1110 (JUL 1993).
C     MARK 17 REVISED. IER-1637 (JUN 1995).
C
C     **************************************************************
C
C     E04KAF IS AN EASY-TO-USE QUASI-NEWTON ALGORITHM FOR FINDING A
C     MINIMUM OF A FUNCTION F(X1, X2, . . . , XN), SUBJECT TO FIXED
C     UPPER AND LOWER BOUNDS ON THE INDEPENDENT VARIABLES X1, X2, .
C     . . , XN , WHEN FIRST DERIVATIVES OF F ARE AVAILABLE.
C
C     GIVEN AN INITIAL ESTIMATE OF THE POSITION OF A CONSTRAINED
C     MINIMUM, THE ROUTINE ATTEMPTS TO COMPUTE THE POSITION OF THE
C     MINIMUM AND THE CORRESPONDING FUNCTION AND GRADIENT VALUES. IT
C     IS ASSUMED THAT F IS TWICE CONTINUOUSLY-DIFFERENTIABLE.
C
C     THE ROUTINE IS ESSENTIALLY IDENTICAL TO THE SUBROUTINE BCFDQ2
C     IN THE NPL ALGORITHMS LIBRARY (REF. NO. E4/48/F) AND CALLS
C     E04KBN WITH SUITABLE DEFAULT SETTINGS FOR PARAMETERS. (IN
C     PARTICULAR, E04LBS IS USED AS MINLIN.)
C
C     N.B. FUNCT2 IS A DESIGNATED NAME.
C     --------------------------------
C
C     THE REAL ARRAY W, USED AS WORKSPACE BY E04KAF, MUST BE
C     DIMENSIONED AT LEAST 10*N + N*(N - 1)/2, OR 11 IF N = 1. THE
C     INTEGER ARRAY IW, ALSO USED AS WORKSPACE BY E04KAF, MUST BE
C     DIMENSIONED AT LEAST (N + 2).
C
C     PHILIP E. GILL, WALTER MURRAY, SUSAN M. PICKEN, MARGARET H.
C     WRIGHT AND ENID M. R. LONG, D.N.A.C., NATIONAL PHYSICAL
C     LABORATORY, ENGLAND
C
C     **************************************************************
C
C
C     A MACHINE-DEPENDENT CONSTANT IS SET HERE. EPSMCH IS THE
C     SMALLEST POSITIVE REAL NUMBER SUCH THAT 1 + EPSMCH .GT.
C     EPSMCH.
C
C     .. Parameters ..
      CHARACTER*6       SRNAME
      PARAMETER         (SRNAME='E04KAF')
C     .. Scalar Arguments ..
      DOUBLE PRECISION  F
      INTEGER           IBOUND, IFAIL, LIW, LW, N
C     .. Array Arguments ..
      DOUBLE PRECISION  BL(N), BU(N), G(N), W(LW), X(N)
      INTEGER           IW(LIW)
C     .. Local Scalars ..
      DOUBLE PRECISION  BNDMAX, COND, EPSMCH, ETA, FEST, GTG, PEPS,  
     *                  RMAX, RTEPS, STEPMX, U, XI, XTOL
      INTEGER           I, IFLAG, INTYPE, IPRINT, J, KIW, KW1, KW2, LH, 
     *                  MAXFUN, NFREE, NWHY
      LOGICAL           LOCSCH
C     .. Local Arrays ..
      CHARACTER*1       P01REC(1)
C     .. External Functions ..
      DOUBLE PRECISION  DNRM2, X02AJF, X02ALF
      INTEGER           P01ABF
      EXTERNAL          DNRM2, X02AJF, X02ALF, P01ABF
C     .. External Subroutines ..
      EXTERNAL          E04CGZ, E04DEZ, E04HCF, E04JBX, E04KBN, E04LBS
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, SQRT
C     .. Executable Statements ..
      EPSMCH = X02AJF()
      RMAX = X02ALF()
C
      RTEPS = SQRT(EPSMCH)
      PEPS = EPSMCH**0.66666D+0
      NWHY = 1
      IF (N.LE.0 .OR. IBOUND.LT.0 .OR. IBOUND.GT.3) GO TO 100
C
C     COMPUTE THE LENGTH OF THE ARRAY WHICH HOLDS THE APPROXIMATE
C     HESSIAN MATRIX.
C
      LH = N*(N-1)/2
      IF (LH.EQ.0) LH = 1
C
C     CHECK THAT THERE IS SUFFICIENT WORKSPACE.
C
      IF (LW.LT.10*N+LH) GO TO 100
      IF (LIW.LT.N+2) GO TO 100
C
C     IF APPROPRIATE, E04KBN WILL CHECK THAT BL(I) .LE. BU(I)
C
      NWHY = 0
C
C     SUPPRESS THE PRINT FREQUENCY.
C
      IPRINT = 0
C
C     REQUEST CONFIRMATION OF THE MINIMUM.
C
      LOCSCH = .TRUE.
C
C     ONLY 100*N FUNCTION EVALUATIONS ARE ALLOWED.
C
      MAXFUN = 100*N
C
C     SET THE LINEAR SEARCH PARAMETER.
C
      ETA = 9.0D-1
      IF (N.EQ.1) ETA = 0.0D+0
C
C     SPECIFY THE OVERALL CONVERGENCE CRITERION.
C
      XTOL = 1.0D+1*RTEPS
C
C     SPECIFY THE BOUND ON THE STEP-LENGTH.
C
      STEPMX = DNRM2(N,X,1)
      IF (STEPMX.LT.1.0D+1) STEPMX = 1.0D+1
C
C     COMPUTE THE ADDRESSES FOR THE ARRAYS USED IN E04JBX AND
C     E04KBN.
C
      KW1 = 9*N + 1
      KW2 = KW1 + LH
      KIW = 3
C
C     CHECK THAT THE GRADIENTS HAVE BEEN FORMED CORRECTLY BY CALLING
C     E04HCF WITH SOFT FAILURE OPTION.
C
      NWHY = 1
      CALL E04HCF(N,E04DEZ,X,F,G,IW,LIW,W,LW,NWHY)
      IF (NWHY.EQ.0) GO TO 20
C
C     IF NWHY = 2, THE USER HAS MADE AN ERROR.
C
      IF (NWHY.EQ.2) NWHY = 10
      GO TO 100
C
C     E04HCF HAS COMPUTED THE INITIAL FUNCTION VALUE AND GRADIENT
C     VECTOR. E04JBX WILL GIVE THE UNIT MATRIX AS THE FIRST HESSIAN
C     APPROXIMATION.
C
   20 CALL E04JBX(N,W(KW2),N,W(KW1),LH,U)
      INTYPE = 1
C
C     COMPUTE AN ESTIMATE OF THE FUNCTION VALUE AT THE MINIMUM.
C
      FEST = 0.0D+0
      IF (ABS(F).LE.RTEPS) FEST = -1.0D+0
      IF (F.LT.-RTEPS) FEST = 1.0D+1*F
C
C     CALL S-ROUTINE E04KBN (WITH SOFT FAILURE OPTION) TO MINIMIZE
C     THE FUNCTION.
C
      NWHY = 1
      CALL E04KBN(N,E04DEZ,E04CGZ,IPRINT,LOCSCH,INTYPE,E04LBS,MAXFUN,
     *            ETA,XTOL,STEPMX,FEST,IBOUND,BL,BU,X,W(KW1),LH,W(KW2),
     *            IW(KIW),F,G,IW,LIW,W,LW,NWHY)
      IF (NWHY.LE.2 .OR. NWHY.EQ.4) GO TO 60
C
C     IF THE LINEAR SEARCH HAS FAILED, ATTEMPT TO DETERMINE WHETHER
C     THE FAILURE IS DUE TO TOO SMALL A SETTING FOR XTOL.
C
      U = 1.0D+0 + ABS(F)
      U = PEPS*U*U
      GTG = 0.0D+0
      J = KIW
      DO 40 I = 1, N
         IF (IW(J).GT.0) GTG = GTG + G(I)**2
         J = J + 1
   40 CONTINUE
C
C     THE VALUES 3, 5, 6, 7, 8 FOR NWHY HAVE THE FOLLOWING
C     SIGNIFICANCE
C
C     NWHY = 5  -  THE MINIMIZATION HAS PROBABLY WORKED.
C     NWHY = 6  -  THE MINIMIZATION HAS POSSIBLY WORKED.
C     NWHY = 7  -  THE MINIMIZATION IS UNLIKELY TO HAVE WORKED.
C     NWHY = 8  -  THE MINIMIZATION IS VERY UNLIKELY TO HAVE WORKED.
C     NWHY = 3  -  THE MINIMIZATION HAS FAILED.
C
      IF (NWHY.EQ.5) NWHY = 3
      IF (GTG.LE.1.0D+3*U) NWHY = 8
      IF (GTG.LE.1.0D+2*U) NWHY = 7
      IF (GTG.LE.1.0D+1*U) NWHY = 6
      IF (GTG.LE.U) NWHY = 5
   60 CONTINUE
C
C     TELL THE USER IF ANY VARIABLE IS LARGE AND NEGATIVE OR LARGE
C     AND POSITIVE. (THIS WOULD OCCUR, IN PARTICULAR, IF ANY X(I)
C     REACHED AN ARTIFICIAL BOUND SET BY E04JBL.)
C
      BNDMAX = 0.99999D+6
      DO 80 I = 1, N
         XI = X(I)
         IF (XI.LT.BNDMAX .AND. XI.GT.-BNDMAX) GO TO 80
         NWHY = 9
         GO TO 100
   80 CONTINUE
C
      IF (NWHY.EQ.0 .OR. NWHY.EQ.3 .OR. NWHY.EQ.5) THEN
C
C        COMPUTE NFREE, RETURN THE ELEMENTS OF THE PROJECTED GRADIENT 
C        ALONG WITH INFORMATION ABOUT THE STATUS OF THE VARIABLES. 
C
         NFREE = 0
         DO 140 I = 1, N
            IW(I) = IW(KIW+I-1)
            IF (IW(I).LT.0) THEN
               W(I) = 0.0D0
            ELSE
               W(I) = G(I)
               NFREE = NFREE + 1
            END IF
  140    CONTINUE
         IW(N+1) = NFREE
C
C        COMPUTE ESTIMATED CONDITION NUMBER OF PROJECTED HESSIAN.
C
         COND = 0.0D+0
         IF (NFREE.GT.0) CALL E04LBW(W(KW2),NFREE,RMAX,IFLAG,COND)
         IF (IFLAG.EQ.1) COND = RMAX
         W(N+1) = COND
      END IF
C
C     TERMINATION OF ALGORITHM
C
  100 IF (NWHY.NE.0) GO TO 120
      IFAIL = 0
      RETURN
  120 IFAIL = P01ABF(IFAIL,NWHY,SRNAME,0,P01REC)
      RETURN
C
C     END OF E04KAF (BCFDQ2)
C
      END
