      SUBROUTINE E04JBN(IFLAG,N,ISTATE,F,X,DELTA,SFUN,ITYPE,NFTOTL,G,
     *                  FPLUS,FMINUS,IW,LIW,W,LW)
C
C     MARK 6 RELEASE NAG COPYRIGHT 1977
C     MARK 8 REVISED. IER-238 (APR 1980).
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C     MARK 13 REVISED. USE OF MARK 12 X02 FUNCTIONS (APR 1988).
C
C     **************************************************************
C
C     E04JBN (ZAPGRD) ASSIGNS TO CERTAIN ELEMENTS OF THE ARRAY G A
C     FINITE- DIFFERENCE APPROXIMATION TO THE GRADIENT OF THE
C     FUNCTION F. THE VALUE INITIALLY IN THE FIRST POSITION OF IW
C     INDICATES WHETHER THE ELEMENTS REQUIRED ARE THOSE WITH
C     POSITIVE OR NEGATIVE ENTRIES IN ISTATE. SUBSEQUENT SETTINGS OF
C     IW(1) ARE FOR THE BENEFIT OF THE LIBRARY-USER ONLY. TO AVOID
C     UNNECESSARY FUNCTION EVALUATIONS, IFLAG SHOULD BE SET ON ENTRY
C     TO 3 FOR GENUINELY UNCONSTRAINED PROBLEMS ONLY (IBOUND = 4)
C     BUT TO 0 OTHERWISE. ITS VALUE SHOULD NOT BE CHANGED BY SFUN
C     UNLESS THE USER WISHES TO TERMINATE THE OPTIMIZATION. ITYPE
C     DETERMINES THE TYPE OF APPROXIMATION REQUIRED. IF ITYPE .LE.
C     0, FORWARD DIFFERENCES ARE OBTAINED AND THE FUNCTION VALUES AT
C     THE FORWARD POINTS ARE STORED IN FPLUS. IF ITYPE = 0, AN
C     ESTIMATE IS MADE OF THE RELATIVE CANCELLATION ERROR IN THE
C     GRADIENT VECTOR AND IF THIS IS GREATER THAN 0.1 THEN CENTRAL
C     DIFFERENCES ARE CALCULATED. IF ITYPE = 2, CENTRAL DIFFERENCES
C     ARE EVALUATED WITH THE AID OF THE FUNCTION VALUES ALREADY IN
C     FPLUS. IF ITYPE = 1, CENTRAL DIFFERENCES REQUIRING THE
C     EVALUATION OF BOTH FPLUS(I) AND FMINUS(I) ARE COMPUTED FOR THE
C     SPECIFIED G(I). ON EXIT ITYPE = 1 IF CENTRAL DIFFERENCES HAVE
C     BEEN CALCULATED AND ITYPE .LE. 0 (AS ON ENTRY) OTHERWISE.
C
C     PHILIP E. GILL, WALTER MURRAY, SUSAN M. PICKEN, MARGARET H.
C     WRIGHT AND ENID M. R. LONG, D.N.A.C., NATIONAL PHYSICAL
C     LABORATORY, ENGLAND
C
C     **************************************************************
C
C     SFUN
C
C     A MACHINE-DEPENDENT CONSTANT IS SET HERE. EPSMCH IS THE
C     SMALLEST POSITIVE REAL NUMBER SUCH THAT 1 + EPSMCH .GT. 1.
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION  F
      INTEGER           IFLAG, ITYPE, LIW, LW, N, NFTOTL
C     .. Array Arguments ..
      DOUBLE PRECISION  DELTA(N), FMINUS(N), FPLUS(N), G(N), W(LW), X(N)
      INTEGER           ISTATE(N), IW(LIW)
C     .. Subroutine Arguments ..
      EXTERNAL          SFUN
C     .. Local Scalars ..
      DOUBLE PRECISION  ABSF, ABSGJ, CNCERR, EPSMCH, ERRMAX, FDUMMY, FJ,
     *                  GMAX, RCNERR, TEMP, XJ
      INTEGER           IISIGN, ITEST, J, KODE
C     .. External Functions ..
      DOUBLE PRECISION  X02AJF
      EXTERNAL          X02AJF
C     .. Intrinsic Functions ..
      INTRINSIC         ABS
C     .. Executable Statements ..
      EPSMCH = X02AJF()
      IF (IFLAG.NE.0) IFLAG = 3
      KODE = IW(1)
      IISIGN = 1
      IF (KODE.EQ.-3) IISIGN = -1
      IF (ITYPE.EQ.2) GO TO 140
      IF (IFLAG.EQ.0) GO TO 40
      DO 20 J = 1, N
         FPLUS(J) = DELTA(J)
   20 CONTINUE
      CALL SFUN(IFLAG,N,X,FDUMMY,FPLUS,IW,LIW,W,LW)
      NFTOTL = NFTOTL + N
      IF (IFLAG.LT.0) RETURN
      IF (ITYPE) 80, 80, 160
   40 DO 60 J = 1, N
         ITEST = ISTATE(J)
         IF (ITEST.EQ.-3) GO TO 60
         ITEST = IISIGN*ITEST
         IF (ITEST.LE.0) GO TO 60
         XJ = X(J)
         X(J) = XJ + DELTA(J)
         IW(2) = J
         FJ = F
         CALL SFUN(IFLAG,N,X,FJ,W,IW,LIW,W,LW)
         NFTOTL = NFTOTL + 1
         X(J) = XJ
         IF (IFLAG.LT.0) RETURN
         FPLUS(J) = FJ
   60 CONTINUE
      IF (ITYPE.EQ.1) GO TO 160
C
C     COMPUTE FORWARD DIFFERENCES.
C
   80 DO 100 J = 1, N
         ITEST = ISTATE(J)
         IF (ITEST.EQ.-3) GO TO 100
         ITEST = IISIGN*ITEST
         IF (ITEST.LE.0) GO TO 100
         G(J) = (FPLUS(J)-F)/DELTA(J)
  100 CONTINUE
      IF (ITYPE.LT.0) RETURN
C
C     COMPUTE THE OVERALL RELATIVE CANCELLATION ERROR IN THE
C     APPROXIMATION TO THE GRADIENT. THE FACT THAT THIS ERROR CANNOT
C     EXCEED UNITY MAY BE USED TO PREVENT OVERFLOW.
C
      ABSF = ABS(F)
      ERRMAX = 0.0D+0
      GMAX = 0.0D+0
      TEMP = EPSMCH*(6.0D+0*ABSF+3.0D+0)
      DO 120 J = 1, N
         ITEST = ISTATE(J)
         IF (ITEST.EQ.-3) GO TO 120
         ITEST = IISIGN*ITEST
         IF (ITEST.LE.0) GO TO 120
         CNCERR = TEMP/DELTA(J) + EPSMCH
         ABSGJ = ABS(G(J))
         IF (ABSGJ.GT.GMAX) GMAX = ABSGJ
         IF (CNCERR.GT.ERRMAX) ERRMAX = CNCERR
  120 CONTINUE
      IF (ERRMAX.LT.EPSMCH) ERRMAX = EPSMCH
      RCNERR = 1.0D+0
      IF (ERRMAX.LE.GMAX) RCNERR = ERRMAX/GMAX
      IF (RCNERR.LE.1.0D-1) RETURN
C
C     COMPUTE CENTRAL DIFFERENCES.
C
  140 ITYPE = 1
  160 IW(1) = -4
      IF (IFLAG.EQ.0) GO TO 200
      DO 180 J = 1, N
         FMINUS(J) = -DELTA(J)
  180 CONTINUE
      CALL SFUN(IFLAG,N,X,FDUMMY,FMINUS,IW,LIW,W,LW)
      NFTOTL = NFTOTL + N
      IF (IFLAG.LT.0) RETURN
      GO TO 240
  200 DO 220 J = 1, N
         ITEST = ISTATE(J)
         IF (ITEST.EQ.-3) GO TO 220
         ITEST = IISIGN*ITEST
         IF (ITEST.LE.0) GO TO 220
         XJ = X(J)
         X(J) = XJ - DELTA(J)
         IW(2) = J
         FJ = F
         CALL SFUN(IFLAG,N,X,FJ,W,IW,LIW,W,LW)
         NFTOTL = NFTOTL + 1
         X(J) = XJ
         IF (IFLAG.LT.0) RETURN
         FMINUS(J) = FJ
  220 CONTINUE
  240 DO 260 J = 1, N
         ITEST = ISTATE(J)
         IF (ITEST.EQ.-3) GO TO 260
         ITEST = IISIGN*ITEST
         IF (ITEST.LE.0) GO TO 260
         G(J) = 0.5D+0*(FPLUS(J)-FMINUS(J))/DELTA(J)
  260 CONTINUE
      RETURN
C
C     END OF E04JBN (ZAPGRD)
C
      END
