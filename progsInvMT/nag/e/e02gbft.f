      SUBROUTINE E02GBF(M,N,MPL1,E,IER,F,X,MXS1,MONIT,IPRINT,K,EL1N,
     *                  INDX,W,IW,IFAIL)
C     MARK 7 RELEASE. NAG COPYRIGHT 1978.
C     MARK 8A REVISED. IER-256 (AUG 1980).
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C     MARK 13 REVISED. USE OF MARK 12 X02 FUNCTIONS (APR 1988).
C     MARK 14 REVISED. IER-812 (DEC 1989).
C     MONIT
C     .. Parameters ..
      CHARACTER*6       SRNAME
      PARAMETER         (SRNAME='E02GBF')
C     .. Scalar Arguments ..
      DOUBLE PRECISION  EL1N
      INTEGER           IER, IFAIL, IPRINT, IW, K, M, MPL1, MXS1, N
C     .. Array Arguments ..
      DOUBLE PRECISION  E(IER,MPL1), F(MPL1), W(IW), X(N)
      INTEGER           INDX(MPL1)
C     .. Subroutine Arguments ..
      EXTERNAL          MONIT
C     .. Scalars in Common ..
      DOUBLE PRECISION  EPS
C     .. Local Scalars ..
      DOUBLE PRECISION  ALPHA, ANRM, CFMAG, CFMIN, CNRM, GN, OCT,
     *                  OLDPEN, ONE, PEN, PENPAR, PN, PTG, S, TMP, TWO,
     *                  ZERO
      INTEGER           ALF, COEF, COEF0, COEFX, GRD, I, ICYC, IDKS,
     *                  IIN, IPDD, IPEND, IPRES, IPRR, IPZZ, IRR, ISAVE,
     *                  IX, IXMAG, IXMIN, IZR, KCNT, KP1, L, MP1, MPL,
     *                  MXS, NUM, OX, P, PTA, PTAX, TOP
      LOGICAL           FAIL, INIT, PSW
C     .. Local Arrays ..
      CHARACTER*1       P01REC(1)
C     .. External Functions ..
      DOUBLE PRECISION  E02GBJ, DNRM2, X02AJF
      INTEGER           P01ABF, X02BBF
      EXTERNAL          E02GBJ, DNRM2, X02AJF, P01ABF, X02BBF
C     .. External Subroutines ..
      EXTERNAL          E02GBK, E02GBL, E02GBM, E02GBS, E02GBT, E02GBU,
     *                  E02GBV, E02GBX, E02GBY, E02GBZ
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX, MOD, SIGN
C     .. Common blocks ..
      COMMON            /AE02GB/EPS
C     .. Data statements ..
      DATA              ZERO/0.0D+00/
      DATA              ONE/1.0D+00/
      DATA              TWO/2.0D+00/
      DATA              OCT/8.0D+00/
C     .. Executable Statements ..
      ISAVE = IFAIL
      EPS = X02AJF()
      L = MPL1 - M
      MPL = MPL1
      IPRES = 2*MPL1 + 4*N + 1
      IPZZ = IPRES + MPL1
      IPRR = IPZZ + N*N
      IPDD = IPRR + (N+1)*(N+2)/2
      IPEND = IPDD + N - 1
      IRR = (N+1)*(N+2)/2
      IZR = N
      IF (N.GE.2 .AND. L.GE.0 .AND. IPEND.LE.IW .AND. M.GE.N .AND.
     *    MPL.GE.N .AND. IER.GE.N) GO TO 20
      IFAIL = P01ABF(ISAVE,4,SRNAME,0,P01REC)
      RETURN
   20 CONTINUE
      MXS = MXS1
      IF (MXS.LE.0) MXS = X02BBF(0.0D0)
      PSW = .FALSE.
      IF (IPRINT.GE.0) PSW = .TRUE.
C
C     ***************
C     SET UP INDICES FOR THE TEMPORARY STORAGE VECTOR  W.
C     NOTE THAT  TOP, ALF  AND  COEF  ALL REFER
C     TO THE SAME LOCATION.
C     ***************
C
      MP1 = M + 1
      GRD = 1
      OX = GRD + N
      P = OX + N
      PTA = P + N
      ALF = PTA + MPL
      COEF = ALF
      TOP = ALF
      COEF0 = COEF - 1
      PENPAR = ONE
C
C     *********
C     OBTAIN MATRIX NORMS.
C     *********
C
      ANRM = ZERO
      CNRM = ZERO
      IF (1.GT.M) GO TO 80
      DO 60 I = 1, M
         TMP = DNRM2(N,E(1,I),1)
         IF (TMP.GT.ZERO) GO TO 40
         IFAIL = P01ABF(ISAVE,4,SRNAME,0,P01REC)
         RETURN
   40    CONTINUE
         ANRM = MAX(ANRM,TMP)
   60 CONTINUE
   80 CONTINUE
      IF (MP1.GT.MPL) GO TO 140
      DO 120 I = MP1, MPL
         TMP = DNRM2(N,E(1,I),1)
         IF (TMP.GT.ZERO) GO TO 100
         IFAIL = P01ABF(ISAVE,4,SRNAME,0,P01REC)
         RETURN
  100    CONTINUE
         CNRM = MAX(CNRM,TMP)
  120 CONTINUE
  140 CONTINUE
      ICYC = 0
C
C     ***************
C     INITIATE MINIMIZATION WITH NEW PENALTY PARAMETER VALUE.
C     INITIALIZE INDEX VECTOR AND THE FACTORS  ZZ  AND  DD.
C     ***************
C
  160 CONTINUE
      INIT = .TRUE.
      FAIL = .FALSE.
      ALPHA = ZERO
      PTAX = PTA - 1
      K = 0
      DO 180 I = 1, MPL
         IDKS = IPRES + I - 1
         W(IDKS) = E02GBJ(N,E(1,I),1,X,1,N,N) - F(I)
         PTAX = PTAX + 1
         W(PTAX) = ZERO
         INDX(I) = I
  180 CONTINUE
C
C     ***************
C     BEGINNING OF CYCLE.  DETERMINE ACTIVE EQUATIONS AND
C     CONSTRAINTS.  COMPUTE RESIDUALS, FUNCTION VALUE
C     AND THE RESTRICTED GRADIENT.
C     ***************
C
  200 CONTINUE
      CALL E02GBY(KCNT,K,MPL,F,W(IPRES),INDX,ALPHA,W(PTA),MPL1)
      IF (KCNT.GT.K) CALL E02GBX(KCNT,K,N,W(IPZZ),IZR,MPL1,W(IPDD),
     *                           W(IPRR),E,IER,IRR,X,F,W(IPRES),INDX,
     *                           PSW,W(TOP),2*N)
      CALL E02GBV(L,M,N,E,IER,MPL1,W(IPRES),W(GRD),PEN,EL1N,PENPAR)
      GN = DNRM2(N,W(GRD),1)
C
C     ***************
C     IF THERE IS A SIGNIFICANT INCREASE IN THE PENALTY FUNCTION
C     VALUE
C     COMPARED WITH THE BEST PREVIOUS CYCLE, RECOVER THE BEST
C     PREVIOUS
C     X AND TERMINATE.
C     ***************
C
      IF (INIT) GO TO 220
      IF (PEN.GT.OLDPEN+ABS(OLDPEN/OCT)+4.0D0*EPS) GO TO 600
      IF (PEN.GE.OLDPEN) GO TO 240
  220 CONTINUE
      INIT = .FALSE.
      OLDPEN = PEN
      CALL E02GBK(N,ONE,X,W(OX))
  240 CONTINUE
C
C     ***************
C     PROJECT THE RESTRICTED GRADIENT TO OBTAIN A DESCENT
C     DIRECTION VECTOR P.  DETERMINE WHETHER  P  IS ZERO.
C     IF  P  IS ZERO, GO ELSEWHERE TO CHECK FOR TERMINATION
C     AND OBTAIN AN ALTERNATE DESCENT DIRECTION VECTOR  P.
C     SPECIAL ATTENTION IS PAID TO THE CASE IN WHICH
C     THE RESTRICTED GRADIENT ITSELF IS ZERO.
C     ***************
C
      CALL E02GBS(K,N,W(IPZZ),IZR,N,W(IPDD),W(GRD),W(P),W(TOP))
      CALL E02GBK(N,-ONE,W(P),W(P))
      PN = DNRM2(N,W(P),1)
      PSW = .FALSE.
      IF (IPRINT.LE.0) GO TO 260
      IF (MOD(ICYC,IPRINT).EQ.0) PSW = .TRUE.
      IF (PSW) CALL MONIT(N,X,ICYC,K,EL1N)
C
  260 IF (IPRINT.GE.0) PSW = .TRUE.
      ICYC = ICYC + 1
      IF (ICYC.GT.MXS) GO TO 560
      IF (PN.LE.EPS*GN .OR. GN.LE.EPS*(ANRM*PENPAR+CNRM)) GO TO 280
      GO TO 400
C
C     ***************
C     PROJECTION OF THE RESTRICTED GRADIENT IS ZERO. NO PROGRESS CAN
C     BE MADE UNLESS ONE OR MORE EQUATIONS/CONSTRAINTS ARE
C     DEACTIVATED.
C     ***************
C
  280 CONTINUE
C
C     ***************
C     DETERMINE THE REPRESENTATION OF THE RESTRICTED GRADIENT AS
C     A LINEAR COMBINATION OF THE ACTIVE EQUATION/CONSTRAINT
C     COLUMNS.
C     ***************
C
      CALL E02GBT(K,N,W(IPZZ),IZR,IRR,W(IPRR),W(GRD),W(COEF),FAIL)
      IF (FAIL) GO TO 580
C
C     ***************
C     FIND THE COEFFICIENT OF LARGEST MAGNITUDE
C     CORRESPONDING TO AN ACTIVE EQUATION COLUMN
C     AND THE MOST NEGATIVE COEFFICIENT CORRESPONDING
C     TO AN ACTIVE CONSTRAINT COLUMN.
C     ***************
C
      IXMAG = 0
      IXMIN = 0
      CFMAG = ZERO
      CFMIN = ZERO
      IF (1.GT.K) GO TO 340
      DO 320 I = 1, K
         IX = INDX(I)
         COEFX = COEF0 + I
         TMP = W(COEFX)
         IF (IX.GT.M) GO TO 300
         TMP = TMP/PENPAR
         IF (ABS(TMP).LE.CFMAG .AND. IXMAG.GT.0) GO TO 320
         IXMAG = I
         S = 1.0D0
         IF (TMP.NE.0.0D0) S = SIGN(ONE,TMP)
         CFMAG = ABS(TMP)
         GO TO 320
  300    CONTINUE
         IF (TMP.GE.CFMIN .AND. IXMIN.GT.0) GO TO 320
         IXMIN = I
         CFMIN = TMP
  320 CONTINUE
  340 CONTINUE
      IF (CFMAG.LE.ONE+EPS .OR. IXMAG.LE.0) GO TO 360
C
C     ***************
C     AT LEAST ONE EQUATION-COEFFICIENT IS GREATER THAN
C     ONE IN MAGNITUDE.  THE POINT  X  IS NOT OPTIMAL.
C     PROJECT THE EQUATION-COLUMN CORRESPONDING TO
C     THE COEFFICIENT OF LARGEST MAGNITUDE TO
C     OBTAIN P.
C     ***************
C
      IX = INDX(IXMAG)
      CALL E02GBZ(K,N,W(IPZZ),IZR,MPL1,W(IPDD),W(IPRR),IRR,INDX,IXMAG)
      CALL E02GBS(K,N,W(IPZZ),IZR,N,W(IPDD),E(1,IX),W(P),W(TOP))
      CALL E02GBK(N,-S,W(P),W(P))
      CALL E02GBL(N,-PENPAR*S,E(1,IX),W(GRD))
      PN = DNRM2(N,W(P),1)
      GO TO 400
  360 CONTINUE
      IF (IXMIN.GT.0 .AND. CFMIN.LT.(-EPS)) GO TO 380
      GO TO 460
C
C     ***************
C     AT THIS POINT ALL EQUATION-COEFFICIENTS ARE LESS THAN
C     ONE IN MAGNITUDE, BUT SOME CONSTRAINT-COEFFICIENT IS
C     NEGATIVE.  THE POINT  X  IS NOT OPTIMAL.
C     PROJECT THE CONSTRAINT-COLUMN CORRESPONDING TO THE
C     MOST NEGATIVE COEFFICIENT TO OBTAIN  P.
C     ***************
C
  380 CONTINUE
      IX = INDX(IXMIN)
      CALL E02GBZ(K,N,W(IPZZ),IZR,MPL1,W(IPDD),W(IPRR),IRR,INDX,IXMIN)
      CALL E02GBS(K,N,W(IPZZ),IZR,N,W(IPDD),E(1,IX),W(P),W(TOP))
  400 CONTINUE
C
C     ***************
C     AT THIS LOCATION IN THE PROGRAM A DESCENT
C     DIRECTION  P  HAS BEEN GENERATED.
C     DETERMINE WHICH EQUATIONS/CONSTRAINTS IN
C     WHAT ORDER WILL BE INTERSECTED DURING TRAVEL
C     FROM THE POINT  X  IN THE DIRECTION  P.
C     ***************
C
      CALL E02GBU(K,MPL,N,NUM,E,IER,MPL1,W(IPRES),W(P),W(PTA),INDX,
     *            W(ALF))
      IF (NUM.LE.0) GO TO 460
C
C     ***************
C     TRAVEL ALONG  P  UNTIL NO FURTHER DECREASE IN THE
C     PENALTY FUNCTION IS POSSIBLE
C     ***************
C
      KP1 = K + 1
      IIN = NUM
      DO 420 I = 1, NUM
         IX = INDX(KP1)
         TMP = -1
         IDKS = IX + IPRES - 1
         IF (W(IDKS).NE.0.0D0) TMP = -SIGN(ONE,W(IDKS))
         IF (IX.LE.M) TMP = TMP*PENPAR*TWO
         CALL E02GBL(N,TMP,E(1,IX),W(GRD))
         PTG = E02GBJ(N,W(GRD),1,W(P),1,N,N)
         GN = DNRM2(N,W(GRD),1)
         IF (PTG.GE.(-EPS*GN*PN)) GO TO 440
         CALL E02GBM(.FALSE.,IIN,INDX(KP1),W(ALF),MPL1-K)
  420 CONTINUE
      GO TO 520
  440 CONTINUE
      ALPHA = W(ALF)
      CALL E02GBX(KP1,K,N,W(IPZZ),IZR,MPL1,W(IPDD),W(IPRR),E,IER,IRR,X,
     *            F,W(IPRES),INDX,PSW,W(TOP),2*N)
      CALL E02GBL(N,ALPHA,W(P),X)
C
C     ***************
C     GO BACK TO THE BEGINNING OF THE ITERATION CYCLE
C     ***************
C
      GO TO 200
C
C     ***************
C     THE VARIOUS KINDS OF TERMINATION ARE HANDLED BELOW.
C     ***************
C
  460 CONTINUE
C
C     ************
C     CHECK FOR FEASIBILITY
C     ************
      IF (L.LE.0) GO TO 500
      DO 480 I = MP1, MPL
         IDKS = IPRES + I - 1
         IF (W(IDKS).LT.(-EPS*ABS(F(I)))) GO TO 520
  480 CONTINUE
  500 CONTINUE
      IFAIL = 0
      IF (PSW) CALL MONIT(N,X,ICYC,K,EL1N)
      RETURN
C
C     ***************
C     IN THE CODE BELOW  X  IS INFEASIBLE.
C     CHANGE THE PENALTY PARAMETER
C     AND RETURN TO THE INITIATION OF MINIMIZATION
C     IF  (PENALTY-PARAMETER)*(A-NORM)  IS NOT
C     NEGLIGIBLE COMPARED TO  EPS*(C-NORM)
C     OTHERWISE SET  IFAIL  TO INDICATE
C     INFEASIBILITY AND TERMINATE
C     ***************
C
  520 CONTINUE
      PENPAR = PENPAR/OCT
      IF (PENPAR*ANRM.LE.EPS*CNRM) GO TO 540
      GO TO 160
  540 CONTINUE
      IF (PSW) CALL MONIT(N,X,ICYC,K,EL1N)
      IFAIL = P01ABF(ISAVE,1,SRNAME,0,P01REC)
      RETURN
  560 CONTINUE
      IF (PSW) CALL MONIT(N,X,ICYC,K,EL1N)
      IFAIL = P01ABF(ISAVE,2,SRNAME,0,P01REC)
      RETURN
  580 CONTINUE
      IF (PSW) CALL MONIT(N,X,ICYC,K,EL1N)
      IFAIL = P01ABF(ISAVE,3,SRNAME,0,P01REC)
      RETURN
  600 CONTINUE
      K = 0
      CALL E02GBK(N,ONE,W(OX),X)
      CALL E02GBY(KCNT,K,MPL1,F,W(IPRES),INDX,ALPHA,W(PTA),MPL1)
      IF (KCNT.GT.K) CALL E02GBX(KCNT,K,N,W(IPZZ),IZR,MPL1,W(IPDD),
     *                           W(IPRR),E,IER,IRR,X,F,W(IPRES),INDX,
     *                           PSW,W(TOP),2*N)
      CALL E02GBV(L,M,N,E,IER,MPL1,W(IPRES),W(GRD),PEN,EL1N,PENPAR)
      IF (PSW) CALL MONIT(N,X,ICYC,K,EL1N)
      IFAIL = P01ABF(ISAVE,3,SRNAME,0,P01REC)
      RETURN
      END
