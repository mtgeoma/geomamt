      SUBROUTINE E04MBY(LP,MINSUM,NAMED,ORTHOG,UNITQ,VERTEX,INFORM,ITER,
     *                  ITMAX,LCRASH,N,NCLIN,NCTOTL,NROWA,NACTIV,NFREE,
     *                  NUMINF,ISTATE,KACTIV,KFREE,OBJ,XNORM,A,AX,BL,BU,
     *                  CLAMDA,CVEC,FEATOL,X,IW,LIW,W,LW)
C     MARK 12 RE-ISSUE. NAG COPYRIGHT 1986.
C
C *********************************************************************
C     E04MBY FINDS A FEASIBLE POINT FOR THE GENERAL LINEAR CONSTRAINTS
C     AND BOUNDS. THE SUM OF THE INFEASIBILITIES IS MINIMIZED USING
C     A LINEAR PROGRAMMING ALGORITHM WHICH MAY PERFORM NON-SIMPLEX
C     STEPS. AT EACH ITERATION THE DIRECTION OF SEARCH IS DEFINED AS
C     THE PROJECTION OF THE STEEPEST-DESCENT DIRECTION. THIS
C     PROJECTION IS COMPUTED USING AN ORTHOGONAL FACTORIZATION OF THE
C     MATRIX OF CONSTRAINTS IN THE WORKING SET.
C
C     IF  LP = .TRUE.,  E04MBY WILL SOLVE THE LINEAR PROGRAMMING PROBLEM
C     DEFINED BY THE OBJECTIVE CVEC, THE CONSTRAINT MATRIX  A  AND THE
C     BOUNDS  BL, BU.
C
C     VALUES OF ISTATE(J)....
C
C     - 2         - 1         0           1          2         3
C     A*X LT BL   A*X GT BU   A*X FREE   A*X = BL   A*X = BU   BL = BU
C
C     IF  VERTEX = .TRUE.,  THE INITIAL POINT  X  WILL BE MADE INTO A
C     VERTEX BY REGARDING SOME OF THE FREE VARIABLES  X(J)  AS BEING
C     ON AN TEMPORARY BOUND.  SOME OF THESE VARIABLES MAY REMAIN ON
C     THEIR TEMPORARY BOUNDS.  IF SO, THEIR STATE WILL BE
C     ISTATE(J) = 4 .
C
C     SYSTEMS OPTIMIZATION LABORATORY, STANFORD UNIVERSITY.
C     VERSION 1.0. DECEMBER 1981.
C     VERSION 2.0.     JUNE 1982.
C     VERSION 3.0.  OCTOBER 1982.
C     VERSION 3.2.  APRIL   1984.
C
C     COPYRIGHT  1982  STANFORD UNIVERSITY.
C
C THIS MATERIAL MAY BE REPRODUCED BY OR FOR THE U.S. GOVERNMENT PURSU-
C ANT TO THE COPYRIGHT LICENSE UNDER DAR CLAUSE 7-104.9(A) (1979 MAR).
C
C THIS MATERIAL IS BASED UPON WORK PARTIALLY SUPPORTED BY THE NATIONAL
C     SCIENCE FOUNDATION UNDER GRANTS MCS-7926009 AND ECS-8012974; THE
C     DEPARTMENT OF ENERGY CONTRACT AM03-76SF00326, PA NO. DE-AT03-
C     76ER72018; AND THE ARMY RESEARCH OFFICE CONTRACT DAA29-79-C-0110.
C
C *********************************************************************
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION  OBJ, XNORM
      INTEGER           INFORM, ITER, ITMAX, LCRASH, LIW, LW, N, NACTIV,
     *                  NCLIN, NCTOTL, NFREE, NROWA, NUMINF
      LOGICAL           LP, MINSUM, NAMED, ORTHOG, UNITQ, VERTEX
C     .. Array Arguments ..
      DOUBLE PRECISION  A(NROWA,N), AX(NROWA), BL(NCTOTL), BU(NCTOTL),
     *                  CLAMDA(NCTOTL), CVEC(N), FEATOL(NCTOTL), W(LW),
     *                  X(N)
      INTEGER           ISTATE(NCTOTL), IW(LIW), KACTIV(N), KFREE(N)
C     .. Scalars in Common ..
      DOUBLE PRECISION  ASIZE, DTMAX, DTMIN
      INTEGER           ISTART, LENNAM, MSG, NCOLRT, NOUT, NQ, NROWRT
C     .. Arrays in Common ..
      DOUBLE PRECISION  PARM(10), WMACH(15)
      INTEGER           LOCLP(15)
C     .. Local Scalars ..
      DOUBLE PRECISION  ALFA, ANORM, ATPHIT, BIGALF, BIGBND, BIGDX, BND,
     *                  CONDMX, CONDT, CSLAST, DINKY, EPSMCH, EPSPT9,
     *                  FEAMAX, FEAMIN, FLMAX, GFNORM, GTP, OBJLP,
     *                  OBJSIZ, ONE, PALFA, PNORM, RDLAST, SMLLST,
     *                  SNLAST, SUMINF, TOLACT, TRULAM, WGFIX, ZERO,
     *                  ZTGNRM
      INTEGER           IADD, IDUMMY, IFIX, IS, ISDEL, JADD, JBIGST,
     *                  JDEL, JSMLST, KB, KBIGST, KDEL, KGFIX, KSMLST,
     *                  LANORM, LAP, LNAMES, LPX, LQTG, LRLAM, LROWA,
     *                  LRT, LWRK, LZY, MSGLVL, MSTALL, NCLIN0, NCNLN,
     *                  NCOLZ, NDEL, NFIXED, NROWJ, NSTALL
      LOGICAL           ADDED, DELETE, FIRSTV, HITLOW, IFAIL, MODFYG,
     *                  NULLR, PRNT, STALL, UNITPG
      CHARACTER*2       LPROB
C     .. Local Arrays ..
      CHARACTER*60      REC(3)
C     .. External Functions ..
      DOUBLE PRECISION  F06BLF, DDOT, DNRM2
      EXTERNAL          F06BLF, DDOT, DNRM2
C     .. External Subroutines ..
      EXTERNAL          E04MBU, E04MBV, E04MBX, E04MBZ, E04VDN, E04VDQ,
     *                  E04VDS, E04VDT, E04VDU, E04VDW, E04VDZ, F06FBF,
     *                  F06FLF, DAXPY, X04BAF
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX
C     .. Common blocks ..
      COMMON            /AE04VC/NOUT, MSG, ISTART
      COMMON            /AX02ZA/WMACH
      COMMON            /BE04VC/LENNAM, NROWRT, NCOLRT, NQ
      COMMON            /CE04VC/PARM
      COMMON            /DE04VC/LOCLP
      COMMON            /HE04VC/ASIZE, DTMAX, DTMIN
C     .. Save statement ..
      SAVE              /AX02ZA/
C     .. Data statements ..
      DATA              ZERO, ONE/0.0D+0, 1.0D+0/
      DATA              LPROB/'LP'/
C     .. Executable Statements ..
C
C     SPECIFY MACHINE-DEPENDENT PARAMETERS.
C
      EPSMCH = WMACH(3)
      FLMAX = WMACH(7)
C
      LNAMES = LOCLP(1)
      LANORM = LOCLP(4)
      LAP = LOCLP(5)
      LPX = LOCLP(6)
      LQTG = LOCLP(7)
      LRLAM = LOCLP(8)
      LRT = LOCLP(9)
      LZY = LOCLP(10)
      LWRK = LOCLP(11)
C
C     INITIALIZE
C
      NCNLN = 0
      NCLIN0 = MAX(NCLIN,1)
      NROWJ = 1
C
      INFORM = 0
      ITER = 0
      JADD = 0
      JDEL = 0
      LROWA = NROWA*(N-1) + 1
      NDEL = 0
      NSTALL = 0
      NUMINF = 1
C
      MSGLVL = MSG
      MSG = 0
      IF (ITER.GE.ISTART) MSG = MSGLVL
C
      BIGBND = PARM(1)
      BIGDX = PARM(2)
      TOLACT = PARM(3)
      EPSPT9 = PARM(4)
C
      ALFA = ZERO
      CONDMX = FLMAX
      OBJLP = ZERO
C
      ADDED = .TRUE.
      FIRSTV = .FALSE.
      MODFYG = .TRUE.
      NULLR = .TRUE.
      UNITPG = .FALSE.
C
      CALL F06FLF(NCTOTL,FEATOL,1,FEAMAX,FEAMIN)
C
C ---------------------------------------------------------------------
C     GIVEN AN INITIAL POINT  X, COMPUTE THE FOLLOWING.....
C     (1) THE INITIAL WORKING SET.
C     (2) THE  TQ  FACTORIZATION OF THE MATRIX OF CONSTRAINTS IN THE
C      WORKING SET.
C     (3) THE VALUE AND GRADIENT OF THE SUM OF INFEASIBILITIES AT THE
C      POINT X.  IF  X  IS FEASIBLE AND THE SOLUTION OF AN LP IS
C      REQUIRED, THE LINEAR OBJECTIVE FUNCTION AND GRADIENT IS
C      COMPUTED.
C
C     THE ARRAY  RLAMDA  IS USED AS TEMPORARY WORK SPACE.
C ---------------------------------------------------------------------
      CALL E04MBX(ORTHOG,UNITQ,VERTEX,LCRASH,N,NCLIN,NCLIN0,NCTOTL,NQ,
     *            NROWA,NROWRT,NCOLRT,NACTIV,NCOLZ,NFREE,ISTATE,KACTIV,
     *            KFREE,BIGBND,TOLACT,XNORM,A,W(LANORM),AX,BL,BU,X,
     *            W(LQTG),W(LRT),W(LZY),W(LPX),W(LWRK),W(LRLAM))
C
      CALL E04MBV(LP,N,NCTOTL,NROWA,BIGBND,FEAMIN,NUMINF,SUMINF,ISTATE,
     *            A,BL,BU,CVEC,FEATOL,W(LQTG),X)
C
      CALL E04VDN(6,N,NACTIV,NCOLZ,NFREE,NQ,UNITQ,KACTIV,KFREE,W(LQTG),
     *            W(LZY),W(LWRK))
C
      OBJ = SUMINF
      IF (LP) OBJLP = DDOT(N,CVEC,1,X,1)
      IF (LP .AND. NUMINF.EQ.0) OBJ = OBJLP
C
      IF (NUMINF.EQ.0 .AND. .NOT. LP) GO TO 320
C
C .......................START OF THE MAIN LOOP........................
C
C     DEFINE SMALL QUANTITIES THAT REFLECT THE MAGNITUDE OF  C,  X,
C     AND THE NORM OF THE CONSTRAINTS IN THE WORKING SET.
C
   20 OBJSIZ = (ONE+ABS(OBJ))/(ONE+XNORM)
      IF (NUMINF.EQ.0) OBJSIZ = (EPSMCH+ABS(OBJ))/(EPSMCH+XNORM)
      ANORM = ZERO
      IF (NACTIV.GT.0) ANORM = ABS(DTMAX)
      DINKY = EPSPT9*MAX(ANORM,OBJSIZ)
C
C     COMPUTE THE NORMS OF THE PROJECTED GRADIENT AND THE GRADIENT WITH
C     RESPECT TO THE FREE VARIABLES.
C
      ZTGNRM = ZERO
      IF (NCOLZ.GT.0) ZTGNRM = DNRM2(NCOLZ,W(LQTG),1)
      GFNORM = ZTGNRM
      IF (NFREE.GT.0 .AND. NACTIV.GT.0) GFNORM = DNRM2(NFREE,W(LQTG),1)
C
      IF (MSG.GE.80) THEN
         WRITE (REC,FMT=99999) ZTGNRM, DINKY
         CALL X04BAF(NOUT,REC(1))
         CALL X04BAF(NOUT,REC(2))
         CALL X04BAF(NOUT,REC(3))
      END IF
      DELETE = ZTGNRM .LE. DINKY
C
C     PRINT THE DETAILS OF THIS ITERATION.
C
      PRNT = ADDED .OR. NDEL .GT. 1
      IF ( .NOT. PRNT) GO TO 40
C
      CONDT = F06BLF(DTMAX,DTMIN,IFAIL)
      IF (IFAIL .AND. DTMAX.EQ.ZERO) CONDT = FLMAX
C
      CALL E04MBU(LP,NROWA,NROWRT,NCOLRT,N,NCLIN,NCLIN0,NCTOTL,NFREE,
     *            ISDEL,NACTIV,NCOLZ,ITER,JADD,JDEL,ALFA,CONDT,NUMINF,
     *            SUMINF,OBJLP,ISTATE,KFREE,A,W(LRT),X,W(LWRK),W(LAP))
C
      ADDED = .FALSE.
      JADD = 0
      JDEL = 0
C
   40 IF (NUMINF.EQ.0 .AND. .NOT. LP) GO TO 320
      IF ( .NOT. DELETE) GO TO 100
C
C ---------------------------------------------------------------------
C     THE PROJECTED GRADIENT IS NEGLIGIBLE.
C     WE HAVE TO DELETE A CONSTRAINT BEFORE A MOVE CAN BE MADE.
C ---------------------------------------------------------------------
      CALL E04VDS(LPROB,N,NCLIN0,NCTOTL,NACTIV,NCOLZ,NFREE,NROWA,NROWRT,
     *            NCOLRT,JSMLST,KSMLST,SMLLST,ISTATE,KACTIV,A,W(LANORM),
     *            W(LQTG),W(LRLAM),W(LRT))
C
C ---------------------------------------------------------------------
C     TEST FOR CONVERGENCE.  IF THE LEAST (ADJUSTED) MULTIPLIER IS
C     GREATER THAN A SMALL NEGATIVE QUANTITY, AN ADEQUATE  LP  SOLUTION
C     HAS BEEN FOUND.
C ---------------------------------------------------------------------
      IF (SMLLST.GE.(-DINKY)) JSMLST = 0
      IF (JSMLST.EQ.0) GO TO 60
      IF (VERTEX .AND. NCOLZ.GE.1) GO TO 60
C
C     PREPARE TO DELETE THE CONSTRAINT WITH INDEX  JSMLST.
C
      JDEL = JSMLST
      KDEL = KSMLST
      ISDEL = ISTATE(JDEL)
      ISTATE(JDEL) = 0
      GO TO 80
C
C ---------------------------------------------------------------------
C     IF STILL INFEASIBLE, WE CAN REDUCE THE SUM OF INFEASIBILITIES
C     IF THERE IS A MULTIPLIER GREATER THAN ONE.
C ---------------------------------------------------------------------
C     INSTEAD OF LOOKING FOR THE LAST VIOLATED CONSTRAINT IN E04VDW,
C     WE MUST NOW LOOK FOR THE FIRST VIOLATED CONSTRAINT ALONG  P.
C     THIS WILL ENSURE THAT THE WEIGHTED SUM OF INFEASIBILITIES
C     DECREASES.
C
   60 IF (NUMINF.EQ.0 .OR. .NOT. MINSUM) GO TO 280
C
C     FIND THE BIGGEST MULTIPLIER LARGER THAN UNITY.
C     FOR THE PURPOSES OF THE TEST,  THE  J-TH  MULTIPLIER IS SCALED
C     BY  FEATOL(J)/FEAMIN.  THIS FORCES CONSTRAINTS WITH LARGER  FEATOL
C     VALUES TO BE DELETED FIRST.
C
      CALL E04MBZ(N,NACTIV,NCTOTL,NFREE,JBIGST,KBIGST,ISTATE,KACTIV,
     *            DINKY,FEAMIN,TRULAM,FEATOL,W(LRLAM))
C
      IF (JBIGST.EQ.0) GO TO 280
      JDEL = JBIGST
      KDEL = KBIGST
      ISDEL = ISTATE(JBIGST)
      IF (TRULAM.LE.ZERO) IS = -1
      IF (TRULAM.GT.ZERO) IS = -2
      ISTATE(JBIGST) = IS
      FIRSTV = .TRUE.
C
C ---------------------------------------------------------------------
C     UPDATE THE  TQ  FACTORIZATION OF THE MATRIX OF CONSTRAINTS IN THE
C     WORKING SET.
C ---------------------------------------------------------------------
   80 NDEL = NDEL + 1
      CALL E04VDU(MODFYG,ORTHOG,UNITQ,JDEL,KDEL,NACTIV,NCOLZ,NFREE,N,NQ,
     *            NROWA,NROWRT,NCOLRT,KACTIV,KFREE,A,W(LQTG),W(LRT),
     *            W(LZY))
C
      NCOLZ = NCOLZ + 1
      IF (JDEL.LE.N) NFREE = NFREE + 1
      IF (JDEL.GT.N) NACTIV = NACTIV - 1
      GO TO 20
C
C ---------------------------------------------------------------------
C     COMPUTE THE SEARCH DIRECTION,  P = - Z*(PROJECTED GRADIENT).
C ---------------------------------------------------------------------
  100 IF (ITER.GE.ITMAX) GO TO 400
      ITER = ITER + 1
      IF (ITER.GE.ISTART) MSG = MSGLVL
C
      CALL E04VDT(NULLR,UNITPG,UNITQ,N,NCLIN,NCLIN0,NCTOTL,NQ,NROWA,
     *            NROWRT,NCOLRT,NCOLZ,NCOLZ,NFREE,ISTATE,KFREE,DINKY,
     *            GTP,PNORM,RDLAST,ZTGNRM,A,W(LAP),W(LPX),W(LQTG),W(LRT)
     *            ,W(LWRK),W(LZY),W(LWRK))
C
C ---------------------------------------------------------------------
C     FIND THE CONSTRAINT WE BUMP INTO ALONG  P.
C     UPDATE  X  AND  AX  IF THE STEP  ALFA  IS NONZERO.
C ---------------------------------------------------------------------
C
C     ALFA  IS INITIALIZED TO  BIGALF.  IF IT REMAINS THAT WAY AFTER
C     THE CALL TO E04VDW, IT WILL BE REGARDED AS INFINITE.
C
      BIGALF = F06BLF(BIGDX,PNORM,IFAIL)
      IF (IFAIL .AND. BIGDX.EQ.ZERO) BIGALF = FLMAX
C
      CALL E04VDW(FIRSTV,HITLOW,ISTATE,INFORM,JADD,N,NROWA,NCLIN,NCLIN0,
     *            NCTOTL,NUMINF,ALFA,PALFA,ATPHIT,BIGALF,BIGBND,PNORM,
     *            W(LANORM),W(LAP),AX,BL,BU,FEATOL,W(LPX),X)
C
      IF (INFORM.NE.0 .OR. JADD.EQ.0) GO TO 300
C
C     TEST IF  ALFA*PNORM  IS NEGLIGIBLE.
C
      STALL = ABS(ALFA*PNORM) .LE. EPSPT9*XNORM
      IF ( .NOT. STALL) GO TO 120
C
C     TAKE A ZERO STEP.
C     IF A NON-ORTHOGONAL  TQ  FACTORIZATION IS BEING RECURRED AND  X
C     IS NOT YET FEASIBLE,  THE GRADIENT OF THE SUM OF INFEASIBILITIES
C     MUST BE RECOMPUTED.
C
      ALFA = ZERO
      NSTALL = NSTALL + 1
      MSTALL = 50
      IF (NSTALL.LE.MSTALL .AND. ORTHOG) GO TO 160
      IF (NSTALL.LE.MSTALL .AND. .NOT. ORTHOG) GO TO 140
      GO TO 380
C
C     CHANGE  X  TO  X + ALFA*P.  UPDATE  AX  ALSO.
C
  120 NSTALL = 0
C
      CALL DAXPY(N,ALFA,W(LPX),1,X,1)
      IF (NCLIN.GT.0) CALL DAXPY(NCLIN,ALFA,W(LAP),1,AX,1)
C
      XNORM = DNRM2(N,X,1)
C
      IF (LP) OBJLP = DDOT(N,CVEC,1,X,1)
C
C     IF  X  IS NOT YET FEASIBLE,  COMPUTE  OBJ  AND  GRAD  AS THE VALUE
C     AND GRADIENT OF THE SUM OF INFEASIBILITIES (IF  X  IS FEASIBLE,
C     THE VECTOR  QTG  IS UPDATED AND  GRAD  NEED NOT BE COMPUTED).
C
  140 IF (NUMINF.EQ.0) GO TO 160
C
      CALL E04MBV(LP,N,NCTOTL,NROWA,BIGBND,FEAMIN,NUMINF,SUMINF,ISTATE,
     *            A,BL,BU,CVEC,FEATOL,W(LQTG),X)
C
      KGFIX = LQTG + JADD - 1
      IF ( .NOT. ORTHOG .AND. JADD.LE.N) WGFIX = W(KGFIX)
C
      CALL E04VDN(6,N,NACTIV,NCOLZ,NFREE,NQ,UNITQ,KACTIV,KFREE,W(LQTG),
     *            W(LZY),W(LWRK))
C
      OBJ = SUMINF
C
C ---------------------------------------------------------------------
C     ADD A CONSTRAINT TO THE WORKING SET.
C ---------------------------------------------------------------------
C     UPDATE  ISTATE.
C
  160 IF (LP .AND. NUMINF.EQ.0) OBJ = OBJLP
      IF (HITLOW) ISTATE(JADD) = 1
      IF ( .NOT. HITLOW) ISTATE(JADD) = 2
      IF (BL(JADD).EQ.BU(JADD)) ISTATE(JADD) = 3
C
C     IF A BOUND IS TO BE ADDED, MOVE  X  EXACTLY ONTO IT, EXCEPT WHEN
C     A NEGATIVE STEP WAS TAKEN.  (E04VDW  MAY HAVE HAD TO MOVE TO SOME
C     OTHER CLOSER CONSTRAINT.)
C
      IADD = JADD - N
      IF (JADD.GT.N) GO TO 200
      IF (HITLOW) BND = BL(JADD)
      IF ( .NOT. HITLOW) BND = BU(JADD)
      IF (ALFA.GE.ZERO) X(JADD) = BND
C
      DO 180 IFIX = 1, NFREE
         IF (KFREE(IFIX).EQ.JADD) GO TO 200
  180 CONTINUE
C
C     UPDATE THE  TQ  FACTORS OF THE MATRIX OF CONSTRAINTS IN THE
C     WORKING SET.  USE THE ARRAY  P  AS WORK SPACE.
C
  200 ADDED = .TRUE.
      NDEL = 0
      CALL E04VDZ(MODFYG,.FALSE.,ORTHOG,UNITQ,INFORM,IFIX,IADD,JADD,
     *            NACTIV,NCOLZ,NCOLZ,NFREE,N,NQ,NROWA,NROWRT,NCOLRT,
     *            KFREE,CONDMX,CSLAST,SNLAST,A,W(LQTG),W(LRT),W(LZY),
     *            W(LWRK),W(LPX))
C
      NCOLZ = NCOLZ - 1
      NFIXED = N - NFREE
      IF (NFIXED.EQ.0) GO TO 240
      KB = NACTIV + NFIXED
      DO 220 IDUMMY = 1, NFIXED
         KACTIV(KB+1) = KACTIV(KB)
         KB = KB - 1
  220 CONTINUE
  240 IF (JADD.GT.N) GO TO 260
C
C     ADD A BOUND.  IF STABILIZED ELIMINATIONS ARE BEING USED TO UPDATE
C     THE  TQ  FACTORIZATION,  RECOMPUTE THE COMPONENT OF THE GRADIENT
C     CORRESPONDING TO THE NEWLY FIXED VARIABLE.
C
      NFREE = NFREE - 1
      KACTIV(NACTIV+1) = JADD
      IF (ORTHOG) GO TO 20
C
      KGFIX = LQTG + NFREE
      IF (LP .AND. NUMINF.EQ.0) W(KGFIX) = CVEC(JADD)
      IF (NUMINF.GT.0) W(KGFIX) = WGFIX
      GO TO 20
C
C     ADD A GENERAL LINEAR CONSTRAINT.
C
  260 NACTIV = NACTIV + 1
      KACTIV(NACTIV) = IADD
      GO TO 20
C
C .........................END OF MAIN LOOP............................
C
C
C     NO CONSTRAINTS TO DROP.
C
  280 IF (NUMINF.GT.0) GO TO 340
      GO TO 320
C
C     ERROR IN  E04VDW  --  PROBABLY UNBOUNDED LP.
C
  300 IF (NUMINF.EQ.0) GO TO 360
      GO TO 340
C
C     FEASIBLE SOLUTION FOUND, OR OPTIMAL LP SOLUTION.
C
  320 INFORM = 0
      GO TO 420
C
C     THE LINEAR CONSTRAINTS AND BOUNDS APPEAR TO BE INFEASIBLE.
C
  340 INFORM = 1
      GO TO 420
C
C     UNBOUNDED LP.
C
  360 INFORM = 2
      GO TO 420
C
C     TOO MANY ITERATIONS WITHOUT CHANGING  X.
C
  380 INFORM = 3
      GO TO 420
C
C     TOO MANY ITERATIONS.
C
  400 INFORM = 4
C
C ---------------------------------------------------------------------
C     PRINT FULL SOLUTION.  IF NECESSARY, RECOMPUTE THE MULTIPLIERS.
C ---------------------------------------------------------------------
  420 MSG = MSGLVL
      IF (MSG.GE.1) THEN
         WRITE (REC,FMT=99998) INFORM, ITER
         CALL X04BAF(NOUT,REC(1))
         CALL X04BAF(NOUT,REC(2))
      END IF
C
      IF (INFORM.GT.0) CALL E04VDS(LPROB,N,NCLIN0,NCTOTL,NACTIV,NCOLZ,
     *                             NFREE,NROWA,NROWRT,NCOLRT,JSMLST,
     *                             KSMLST,SMLLST,ISTATE,KACTIV,A,
     *                             W(LANORM),W(LQTG),W(LRLAM),W(LRT))
      IF ( .NOT. LP .AND. INFORM.EQ.0) CALL F06FBF(N,ZERO,W(LRLAM),1)
C
      CALL E04VDQ(NFREE,NROWA,NROWJ,N,NCLIN,NCNLN,NCTOTL,BIGBND,NAMED,
     *            IW(LNAMES),LENNAM,NACTIV,ISTATE,KACTIV,A,BL,BU,X,
     *            CLAMDA,W(LRLAM),X)
C
      RETURN
C
C
C     END OF E04MBY (LPCORE)
99999 FORMAT (/' //E04MBY//      ZTGNRM      DINKY',/' //E04MBY//',1P,
     *  2D11.2)
99998 FORMAT (/' EXIT LP PHASE.   INFORM =',I3,'   ITER =',I4)
      END
