      SUBROUTINE E04KBP(N,NFREE,MAXFUN,FM,RTOLSQ,TOLEPS,ENDEPS,STEPMX,
     *                  SFIRST,SFUN,MINLIN,X,BL,BU,F,ISTATE,G,GTG,GPJ,P,
     *                  HESL,LH,LHPROJ,HESD,BOUNDK,NFTOTL,LCOUNT,NWHY,
     *                  FINISH,IW,LIW,W,LW)
C
C     MARK 6 RELEASE NAG COPYRIGHT 1977
C     MARK 8 REVISED. IERS-238,245 (APR 1980).
C     MARK 11 REVISED. IER-437 (FEB 1984).
C     MARK 11A REVISED. IER-448 (JUN 1984).
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C     MARK 13 REVISED. USE OF MARK 12 X02 FUNCTIONS (APR 1988).
C     MARK 14 REVISED. IER-805 (DEC 1989).
C
C     **************************************************************
C
C     E04KBP (LOCDER) IS THE LOCAL SEARCH ROUTINE FOR E04KBN.
C
C     PHILIP E. GILL, WALTER MURRAY, SUSAN M. PICKEN, MARGARET H.
C     WRIGHT AND ENID M. R. LONG, D.N.A.C., NATIONAL PHYSICAL
C     LABORATORY, ENGLAND
C
C     **************************************************************
C
C     MINLIN, SFUN
C
C     A MACHINE-DEPENDENT CONSTANT IS SET HERE. EPSMCH IS THE
C     SMALLEST POSITIVE REAL NUMBER SUCH THAT 1 + EPSMCH .GT. 1.
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION  BOUNDK, ENDEPS, F, FM, GTG, RTOLSQ, SFIRST,
     *                  STEPMX, TOLEPS
      INTEGER           LCOUNT, LH, LHPROJ, LIW, LW, MAXFUN, N, NFREE,
     *                  NFTOTL, NWHY
      LOGICAL           FINISH
C     .. Array Arguments ..
      DOUBLE PRECISION  BL(N), BU(N), G(N), GPJ(N), HESD(N), HESL(LH),
     *                  P(N), W(LW), X(N)
      INTEGER           ISTATE(N), IW(LIW)
C     .. Subroutine Arguments ..
      EXTERNAL          MINLIN, SFUN
C     .. Local Scalars ..
      DOUBLE PRECISION  ALPHA, COND, EPS, EPS100, EPSA, EPSMCH, EPSR,
     *                  FNEW, GIS, GTP, OLDF, PEPS, PNORM, RTEPS, SNEG,
     *                  SP, SPOS, STEP, T, TNYTOL, TOLABS, TOLAX,
     *                  TOLREL, TOLRX, U, XNORM
      INTEGER           I, IFAIL, IFLAG, INEGLM, IS, ISY, ITG, ITGI,
     *                  ITX, ITXI, IY, IZ, IZI, J, JFIX, NUMF, NUMNEG
      LOGICAL           FAIL, LM1POS, RECALC
C     .. External Functions ..
      DOUBLE PRECISION  E04JBT, DDOT, F06BLF, X02AJF
      EXTERNAL          E04JBT, DDOT, F06BLF, X02AJF
C     .. External Subroutines ..
      EXTERNAL          E04JBS, E04JBU, E04JBY, E04KBS, E04KBT, E04KBU,
     *                  E04KBV, E04KBX, E04LBU
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX, SQRT
C     .. Executable Statements ..
      EPSMCH = X02AJF()
C
C     INITIALIZATION. SET PARAMETERS DEPENDENT ON EPSMCH AND COMPUTE
C     STARTING POSITIONS FOR SUBDIVISIONS OF WORKSPACE.
C
      LCOUNT = LCOUNT + 1
      RTEPS = SQRT(EPSMCH)
      PEPS = EPSMCH**0.6666D+0
      EPS100 = 1.0D+2*EPSMCH
      ITX = 3*N + 1
      IY = ITX
      IZ = ITX
      ITG = ITX + N
      OLDF = F
      FNEW = OLDF
      FINISH = .TRUE.
C
C     E04KBU FORMS THE SEARCH-DIRECTION VECTOR P, WITH NON-ZERO
C     ELEMENTS (CORRESPONDING TO THE FREE VARIABLES) OF + 1 OR - 1,
C     THAT GIVES THE MAXIMUM FEASIBLE POSITIVE STEP-LENGTH (SPOS)
C     FROM THE POINT X. IT THEN TRIES, BY TAKING A SERIES OF
C     INCREASING STEPS IN THE POSITIVE DIRECTION, TO FIND A FEASIBLE
C     POINT Y SUCH THAT F(Y) DIFFERS SIGNIFICANTLY FROM F(X). IN THE
C     SPECIAL CASE WHEN ONLY ONE VARIABLE, X(IS), IS FREE, IF EITHER
C     F(X + SPOS*P) IS TOO CLOSE TO F(X) OR F(Y) IS GREATER THAN
C     F(X), A FURTHER ATTEMPT IS MADE BY TAKING THE MAXIMUM FEASIBLE
C     STEP IN THE NEGATIVE DIRECTION.
C
C     THE SETTING OF IW(1), WHICH MUST NOT BE CHANGED, ENABLES THE
C     LIBRARY- USER TO DETERMINE FROM WHICH SUBROUTINE SFUN IS
C     CALLED.
C
      STEP = SFIRST
      IW(1) = -5
      IFLAG = 2
      CALL E04KBU(IFLAG,N,NFREE,EPS100,X,BL,BU,ISTATE,SFUN,STEP,FNEW,
     *            NFTOTL,P,W(IY),W(ITG),IS,IFAIL,IW,LIW,W,LW)
C
C     A NEGATIVE VALUE OF IFLAG INDICATES THAT THE USER WISHES TO
C     TERMINATE THE OPTIMIZATION.
C
      IF (IFLAG.GE.0) GO TO 20
      NWHY = IFLAG
      RETURN
C
C     A NON-ZERO VALUE OF IFAIL INDICATES THAT NO SUITABLE Y COULD
C     BE FOUND.
C
   20 IF (IFAIL.EQ.0) GO TO 40
      NWHY = IFAIL
      RETURN
C
C     CHECK THE NUMBER OF FUNCTION EVALUATIONS.
C
   40 IF (NFTOTL.LE.MAXFUN) GO TO 60
      NWHY = 2
      RETURN
   60 IF (NFREE.GT.1) GO TO 100
C
C     SPECIAL CASE WHEN ONLY X(IS) IS FREE. THE RE-EVALUATION OF THE
C     FUNCTION ENABLES THE LIBRARY-USER TO OBTAIN ADDITIONAL
C     INFORMATION AT THE NEW POINT.
C
      ISY = IY - 1 + IS
      X(IS) = W(ISY)
      IW(1) = 0
      IFLAG = 2
      CALL SFUN(IFLAG,N,X,F,G,IW,LIW,W,LW)
      NFTOTL = NFTOTL + 1
      IF (IFLAG.GE.0) GO TO 80
      NWHY = IFLAG
      RETURN
   80 GIS = G(IS)
      GTG = GIS*GIS
      NWHY = 0
      FINISH = .FALSE.
      RETURN
C
C     IN PREPARATION FOR THE FIRST LINEAR SEARCH, E04KBT FINDS A
C     VECTOR ORTHOGONAL TO (X - Y) AT THE POINT Y. IT THEN
C     CALCULATES SPOS AND SNEG AS THE MAXIMUM FEASIBLE STEP-LENGTHS
C     IN THE POSITIVE AND NEGATIVE DIRECTIONS RESPECTIVELY AND
C     COMPUTES THE SEARCH-DIRECTION P AS A FEASIBLE BUT SIGNIFICANT
C     SCALAR MULTIPLE OF THE ORTHOGONAL VECTOR.
C
  100 CALL E04KBT(N,NFREE,STEP,BL,BU,ISTATE,W(IY),P,SPOS,SNEG,IFAIL)
      IF (IFAIL.EQ.0) GO TO 120
      NWHY = IFAIL
      RETURN
  120 DO 320 J = 1, 2
C
C        THE FIRST LINEAR SEARCH, ALONG THE VECTOR COMPUTED BY E04KBT,
C        GIVES A NEW POINT Z.
C
         IF (J.EQ.1) GO TO 200
C
C        IN PREPARATION FOR THE SECOND LINEAR SEARCH, E04KBS COMPUTES
C        SPOS AND SNEG AS THE MAXIMUM FEASIBLE STEP-LENGTHS ALONG THE
C        VECTOR (X - Z) IN THE POSITIVE AND NEGATIVE DIRECTIONS
C        RESPECTIVELY FROM WHICHEVER OF THE POINTS X AND Z GIVES THE
C        LOWER FUNCTION VALUE.
C
         IZI = IZ
         DO 140 I = 1, N
            P(I) = X(I) - W(IZI)
            IZI = IZI + 1
  140    CONTINUE
         IF (FNEW.GT.OLDF) GO TO 160
         CALL E04KBS(N,W(IZ),BL,BU,ISTATE,P,W(ITX),SPOS,SNEG)
         GO TO 200
  160    FNEW = OLDF
         CALL E04KBS(N,X,BL,BU,ISTATE,P,W(ITX),SPOS,SNEG)
         ITGI = ITG
         DO 180 I = 1, N
            W(ITGI) = G(I)
            ITGI = ITGI + 1
  180    CONTINUE
C
C        A NEGATIVE VALUE FOR GTP INDICATES THAT P IS A DESCENT
C        DIRECTION. IF GTP IS POSITIVE, REVERSE THE DIRECTION OF
C        SEARCH.
C
  200    GTP = DDOT(N,W(ITG),1,P,1)
         IF (GTP.LE.0.0D+0) GO TO 240
         GTP = -GTP
         DO 220 I = 1, N
            P(I) = -P(I)
  220    CONTINUE
         SPOS = SNEG
  240    IF (SPOS.GE.EPSMCH) GO TO 260
         NWHY = 5
         RETURN
C
C        COMPUTE THE MAXIMUM AND INITIAL STEP-LENGTHS FOR THE LINEAR
C        SEARCH.
C
  260    PNORM = SQRT(DDOT(N,P,1,P,1))
         SP = F06BLF(STEPMX,PNORM,FAIL)
         IF (SP.GT.SPOS) SP = SPOS
         ALPHA = E04JBT(FNEW,FM,GTP,SP)
C
C        PERFORM THE LINEAR SEARCH. IF E04JBQ IS USED, CALL SFUN TO
C        COMPUTE THE GRADIENT AT THE NEW POINT.
C
         IW(1) = -5
         XNORM = SQRT(DDOT(N,W(ITX),1,W(ITX),1))
         U = 1.0D+0 + ABS(FNEW)
         EPSA = 1.0D+1*EPSMCH*U
         EPSR = EPSA/U
         TOLRX = SQRT(EPSR)
         TOLREL = MAX(EPSMCH,TOLRX)
         EPS = TOLREL
         TNYTOL = EPSMCH*F06BLF(1.0D+0+XNORM,PNORM,FAIL)
         TOLAX = EPSA/(SQRT(EPSA)-F06BLF(GTP,PNORM,FAIL))
         TOLABS = F06BLF(TOLRX*XNORM+TOLAX,PNORM,FAIL)
         T = MAX(TNYTOL,TOLABS)
         CALL MINLIN(N,SFUN,EPS,T,0.0D+0,0.0D+0,SP,P,GTP,W(ITX),FNEW,
     *               ALPHA,W(ITG),NUMF,IFLAG,IW,LIW,W,LW)
         NFTOTL = NFTOTL + NUMF
         IF (IFLAG.GE.0) GO TO 280
         NWHY = IFLAG
         RETURN
  280    IF (IFLAG.LE.1) GO TO 300
         IW(1) = -5
         IFLAG = 2
         CALL SFUN(IFLAG,N,W(ITX),U,W(ITG),IW,LIW,W,LW)
         NFTOTL = NFTOTL + 1
         IF (IFLAG.GE.0) GO TO 300
         NWHY = IFLAG
         RETURN
  300    IF (NFTOTL.LE.MAXFUN) GO TO 320
         NWHY = 2
         RETURN
  320 CONTINUE
C
C     IF THE FUNCTION VALUE HAS DECREASED, TAKE THE X FINALLY
C     OBTAINED BY THE LOCAL SEARCH AS THE NEW STARTING POINT. THE
C     RE-EVALUATION OF THE FUNCTION ENABLES THE LIBRARY-USER TO
C     OBTAIN ADDITIONAL INFORMATION AT THE NEW POINT.
C
      IF (FNEW.GE.OLDF) RETURN
      ITXI = ITX
      DO 340 I = 1, N
         X(I) = W(ITXI)
         ITXI = ITXI + 1
  340 CONTINUE
      IW(1) = 0
      IFLAG = 2
      CALL SFUN(IFLAG,N,X,F,G,IW,LIW,W,LW)
      NFTOTL = NFTOTL + 1
      IF (IFLAG.GE.0) GO TO 360
      NWHY = IFLAG
      RETURN
C
C     E04JBS TESTS IF ANY VARIABLE HAS REACHED A BOUND. IF SO, THE
C     VARIABLE IS FIXED ON THAT BOUND, ITS INDEX IN THE PERMUTATION
C     OF FREE VARIABLES IS STORED IN JFIX, NFREE IS DECREMENTED BY 1
C     AND THE UPPER BOUND ON THE CONDITION NUMBER OF THE HESSIAN IS
C     RECOMPUTED. OTHERWISE JFIX RETURNS THE VALUE ZERO.
C
  360 CALL E04JBS(N,RTEPS,NFREE,ISTATE,X,BL,BU,P,JFIX,BOUNDK,RECALC)
C
C     IF A VARIABLE HAS BEEN FIXED BY E04JBS, RECALCULATE THE
C     FUNCTION VALUE IF NECESSARY AND CALL E04JBU TO MODIFY THE
C     CHOLESKY FACTORS OF THE PROJECTED HESSIAN.
C
      IF (JFIX.EQ.0) GO TO 400
      IF ( .NOT. RECALC) GO TO 380
      IFLAG = 2
      IW(1) = 0
      CALL SFUN(IFLAG,N,X,F,G,IW,LIW,W,LW)
      NFTOTL = NFTOTL + 1
      IF (IFLAG.GE.0) GO TO 380
      NWHY = IFLAG
      RETURN
  380 IFLAG = 0
      CALL E04JBU(N,NFREE,JFIX,HESL,LH,HESD,LHPROJ,W,IFLAG)
      IF (IFLAG.EQ.0) GO TO 400
      NWHY = 4
      RETURN
  400 GTG = 0.0D+0
      IF (NFREE.EQ.0) GO TO 420
C
C     E04JBY STORES THE ELEMENTS OF THE PROJECTED GRADIENT AT THE
C     NEW POINT IN THEIR CORRECT PERMUTATION IN THE VECTOR GPJ AND
C     RECOMPUTES GTG.
C
      CALL E04JBY(N,NFREE,ISTATE,G,GPJ,GTG)
C
C     TEST FOR CONVERGENCE. IF THE CRITERIA ARE NOT SATISFIED,
C     RETURN TO CONTINUE MINIMIZING ON THE CURRENT SUBSPACE.
C
      NWHY = 0
      U = 1.0D+0 + ABS(FNEW)
      IF ((ABS(OLDF-FNEW).LT.(RTOLSQ+EPSMCH)
     *    *U .AND. GTG.LT.(PEPS+RTOLSQ)*U*U) .OR. GTG.LT.ENDEPS)
     *    GO TO 420
      FINISH = .FALSE.
      RETURN
C
C     IF THE CONVERGENCE CRITERIA ARE SATISFIED BUT A VARIABLE HAS
C     JUST BEEN FIXED, AND THIS IS ONLY THE FIRST ITERATION OF LOCAL
C     SEARCH, CHECK THE MULTIPLIERS. ON RETURN FROM E04KBX, INEGLM
C     WILL CONTAIN EITHER THE INDEX OF THE NEW FREE VARIABLE OR, IF
C     NO VARIABLE IS TO BE RELEASED, THE VALUE ZERO.
C
  420 IF (JFIX.EQ.0 .OR. LCOUNT.GT.1) RETURN
      CALL E04KBX(N,NFREE,TOLEPS,ISTATE,G,LM1POS,INEGLM,NUMNEG)
      IF (NUMNEG.GT.0) CALL E04LBU(N,NUMNEG,ISTATE)
      IF (INEGLM.EQ.0) RETURN
C
C     IF A VARIABLE IS TO BE RELEASED, E04KBV PLACES IT AT THE END
C     OF THE PERMUTATION OF FREE VARIABLES AND ADDS A ROW AND A
C     COLUMN OF THE IDENTITY MATRIX TO THE PROJECTED HESSIAN. IT
C     ALSO UPDATES THE PROJECTED GRADIENT AND CALCULATES THE SQUARE
C     OF ITS EUCLIDEAN NORM, AND FINALLY IT COMPUTES A BOUND ON THE
C     CONDITION NUMBER OF THE PROJECTED HESSIAN AND MODIFIES THIS IF
C     NECESSARY. BEFORE RETURNING TO THE CALLING ROUTINE, E04KBP
C     SETS FINISH TO .FALSE. SO THAT MINIMIZATION MAY CONTINUE ON
C     THE EXTENDED SUBSPACE.
C
      CALL E04KBV(N,INEGLM,G,NFREE,ISTATE,GPJ,GTG,HESD,LHPROJ,BOUNDK,
     *            COND)
      FINISH = .FALSE.
      RETURN
C
C     END OF E04KBP (LOCDER)
C
      END
