      SUBROUTINE E04BBZ(EPS,T,ETA,XLAMDA,U,FU,GU,XMIN,FMIN,GMIN,XW,FW,
     *                  GW,A,B,OLDF,B1,SCXBD,E,D,RR,SS,GTEST1,GTEST2,
     *                  TOL,ILOC,ITEST)
C
C     MARK 6 RELEASE NAG COPYRIGHT 1977
C     MARK 7 REISSUE
C     MARK 8 REVISED. IER-240 (APR 1980).
C     MARK 8 REVISED. IER-244 (MAY 1980).
C     MARK 9 REVISED. IER-317 (SEP 1981).
C     MARK 11B REVISED. IER-457 (SEP 1984).
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C     MARK 12A REVISED. IER-504 (AUG 1986).
C     MARK 12B REVISED. IER-535 (FEB 1987).
C
C     **************************************************************
C
C     E04BBZ (NEWPTC), AN ALGORITHM FOR FINDING A STEPLENGTH, CALLED
C     REPEATEDLY BY NPL OPTIMIZATION ROUTINES WHICH REQUIRE A STEP-
C     LENGTH TO BE COMPUTED USING CUBIC INTERPOLATION.
C     THE PARAMETERS SET UP BEFORE THE CALL OF E04BBZ CONTAIN
C     INFORMATION ABOUT THE INTERVAL IN WHICH A LOWER POINT IS TO BE
C     FOUND AND FROM THIS E04BBZ PRODUCES A POINT AT WHICH THE
C     FUNCTION CAN BE EVALUATED OUTSIDE THIS SUBROUTINE.
C     THE VALUE OF THE INTEGER PARAMETER ILOC DETERMINES THE PATH
C     TAKEN THROUGH THE CODE. FOR A FURTHER DESCRIPTION OF ILOC
C     AND THE OTHER PARAMETERS SEE NPL ALGORITHMS LIBRARY REF. NO.
C     E4/16/F.
C
C     PHILIP E. GILL, WALTER MURRAY, SUSAN M. PICKEN,
C     MARGARET H. WRIGHT AND ENID M. LONG
C     D.N.A.C., NATIONAL PHYSICAL LABORATORY, ENGLAND.
C
C     **************************************************************
C
C
C     BRANCH TO APPROPRIATE SECTION OF CODE DEPENDING ON THE
C     VALUE OF THE FLAG ILOC
C     THE SIGNIFICANCE OF THE FLAGS ILOC AND ITEST ARE DESCRIBED IN
C     NPL ALGORITHMS LIBRARY DOCUMENT REF. NO. E4/16/F.
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION  A, B, B1, D, E, EPS, ETA, FMIN, FU, FW, GMIN,
     *                  GTEST1, GTEST2, GU, GW, OLDF, RR, SCXBD, SS, T,
     *                  TOL, U, XLAMDA, XMIN, XW
      INTEGER           ILOC, ITEST
C     .. Local Scalars ..
      DOUBLE PRECISION  A1, D1, D2, Q, R, S, XM
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX, SQRT
C     .. Executable Statements ..
      GO TO (20,40,400,380) ILOC
C
C     ILOC = 1
C
C     CHECK INPUT PARAMETERS
C
   20 ITEST = 2
      TOL = T
      IF (U.LE.0.0D+0 .OR. 0.5D0*XLAMDA.LE.T .OR. GU.GT.0.0D+0) RETURN
      ITEST = 1
C
C     A AND B DEFINE THE INTERVAL OF UNCERTAINTY. X AND XW ARE
C     POINTS WITH LOWEST AND SECOND LOWEST FUNCTION VALUES SO FAR
C     OBTAINED.  INITIALISE A, XMIN, XW AT ORIGIN AND CORRESPONDING
C     VALUES OF FUNCTION AND PROJECTION OF GRADIENT ALONG DIRECTION
C     OF SEARCH AT VALUES FOR LATEST ESTIMATE AT MINIMUM.
C
      A = 0.0D+0
      XW = 0.0D+0
      XMIN = 0.0D+0
      OLDF = FU
      FMIN = FU
      FW = FU
      GW = GU
      GMIN = GU
      D = U
C
C     THE PARAMETER RR HAS TWO USES DURING THE EXECUTION OF THIS
C     SUBROUTINE.  INITIALLY THE SIGN OF RR INDICATES WHETHER OR NOT
C     THE MINIMUM HAS BEEN BRACKETED. LATER, WHEN A POINT SATISFYING
C     THE GTEST2 CRITERION HAS BEEN FOUND, RR IS USED TO COMPUTE A
C     STEPLENGTH WHICH SATISFIES THE SECOND CRITERION INVOLVING
C     GTEST1.
C
      RR = -1.0D+0
C
C     SET UP XBND AS A BOUND ON THE STEP TO BE TAKEN. (XBND IS NOT
C     COMPUTED EXPLICITLY BUT SCXBD IS ITS SCALED VALUE.) SET THE
C     UPPER BOUND ON THE INTERVAL OF UNCERTAINTY INITIALLY TO
C     XLAMDA + TOL(XLAMDA).
C
      SCXBD = XLAMDA
      B = SCXBD + EPS*ABS(SCXBD) + T
      E = B
      B1 = B
C
C     COMPUTE THE CONSTANTS REQUIRED FOR THE TWO CONVERGENCE
C     CRITERIA.
C
      GTEST1 = -1.0D-4*GU
      GTEST2 = -ETA*GU
C
C     SET ILOC TO INDICATE THAT THIS IS THE FIRST ITERATION
C
      ILOC = 2
      GO TO 320
C
C     ILOC = 2
C
C     UPDATE A, B, XW, AND XMIN
C
   40 IF (FU.GT.FMIN) GO TO 100
C
C     IF FUNCTION VALUE NOT INCREASED, NEW POINT BECOMES NEXT
C     ORIGIN AND OTHER POINTS ARE SCALED ACCORDINGLY.
C
      FW = FMIN
      FMIN = FU
      GW = GMIN
      GMIN = GU
      XMIN = XMIN + U
      A = A - U
      B = B - U
      XW = -U
      SCXBD = SCXBD - U
      IF (GU.LE.0.0D+0) GO TO 60
      B = 0.0D+0
      RR = 1.0D+0
      GO TO 80
   60 A = 0.0D+0
   80 TOL = ABS(XMIN)*EPS + T
      GO TO 160
C
C     IF FUNCTION VALUE INCREASED, ORIGIN REMAINS UNCHANGED
C     BUT NEW POINT MAY NOW QUALIFY AS W.
C
  100 IF (U.LT.0.0D+0) GO TO 120
      B = U
      RR = 1.0D+0
      GO TO 140
  120 A = U
  140 XW = U
      FW = FU
      GW = GU
  160 XM = 5.0D-1*(A+B)
C
C     CHECK TERMINATION CRITERIA
C
      IF (0.5D0*ABS(XM).LE.TOL-0.25D0*(B-A) .OR. ABS(GMIN)
     *    .LE.GTEST2 .AND. FMIN.LT.OLDF .AND. (ABS(XMIN-XLAMDA)
     *    .GT.TOL .OR. RR.LT.0.0D+0)) GO TO 360
      R = 0.0D+0
      Q = 0.0D+0
      S = 0.0D+0
      IF (ABS(E).LE.TOL) GO TO 200
C
C     FIT CUBIC THROUGH XMIN AND XW
C
      R = 3.0D+0*(FMIN-FW)/XW + GMIN + GW
      S = MAX(ABS(R),ABS(GW),ABS(GMIN))
      IF (S.EQ.0.0D+0) GO TO 180
      Q = (R/S)*(R/S) - (GW/S)*(GMIN/S)
      IF (Q.GE.0.0D+0) GO TO 180
      R = 0.0D+0
      Q = 0.0D+0
      S = 0.0D+0
      GO TO 200
C
C     COMPUTE MINIMUM OF FITTED CUBIC
C
  180 Q = S*SQRT(Q)
      IF (XW.LT.0.0D+0) Q = -Q
      S = XW*(GMIN-R-Q)
      Q = GW - GMIN + Q + Q
      IF (Q.GT.0.0D+0) S = -S
      IF (Q.LE.0.0D+0) Q = -Q
      R = E
      IF (B1.NE.D .OR. RR.GT.0.0D+0) E = D
C
C     CONSTRUCT AN ARTIFICIAL BOUND ON THE ESTIMATED STEPLENGTH
C
  200 A1 = A
      B1 = B
      D = XM
      IF (RR.GT.0.0D+0) GO TO 220
      D = -4.0D+0*XW
      IF (D.GT.SCXBD) D = SCXBD
      GO TO 240
C
C     IF THE MINIMUM IS BRACKETED BY 0 AND XW THE STEP MUST LIE
C     WITHIN (A, B).
C
  220 IF ((A.NE.0.0D+0 .OR. XW.GE.0.0D+0)
     *    .AND. (B.NE.0.0D+0 .OR. XW.LE.0.0D+0)) GO TO 260
C
C     IF THE MINIMUM IS NOT BRACKETED BY 0 AND XW THE STEP MUST LIE
C     WITHIN (A1, B1).
C
      D1 = XW
      D2 = A
      IF (A.EQ.0.0D+0) D2 = B
      U = -D1/D2
      IF (U.GE.1.0D+0) D = 5.0D+0*D2*(1.0D-1+1.0D+0/U)/1.1D+1
      IF (U.LT.1.0D+0) D = 5.0D-1*D2*SQRT(U)
  240 IF (D.LE.0.0D+0) A1 = D
      IF (D.GT.0.0D+0) B1 = D
C
C     REJECT THE STEP OBTAINED BY INTERPOLATION IF IT LIES OUTSIDE
C     THE REQUIRED INTERVAL OR IT IS GREATER THAN HALF THE STEP
C     OBTAINED DURING THE LAST-BUT-ONE ITERATION.
C
  260 IF (ABS(S).GE.ABS(5.0D-1*Q*R) .OR. S.LE.Q*A1 .OR. S.GE.Q*B1)
     *    GO TO 300
C
C     A CUBIC INTERPOLATION STEP
C
      D = S/Q
C
C     THE FUNCTION MUST NOT BE EVALUATED TOO CLOSE TO A OR B.
C
      IF (0.5D0*(D-A).GE.TOL .AND. 0.5D0*(B-D).GE.TOL) GO TO 320
      IF (XM.GT.0.0D+0) GO TO 280
      D = -TOL
      GO TO 320
  280 D = TOL
      GO TO 320
  300 E = B - A
C
C     IF THE STEP IS TOO LARGE, REPLACE BY THE SCALED BOUND (SO AS
C     TO COMPUTE THE NEW POINT ON THE BOUNDARY).
C
  320 IF (D.LT.SCXBD) GO TO 340
      D = SCXBD
C
C     MOVE SXBD TO THE LEFT SO THAT XBND + TOL(XBND) = XLAMDA.
C
      SCXBD = SCXBD - (EPS*ABS(XLAMDA)+T)/(1.0D+0+EPS)
  340 U = D
      IF (ABS(D).LT.TOL .AND. D.LT.0.0D+0) U = -TOL
      IF (ABS(D).LT.TOL .AND. D.GE.0.0D+0) U = TOL
      ITEST = 1
      RETURN
C
C     THE FIRST CONVERGENCE CRITERION HAS BEEN SATISFIED. NOW CHECK
C     THAT THE FUNCTION VALUE HAS BEEN REDUCED SUFFICIENTLY. THE
C     VARIABLE RR IS NOW USED TO REDUCE THE STEP LENGTH.
C
  360 D = RR
      RR = XMIN
      SS = 5.0D-1
      FU = FMIN
      GU = GMIN
      IF (XMIN.EQ.0.0D+0) XMIN = T
C
C     IF XMIN LIES WITHIN TOL OF THE BOUNDARY AND THE MINIMUM HAS
C     BEEN BRACKETED, THEN RECOMPUTE THE POINT ON THE BOUNDARY.
C
  380 IF (ABS(XMIN-XLAMDA).GE.TOL .OR. XMIN.EQ.T) GO TO 400
      IF (SCXBD.LT.0.0D+0 .AND. GMIN.LT.0.0D+0) XMIN = XLAMDA
      IF (D.LT.0.0D+0) GO TO 400
      U = 0.0D+0
      ILOC = 3
      ITEST = 1
      RETURN
C
C     CHECK THAT NEW POINT SATISFIES SAFEGUARD CONDITIONS.
C     IF NECESSARY, ATTEMPT TO FIND SUFFICIENTLY LOWER POINT
C     BY SUCCESSIVELY DECREASING THE STEPLENGTH.
C
  400 IF (OLDF-FU.LE.GTEST1*XMIN) GO TO 420
      FMIN = FU
      GMIN = GU
      ITEST = 0
C
C     THE ALGORITHM HAS SUCCESSFULLY FOUND A SUFFICIENTLY LOWER
C     POINT.
C
      RETURN
  420 IF (XMIN.NE.T) GO TO 440
      ITEST = 3
C
C     DESPITE REPEATED REDUCTIONS IN THE STEP SIZE, A LOWER POINT
C     COULD NOT BE FOUND.
C
      RETURN
C
C     A SUFFICIENT REDUCTION IN THE FUNCTION VALUE HAS NOT YET BEEN
C     FOUND, TRY A FURTHER REDUCTION IN THE STEP LENGTH.
C
  440 XMIN = RR*SS
      SS = SS*SS
      IF (XMIN.LT.T) XMIN = T
      U = 0.0D+0
      ILOC = 4
      ITEST = 1
      RETURN
C
C     END OF E04BBZ (NEWPTC)
C
      END
