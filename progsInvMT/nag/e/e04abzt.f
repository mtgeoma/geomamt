      SUBROUTINE E04ABZ(EPS,T,ETA,SFTBND,XLAMDA,U,FU,GU,XMIN,FMIN,XW,FW,
     *                  XV,FV,A,FA,B,OLDF,B1,SCXBD,E,D,RR,SS,GTEST1,
     *                  GTEST2,TOL,ILOC,ITEST)
C
C     MARK 6 RELEASE NAG COPYRIGHT 1977
C     MARK 7 REISSUE
C     MARK 8 REVISED. IER-239 (APR 1980).
C     MARK 8 REVISED. IER-244 (MAY 1980).
C     MARK 9 REVISED. IER-317 (SEP 1981).
C     MARK 11B REVISED. IER-456 (SEP 1984).
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C
C     **************************************************************
C
C     E04ABZ (NEWPTQ), AN ALGORITHM FOR FINDING A STEPLENGTH, CALLED
C     REPEATEDLY BY NPL OPTIMIZATION ROUTINES WHICH REQUIRE A STEP-
C     LENGTH TO BE COMPUTED USING QUADRATIC INTERPOLATION.
C     THE PARAMETERS SET UP BEFORE THE CALL OF E04ABZ CONTAIN
C     INFORMATION ABOUT THE INTERVAL IN WHICH A LOWER POINT IS TO BE
C     FOUND AND FROM THIS E04ABZ PRODUCES A POINT AT WHICH THE
C     FUNCTION CAN BE EVALUATED OUTSIDE THIS SUBROUTINE.
C     THE VALUE OF THE INTEGER PARAMETER ILOC DETERMINES THE PATH
C     TAKEN THROUGH THE CODE. FOR A FURTHER DESCRIPTION OF ILOC
C     AND THE OTHER PARAMETERS SEE NPL ALGORITHMS LIBRARY REF. NO.
C     E4/15/F.
C
C     PHILIP E. GILL, WALTER MURRAY, SUSAN M. PICKEN,
C     MARGARET H. WRIGHT AND ENID M. LONG
C     D.N.A.C. NATIONAL PHYSICAL LABORATORY, ENGLAND
C
C     **************************************************************
C
C
C     BRANCH TO APPROPRIATE SECTION OF CODE DEPENDING ON THE
C     VALUE OF THE FLAG ILOC
C     THE SIGNIFICANCE OF THE FLAGS ILOC AND ITEST ARE DESCRIBED IN
C     NPL ALGORITHMS LIBRARY DOCUMENT REF. NO. E4/15/F.
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION  A, B, B1, D, E, EPS, ETA, FA, FMIN, FU, FV, FW,
     *                  GTEST1, GTEST2, GU, OLDF, RR, SCXBD, SFTBND, SS,
     *                  T, TOL, U, XLAMDA, XMIN, XV, XW
      INTEGER           ILOC, ITEST
C     .. Local Scalars ..
      DOUBLE PRECISION  A1, D1, D2, Q, R, S, XM
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, SQRT
C     .. Executable Statements ..
      GO TO (20,40,40,480,460) ILOC
C
C     ILOC = 1
C
C     CHECK INPUT PARAMETERS
C
   20 ITEST = 2
      TOL = T
      IF (U.LE.0.0D+0 .OR. 0.5D0*XLAMDA.LE.T .OR. GU.GT.0.0D+0) RETURN
      ITEST = 1
C
C     A AND B DEFINE THE INTERVAL OF UNCERTAINTY. XMIN DENOTES
C     THE LOWEST POINT OBTAINED SO FAR, XW THE LAST VALUE
C     OF XMIN AND XV THE SCALED VALUE OF ALPHA CORRESPONDING TO
C     THE HIGHEST FUNCTION VALUE OF THE THREE POINTS THROUGH
C     WHICH A PARABOLA MAY BE FITTED. INITIALIZE A, XV, XW, XMIN
C     AT ORIGIN AND CORRESPONDING FUNCTION VALUES AT LATEST
C     ESTIMATE OF MINIMUM.
C
      XMIN = 0.0D+0
      XW = 0.0D+0
      XV = 0.0D+0
      A = 0.0D+0
      OLDF = FU
      FMIN = FU
      FW = FU
      FV = FU
      FA = FU
      D = U
C
C     THE PARAMETER RR HAS TWO USES DURING THE EXECUTION OF THIS
C     SUBROUTINE.  INITIALLY THE SIGN OF RR INDICATES WHETHER OR NOT
C     THE MINIMUM HAS BEEN BRACKETED. LATER, WHEN A POINT SATISFYING
C     THE GTEST2 CRITERION HAS BEEN FOUND, RR IS USED TO COMPUTE A
C     STEPLENGTH WHICH SATISFIES THE SECOND CRITERION INVOLVING
C     GTEST1.
C
      RR = -1.0D+0
C
C     SET UP XBND AS A BOUND ON THE STEP TO BE TAKEN. (XBND IS NOT
C     COMPUTED EXPLICITLY BUT SCXBD IS ITS SCALED VALUE.) SET THE
C     UPPER BOUND ON THE INTERVAL OF UNCERTAINTY INITIALLY TO
C     XLAMDA + TOL(XLAMDA).
C
      SCXBD = XLAMDA
      B = SCXBD + EPS*ABS(SCXBD) + T
      E = 2.0D+0*B
      B1 = B
C
C     COMPUTE THE CONSTANTS REQUIRED FOR THE TWO CONVERGENCE
C     CRITERIA.
C
      GTEST1 = -1.0D-4*GU
      GTEST2 = -ETA*GU
C
C     SET ILOC TO INDICATE THAT ONLY TWO POINTS ARE AVAILABLE
C
      ILOC = 2
      GO TO 400
C
C     ILOC = 2 OR 3
C
C     UPDATE A, B, XV, XW, AND XMIN.
C
   40 IF (FU.GT.FMIN) GO TO 100
C
C     IF FUNCTION VALUE NOT INCREASED, NEW POINT BECOMES
C     NEXT ORIGIN AND OTHER POINTS ARE SCALED ACCORDINGLY.
C
      IF (U.LT.0.0D+0) GO TO 60
      A = 0.0D+0
      FA = FMIN
      IF (XW.EQ.XV .AND. FMIN.EQ.FU) RR = 1.0D+0
      GO TO 80
   60 B = 0.0D+0
      RR = 1.0D+0
   80 XV = XW
      FV = FW
      FW = FMIN
      FMIN = FU
      XMIN = XMIN + U
      A = A - U
      B = B - U
      XV = XV - U
      XW = 0.0D+0 - U
C
C     THIS MAY BE CHANGED TO XW = - U IF THE COMPUTER IS
C     SUCH THAT  - U AND 0.0 - U ARE IDENTICAL.
C
      SCXBD = SCXBD - U
      TOL = EPS*ABS(XMIN) + T
      GO TO 180
C
C     IF FUNCTION VALUE INCREASED, ORIGIN REMAINS UNCHANGED
C     BUT OTHER POINTS MAY BE INTERCHANGED.
C
  100 IF (U.GE.0.0D+0) GO TO 120
      A = U
      FA = FU
      GO TO 140
  120 B = U
      RR = 1.0D+0
  140 IF (FU.GT.FW .AND. XW.NE.0.0D+0) GO TO 160
      XV = XW
      FV = FW
      XW = U
      FW = FU
      GO TO 180
  160 XV = U
      FV = FU
  180 XM = 5.0D-1*(A+B)
C
C     CHECK TERMINATION CRITERIA.
C
      IF (0.5D0*ABS(XM).LE.TOL-0.25D0*(B-A)
     *    .OR. XMIN+B.LE.SFTBND .OR. FA-FMIN.LE.ABS(A)
     *    *GTEST2 .AND. FMIN.LT.OLDF .AND. (ABS(XMIN-XLAMDA)
     *    .GT.TOL .OR. RR.LT.0.0D+0)) GO TO 440
      R = 0.0D+0
      Q = 0.0D+0
      S = 0.0D+0
      IF (ABS(E).LE.TOL) GO TO 240
C
C     FIT PARABOLA THROUGH XMIN, XV, XW.
C
      IF (ILOC.NE.2) GO TO 200
C
C     SPECIAL CASE. ONLY TWO POINTS ARE AVAILABLE FOR
C     QUADRATIC INTERPOLATION
C
      Q = 2.0D+0*(FW-FMIN-XW*GU)
      S = GU*XW*XW
      IF (XMIN.NE.0.0D+0) S = (2.0D+0*(FMIN-FW)+XW*GU)*XW
      GO TO 220
  200 R = XW*(FV-FMIN)
      Q = XV*(FW-FMIN)
      S = R*XW - Q*XV
      Q = 2.0D+0*(Q-R)
  220 IF (Q.GT.0.0D+0) S = -S
      IF (Q.LE.0.0D+0) Q = -Q
      R = E
C
C     IF THE LAST STEP EXPANDED THE INTERVAL OR THE MINIMUM HAS
C     ALREADY BEEN BRACKETED SET E AS THE LAST STEP TAKEN
C
      IF (D.NE.B1 .OR. RR.GT.0.0D+0) E = D
C
C     CONSTRUCT AN ARTIFICIAL BOUND ON THE ESTIMATED STEPLENGTH.
C
  240 A1 = A
      B1 = B
      IF (XMIN.NE.A) GO TO 260
      D = XM
      GO TO 340
  260 IF (RR.GT.0.0D+0) GO TO 280
      D = -4.0D+0*A
      IF (D.GE.SCXBD) D = SCXBD
      GO TO 320
C
C     DETERMINE INTERVAL OF LENGTH D2 IN WHICH TO SET
C     ARTIFICIAL BOUND.
C
  280 D1 = A
      D2 = B
      IF (ABS(D2).GT.TOL .AND. (XW.LE.0.0D+0 .OR. ABS(D1).LE.TOL))
     *    GO TO 300
      U = D1
      D1 = D2
      D2 = U
  300 U = -D1/D2
      IF (U.GE.1.0D+0) D = 5.0D+0*D2*(1.0D-1+1.0D+0/U)/1.1D+1
      IF (U.LT.1.0D+0) D = 5.0D-1*D2*SQRT(U)
C
C     IF THE MINIMUM IS BRACKETED BY XV AND XW THE STEP MUST LIE
C     WITHIN (A, B).
C
  320 IF (XW.LT.0.0D+0 .AND. XV.GT.0.0D+0 .OR. XW.GT.0.0D+0 .AND. XV.LT.
     *    0.0D+0) GO TO 340
C
C     IF THE MINIMUM IS NOT BRACKETED BY XV AND XW THE STEP MUST LIE
C     WITHIN (A1, B1).
C
      IF (D.LE.0.0D+0) A1 = D
      IF (D.GT.0.0D+0) B1 = D
C
C     REJECT THE STEP OBTAINED BY INTERPOLATION IF IT LIES OUTSIDE
C     THE REQUIRED INTERVAL OR IT IS GREATER THAN HALF THAT
C     OBTAINED DURING THE LAST-BUT-ONE ITERATION.
C
  340 IF (ABS(S).GE.ABS(5.0D-1*Q*R) .OR. S.LE.Q*A1 .OR. S.GE.Q*B1)
     *    GO TO 360
C
C     A PARABOLIC INTERPOLATION STEP.
C
      D = S/Q
C
C     F MUST NOT BE EVALUATED TOO CLOSE TO A OR B.
C
      IF (0.5D0*(D-A).GE.TOL .AND. 0.5D0*(B-D).GE.TOL) GO TO 380
      D = TOL
      IF (XM.LE.0.0D+0) D = -TOL
      GO TO 380
C
C     A NON-INTERPOLATION STEP.
C
  360 E = B
      IF (XM.LE.0.0D+0) E = A
  380 ILOC = 3
C
C     CHECK THAT THE NEW STEP LENGTH WILL NOT BE GREATER THAN
C     XLAMDA.
C
  400 IF (D.LT.SCXBD) GO TO 420
C
C     REPLACE THE STEP LENGTH BY THE SCALED BOUND (SO AS TO COMPUTE
C     THE NEW POINT ON THE BOUNDARY.
C
      D = SCXBD
C
C     MOVE SCXBD TO THE LEFT SO THAT NEWXBND + TOL(NEWXBND) = XBND.
C
      SCXBD = (SCXBD-TOL)/(1.0D+0+EPS)
  420 U = D
      IF (ABS(D).LT.TOL .AND. D.LE.0.0D+0) U = -TOL
      IF (ABS(D).LT.TOL .AND. D.GT.0.0D+0) U = TOL
      ITEST = 1
      RETURN
C
C     THE FIRST CONVERGENCE CRITERION HAS BEEN SATISFIED. NOW CHECK
C     THAT THE FUNCTION VALUE HAS BEEN REDUCED SUFFICIENTLY. THE
C     VARIABLE RR IS NOW USED TO REDUCE THE STEP LENGTH.
C
  440 D = RR
      RR = XMIN
      SS = 5.0D-1
      FU = FMIN
      IF (XMIN.EQ.0.0D+0) XMIN = T
C
C     IF XMIN LIES WITHIN TOL OF THE BOUNDARY AND THE MINIMUM HAS
C     BEEN BRACKETED, THEN RECOMPUTE THE POINT ON THE BOUNDARY.
C
  460 IF (ABS(XMIN-XLAMDA).GE.TOL .OR. XMIN.EQ.T) GO TO 480
      IF (SCXBD.LT.0.0D+0 .AND. XW.LT.0.0D+0 .AND. XV.LT.0.0D+0)
     *    XMIN = XLAMDA
      IF (D.LT.0.0D+0) GO TO 480
      U = 0.0D+0
      ILOC = 4
      ITEST = 1
      RETURN
C
C     CHECK THAT THE NEW POINT SATISFIES SAFEGUARD CONDITIONS.
C     IF NECESSARY ATTEMPT TO FIND A SUFFICIENTLY LOWER POINT
C     BY SUCCESSIVELY DECREASING THE STEPLENGTH.
C
  480 IF (XMIN+B.GT.SFTBND) GO TO 500
      ITEST = 4
C
C     ITEST = 4 IMPLIES THAT THE REQUIRED STEP LENGTH IS SMALLER
C     THAN SFTBND.
C
      RETURN
  500 IF (OLDF-FU.LE.GTEST1*XMIN) GO TO 520
      FMIN = FU
      ITEST = 0
C
C     THE ALGORITHM HAS SUCCESSFULLY FOUND A SUFFICIENTLY LOWER
C     POINT.
C
      RETURN
  520 IF (XMIN.NE.T) GO TO 540
      ITEST = 3
C
C     DESPITE REPEATED REDUCTIONS IN THE STEP SIZE, A LOWER POINT
C     COULD NOT BE FOUND.
C
      RETURN
C
C     A SUFFICIENT REDUCTION IN THE FUNCTION VALUE HAS NOT YET BEEN
C     FOUND, TRY A FURTHER REDUCTION IN THE STEP LENGTH.
C
  540 XMIN = RR*SS
      SS = SS*SS
      IF (XMIN.LT.T) XMIN = T
      ITEST = 1
      U = 0.0D+0
      ILOC = 5
      RETURN
C
C     END OF E04ABZ (NEWPTQ)
C
      END
