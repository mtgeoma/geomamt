      SUBROUTINE E04JBL(N,SFUN,MONIT,IPRINT,LOCSCH,INTYP,MINLIN,MAXFUN,
     *                  ETA,XTOL,STEPMX,FEST,DELTA,IBOUND,BL,BU,X,HESL,
     *                  LH,HESD,ISTATE,F,G,IW,LIW,W,LW,IFAIL)
C
C     MARK 16 RELEASE. NAG COPYRIGHT 1993.
C
C     This routine originally called E04JBF.
C
C     **************************************************************
C
C     E04JBL IS A COMPREHENSIVE QUASI-NEWTON ALGORITHM FOR FINDING
C     - AN UNCONSTRAINED MINIMUM OF A FUNCTION OF SEVERAL VARIABLES
C     - A MINIMUM OF A FUNCTION OF SEVERAL VARIABLES SUBJECT TO
C     FIXED UPPER AND/OR LOWER BOUNDS ON THE VARIABLES.
C     NO DERIVATIVES ARE REQUIRED.
C
C     THE USER MUST SUPPLY AN INITIAL APPROXIMATION TO THE MINIMUM,
C     AN ESTIMATE OF THE MINIMUM FEASIBLE FUNCTION VALUE AND A
C     SUBROUTINE SFUN TO COMPUTE THE FUNCTION VALUE OR SETS OF
C     FUNCTION VALUES. (NOTE THAT, FOR CONSISTENCY WITH OTHER E04
C     DOCUMENTATION, THE NAME FUNCT IS USED INSTEAD OF SFUN IN THE
C     WRITE-UP.) THE ARRAYS W AND IW ARE USED AS WORK-SPACE BY
C     E04JBL AND MUST BE DIMENSIONED AT LEAST 9*N AND 2,
C     RESPECTIVELY. ON EXIT, E04JBL GIVES THE ESTIMATED POSITION OF
C     THE CONSTRAINED MINIMUM IN X AND THE LOWEST FUNCTION VALUE IN
C     F. THE ROUTINE IS ESSENTIALLY IDENTICAL TO THE SUBROUTINE
C     BCQNDF IN THE NPL ALGORITHMS LIBRARY (REF. NO. E4/34/F).
C     E04JBL WILL NORMALLY BE CALLED WITH E04JBQ (WHICH CALLS
C     E04ABZ) AS THE PARAMETER MINLIN.
C
C     THE MAJORITY OF THE ARITHMETIC IS PERFORMED BY E04KBQ, E04KBR,
C     DDOT AND F04AQZ, WHICH ARE CALLED MANY TIMES DURING THE
C     SOLUTION OF A PROBLEM. IMPLEMENTORS CAN REDUCE THE TIME TAKEN
C     BY E04JBL (PARTICULARLY WHEN N IS LARGE) BY PUTTING THE BODIES
C     OF THESE ROUTINES INTO MACHINE CODE.
C
C     PHILIP E. GILL, WALTER MURRAY, SUSAN M. PICKEN, MARGARET H.
C     WRIGHT AND ENID M. R. LONG, D.N.A.C., NATIONAL PHYSICAL
C     LABORATORY, ENGLAND
C
C     **************************************************************
C
C     MINLIN, MONIT, SFUN
C     .. Parameters ..
      CHARACTER*6       SRNAME
      PARAMETER         (SRNAME='E04JBL')
C     .. Scalar Arguments ..
      DOUBLE PRECISION  ETA, F, FEST, STEPMX, XTOL
      INTEGER           IBOUND, IFAIL, INTYP, IPRINT, LH, LIW, LW,
     *                  MAXFUN, N
      LOGICAL           LOCSCH
C     .. Array Arguments ..
      DOUBLE PRECISION  BL(N), BU(N), DELTA(N), G(N), HESD(N), HESL(LH),
     *                  W(LW), X(N)
      INTEGER           ISTATE(N), IW(LIW)
C     .. Subroutine Arguments ..
      EXTERNAL          MINLIN, MONIT, SFUN
C     .. Arrays in Common ..
      DOUBLE PRECISION  WMACH(15)
C     .. Local Scalars ..
      DOUBLE PRECISION  ALMIN, ALPHA, BNDMAX, BOUNDK, CHKEPS, COND, D,
     *                  DELMIN, ENDEPS, EPS, EPSA, EPSEPS, EPSMCH, EPSR,
     *                  FM, FNEW, GNEWTP, GPJNRM, GTG, GTP, OLDF, PCOND,
     *                  PEPS, PNORM, RMAX, RTEPS, RTOL, RTOLSQ, SAVKBD,
     *                  SFTBND, SPE, T, TEST, TNYTOL, TOLABS, TOLAX,
     *                  TOLEPS, TOLREL, TOLRTE, TOLRX, TSQEPS, TSQPEP,
     *                  U, XNORM
      INTEGER           I, IFLAG, IGA, IGAOLD, INEGLM, INTYPE, IP, IPA,
     *                  ITYPE, J, JFIX, JGA, JGAOLD, LCOUNT, LHPROJ,
     *                  LMTYPE, LW1, LW2, LW3, LW4, LW5, NEQUAL, NFREE,
     *                  NFTOTL, NH, NITER, NUMF, NUMNEG, NWHY
      LOGICAL           FAIL, FINISH, LM1POS, LSFAIL, RECALC
C     .. Local Arrays ..
      CHARACTER*1       P01REC(1)
C     .. External Functions ..
      DOUBLE PRECISION  E04JBT, E04JBW, DDOT, F06BLF, X02AJF, X02ALF
      INTEGER           P01ABF
      EXTERNAL          E04JBT, E04JBW, DDOT, F06BLF, X02AJF, X02ALF,
     *                  P01ABF
C     .. External Subroutines ..
      EXTERNAL          E04JBM, E04JBN, E04JBP, E04JBR, E04JBS, E04JBU,
     *                  E04JBV, E04JBX, E04JBY, E04JBZ, E04KBV, E04KBW,
     *                  E04KBX, E04KBY, E04KBZ, E04LBU, E04LBV, E04LBW,
     *                  E04LBX, E04LBY, E04LBZ, F04AQZ, X02ZAZ
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX, MOD, SQRT
C     .. Common blocks ..
      COMMON            /AX02ZA/WMACH
C     .. Save statements ..
      SAVE              /AX02ZA/
C     .. Executable Statements ..
      CALL X02ZAZ
      INTYPE = INTYP
C
C     TWO MACHINE-DEPENDENT CONSTANTS ARE SET HERE. EPSMCH IS THE
C     SMALLEST POSITIVE REAL NUMBER SUCH THAT 1 + EPSMCH .GT. 1.
C     RMAX IS THE LARGEST POSITIVE REAL NUMBER SUCH THAT BOTH RMAX
C     AND - RMAX CAN BE HELD IN THE MACHINE.
C
      EPSMCH = X02AJF()
      RMAX = X02ALF()
C
C     SET PARAMETERS DEPENDENT ON EPSMCH.
C
      RTEPS = SQRT(EPSMCH)
      CHKEPS = 1.0D-2
      ENDEPS = 1.0D-4*EPSMCH
      TOLEPS = 1.0D+1*RTEPS
      RTOL = XTOL
      IF (ABS(RTOL).LT.EPSMCH) RTOL = 1.0D+1*RTEPS
      RTOLSQ = RTOL*RTOL
      PEPS = EPSMCH**0.6666D+0
      TOLRTE = RTOL + RTEPS
      TSQEPS = RTOLSQ + EPSMCH
      TSQPEP = RTOLSQ + PEPS
      EPSEPS = EPSMCH*EPSMCH
C
C     CHECK INPUT PARAMETERS. E04JBP CHECKS THAT NO ELEMENT OF
C     DELTA, THE VECTOR OF DIFFERENCE INTERVALS FOR APPROXIMATING
C     THE GRADIENT, IS ZERO OR NEGATIVE. IT ALSO COMPUTES DELMIN AS
C     THE SMALLEST ELEMENT OF DELTA.
C
      NH = N*(N-1)/2
      IF (NH.EQ.0) NH = 1
      NWHY = 1
      IF (LIW.LT.2 .OR. LW.LT.9*N .OR. LH.LT.NH .OR. N.LT.1 .OR.
     *    INTYPE.LT.0 .OR. INTYPE.GT.3 .OR. RTOL.LT.0.0D+0 .OR. ETA.GE.
     *    1.0D+0 .OR. ETA.LT.0.0D+0 .OR. STEPMX.LT.RTOL .OR. MAXFUN.LT.
     *    1 .OR. IBOUND.LT.0 .OR. IBOUND.GT.4) GO TO 740
      IF (IBOUND.NE.3) GO TO 20
      IF (BL(1).GT.BU(1)) GO TO 740
   20 IF (IBOUND.NE.0) GO TO 60
      DO 40 J = 1, N
         IF (BL(J).GT.BU(J)) GO TO 740
   40 CONTINUE
   60 CONTINUE
      CALL E04JBP(N,X,DELTA,DELMIN,IFLAG)
      IF (IFLAG.GT.0) GO TO 740
      NWHY = 0
      ALMIN = DELMIN**0.6666D+0
C
C     COMPUTE STARTING POSITIONS FOR SUBDIVISIONS OF WORKSPACE AND
C     PREPARE FOR FIRST ITERATION.
C
      LW1 = 1
      LW2 = LW1 + N
      LW3 = LW2 + N
      LW4 = LW3 + N
      LW5 = LW4 + N
      IP = LW5 + N
      IPA = IP + N
      IGA = IPA + N
      IGAOLD = IGA + N
      FM = FEST
      GTG = 0.0D+0
      NFTOTL = 0
      NITER = 0
      LCOUNT = 0
C
C     IF REQUESTED BY THE USER, E04LBZ SETS THE LOWER AND UPPER
C     BOUNDS ON ALL VARIABLES UNIFORMLY TO THE VALUES INDICATED BY
C     THE PARAMETER IBOUND. IF IBOUND IS ZERO, THE USER HAS ALREADY
C     SET THE BOUNDS.
C
      IF (IBOUND.GT.0) CALL E04LBZ(N,IBOUND,BNDMAX,BL,BU)
C
C     WHEN THE FUNCTION VALUE AND THE GRADIENT AND/OR THE PROJECTED
C     HESSIAN FACTORS AT THE INITIAL POINT HAVE BEEN SUPPLIED BY THE
C     USER, E04JBZ CHECKS ON THE FEASIBILITY OF THE VARIABLES. IF
C     ANY VARIABLE VIOLATES EITHER OF ITS BOUNDS, INTYPE IS RESET TO
C     - 1 TO INDICATE THAT THE SUPPLIED VALUES MUST BE RECOMPUTED.
C     IF ALL VARIABLES ARE FEASIBLE AND THE VECTOR ISTATE HAS BEEN
C     SET BY THE USER, E04JBZ ALSO CHECKS WHETHER EACH FIXED X(I)
C     LIES WITHIN A TOLERANCE OF THE BOUND INDICATED BY ISTATE(I).
C     IF NOT, IT RETURNS INTYPE = - 2. IF THE NEGATIVE ELEMENTS OF
C     ISTATE HAVE BEEN SET CORRECTLY, NFREE RECORDS THE NUMBER OF
C     FREE VARIABLES AND INTYPE RETAINS ITS ORIGINAL SETTING.
C
      IF (INTYPE.GE.1) CALL E04JBZ(N,RTEPS,X,BL,BU,NFREE,NEQUAL,ISTATE,
     *                             INTYPE)
      IF (INTYPE.EQ.-2) CALL E04JBX(N,HESD,N,HESL,NH,COND)
      IF (INTYPE.LE.-2) INTYPE = INTYPE + 3
C
C     WHEN THE ISTATE VECTOR HAS EITHER NOT BEEN SET OR HAS BEEN SET
C     INACCURATELY, E04LBY CHECKS THE INITIAL X VALUES. ANY VARIABLE
C     WHICH LIES CLOSE TO OR BEYOND A BOUND IT FIXES ON THAT BOUND,
C     SETTING ISTATE(I) TO - 2 FOR A LOWER BOUND AND - 1 FOR AN
C     UPPER BOUND. IF THE UPPER BOUND IS SET EQUAL TO THE LOWER
C     BOUND, THAT IS, IF X(I) IS EFFECTIVELY A CONSTANT, THEN
C     ISTATE(I) IS SET TO - 3. FOR EACH FREE X(I), ISTATE(I) RECORDS
C     ITS INDEX IN THE PERMUTATION OF FREE VARIABLES. NEQUAL RETURNS
C     THE NUMBER OF CONSTANT VARIABLES AND NFREE THE NUMBER OF
C     FREE VARIABLES, THAT IS THOSE WITH POSITIVE ENTRIES
C     IN ISTATE
C
      IF (INTYPE.LE.1) CALL E04LBY(N,RTEPS,X,BL,BU,NFREE,ISTATE,NEQUAL)
      XNORM = SQRT(DDOT(N,X,1,X,1))
      IF (INTYPE.NE.1 .AND. INTYPE.NE.2) GO TO 100
C
C     PUT THE INITIAL FUNCTION VALUE, IF KNOWN, IN FNEW. IF THERE
C     ARE NO FREE VARIABLES, CHECK THE LAGRANGE MULTIPLIERS FOR
C     ANY FIXED VARIABLES WHICH ARE NOT CONSTANT.
C     OTHERWISE, IF THE GRADIENT ALSO IS KNOWN AND A DIAGONAL
C     APPROXIMATION OF THE FULL HESSIAN HAS BEEN GIVEN, CALL E04LBX
C     TO STORE THE RELEVANT ELEMENTS IN THE PROJECTED GRADIENT AND
C     HESSIAN VECTORS. LHPROJ RETURNS THE NUMBER OF ENTRIES IN HESL.
C
      DO 80 I = 1, N
         IF (ISTATE(I).EQ.-3) G(I) = 0.0D+0
   80 CONTINUE
      ITYPE = 1
      FNEW = F
      IF (NEQUAL.EQ.N) GO TO 720
      IF (NFREE.EQ.0) GO TO 560
      IF (INTYPE.EQ.2) GO TO 140
      CALL E04LBX(N,ISTATE,G,HESD,HESL,LH,W(IGA),HESD,HESL,LH,LHPROJ)
      GTG = DDOT(NFREE,W(IGA),1,W(IGA),1)
      GO TO 160
C
C     IF NECESSARY, COMPUTE THE INITIAL FUNCTION VALUE AND
C     APPROXIMATE THE ELEMENTS OF THE PROJECTED GRADIENT. THE
C     SETTING OF IW(1), WHICH MUST NOT BE CHANGED, ENABLES THE
C     LIBRARY-USER TO DETERMINE FROM WHICH SUBROUTINE SFUN IS
C     CALLED. A NEGATIVE VALUE OF IFLAG INDICATES FAILURE IN THE
C     USER-SUPPLIED ROUTINE SFUN.
C
  100 DO 120 I = 1, N
         G(I) = 0.0D+0
  120 CONTINUE
      ITYPE = 0
      IW(1) = 0
      IFLAG = 0
      CALL SFUN(IFLAG,N,X,FNEW,W(LW1),IW,LIW,W,LW)
      NFTOTL = 1
      NWHY = IFLAG
      IF (IFLAG.LT.0) GO TO 740
      NWHY = 0
      IF (NEQUAL.EQ.N) GO TO 720
      IF (NFREE.EQ.0) GO TO 540
      IW(1) = -2
      IFLAG = 0
C
C     THE IBOUND = 4 OPTION IS FOR GENUINELY UNCONSTRAINED PROBLEMS
C     ONLY
C
      IF (IBOUND.EQ.4) IFLAG = 3
      CALL E04JBN(IFLAG,N,ISTATE,FNEW,X,DELTA,SFUN,ITYPE,NFTOTL,G,W(LW4)
     *            ,W(LW5),IW,LIW,W,LW)
      IF (IFLAG.GE.0) GO TO 140
      NWHY = IFLAG
      GO TO 740
C
C     E04JBY STORES THE GRADIENT ELEMENTS RELATING TO THE FREE
C     VARIABLES IN THEIR CORRECT PERMUTATION IN THE PROJECTED
C     GRADIENT VECTOR AND COMPUTES THE SQUARE OF ITS EUCLIDEAN NORM.
C
  140 CALL E04JBY(N,NFREE,ISTATE,G,W(IGA),GTG)
      LHPROJ = NFREE*(NFREE-1)/2
  160 IF (LHPROJ.EQ.0) LHPROJ = 1
C
C     WHEN THEY HAVE NOT BEEN SUPPLIED, E04JBX SETS THE CHOLESKY
C     FACTORS FOR THE INITIAL APPROXIMATION OF THE HESSIAN TO THOSE
C     OF THE UNIT MATRIX AND THE REMAINING ELEMENTS OF HESL AND HESD
C     TO 0. IF THE FACTORS HAVE BEEN GIVEN, E04LBW COMPUTES COND AS
C     THE ESTIMATED CONDITION NUMBER OF THE PROJECTED HESSIAN,
C     RETURNING IFLAG = 1 IF IT EXCEEDS THE PERMITTED BOUND.
C
      IF (INTYPE.LE.0) CALL E04JBX(NFREE,HESD,N,HESL,NH,COND)
      BOUNDK = E04JBW(NFREE)
      SAVKBD = BOUNDK
      IFLAG = 0
      IF (INTYPE.GE.1) CALL E04LBW(HESD,NFREE,BOUNDK,IFLAG,COND)
      NWHY = IFLAG
      IF (IFLAG.EQ.1) GO TO 740
C
C     IF THE PROJECTED GRADIENT IS ALREADY SMALL, CHECK THE LAGRANGE
C     MULTIPLIERS.
C
      U = 1.0D+0 + ABS(FNEW)
      IF (GTG.GE.CHKEPS*U*U) GO TO 180
      IF (INTYPE.EQ.0 .OR. INTYPE.EQ.3) GO TO 540
      GO TO 560
C
C     ****************** START OF ITERATION LOOP ******************
C
  180 NWHY = 0
C
C     CHECK THE NUMBER OF FUNCTION EVALUATIONS.
C
      IF (NFTOTL.LE.MAXFUN) GO TO 200
      NWHY = 2
      GO TO 720
  200 OLDF = FNEW
C
C     CALL F04AQZ (LDLTSL) TO CALCULATE A SEARCH DIRECTION PA IN THE
C     SUBSPACE OF FREE VARIABLES. THE RHS VECTOR IS A DUPLICATE OF
C     THE PROJECTED GRADIENT, WHICH MUST BE RETAINED FOR MODIFYING
C     THE FACTORS OF THE PROJECTED HESSIAN AFTER THE LINEAR SEARCH.
C
      JGAOLD = IGAOLD
      JGA = IGA
      DO 220 J = 1, NFREE
         W(JGAOLD) = W(JGA)
         JGAOLD = JGAOLD + 1
         JGA = JGA + 1
  220 CONTINUE
      CALL F04AQZ(NFREE,LHPROJ,HESL,HESD,W(IGAOLD),W(IPA))
      PNORM = SQRT(DDOT(NFREE,W(IPA),1,W(IPA),1))
      GTP = -DDOT(NFREE,W(IGA),1,W(IPA),1)
C
C     E04LBV EXPANDS PA INTO THE N-DIMENSIONAL VECTOR REQUIRED BY
C     THE LINEAR SEARCH ROUTINE.
C
      CALL E04LBV(N,ISTATE,W(IPA),-1.0D+0,W(IP))
C
C     CALL MONIT EVERY IPRINT ITERATIONS. E04LBW COMPUTES PCOND AS
C     THE ESTIMATED CONDITION NUMBER OF THE PROJECTED HESSIAN,
C     RETURNING IFLAG = 1 IF IT EXCEEDS THE PERMITTED BOUND.
C
      GPJNRM = SQRT(GTG)
      IF (IPRINT.LE.0) GO TO 240
      IF (MOD(NITER,IPRINT).NE.0) GO TO 240
      CALL E04LBW(HESD,NFREE,RMAX,IFLAG,PCOND)
      IF (IFLAG.EQ.1) PCOND = RMAX
      CALL MONIT(N,X,FNEW,G,ISTATE,GPJNRM,PCOND,.TRUE.,NITER,NFTOTL,IW,
     *           LIW,W,LW)
C
C     COMPUTE THE MAXIMUM STEP-LENGTH FOR THE LINEAR SEARCH.
C
  240 SPE = F06BLF(STEPMX,PNORM,FAIL)
C
C     E04JBV MODIFIES THE MAXIMUM STEP-LENGTH TO ENSURE THAT NO
C     VARIABLE CAN OVERSTEP A BOUND DURING THE LINEAR SEARCH. IF THE
C     STEP TO A BOUND IS NEGLIGIBLE THE APPROPRIATE VARIABLE IS
C     RESET WITHIN THE SUBROUTINE TO ITS BOUND AND THE LINEAR SEARCH
C     IS BYPASSED. IN THAT CASE THE UPPER BOUND ON THE CONDITION
C     NUMBER OF THE PROJECTED HESSIAN IS RECOMPUTED AND THE INTEGER
C     JFIX GIVES THE INDEX WITHIN THE CURRENT PERMUTATION OF THE
C     FREE VARIABLE WHICH HAS REACHED ITS BOUND. IF THE STEP IS
C     LARGE ENOUGH TO WARRANT A LINEAR SEARCH, THEN JFIX = 0 ON
C     EXIT.
C
      CALL E04JBV(N,NFREE,SPE,RTEPS,EPSEPS,ISTATE,X,BL,BU,W(IP),JFIX,
     *            BOUNDK)
      IF (JFIX.EQ.0) GO TO 280
C
C     IF A NEW VARIABLE HAS BEEN FIXED, THE FUNCTION IS RE-EVALUATED
C     AND E04JBU MODIFIES THE CHOLESKY FACTORS OF THE PROJECTED
C     HESSIAN, THEN, PROVIDED THAT THERE IS STILL AT LEAST ONE
C     VARIABLE FREE, E04JBY REDUCES THE PROJECTED GRADIENT
C     AND THE ROUTINE PROCEEDS IMMEDIATELY TO THE NEXT
C     ITERATION.
C
      IFLAG = 0
      IW(1) = 0
      CALL SFUN(IFLAG,N,X,FNEW,W(LW1),IW,LIW,W,LW)
      NFTOTL = NFTOTL + 1
      NWHY = IFLAG
      IF (IFLAG.LT.0) GO TO 720
      ITYPE = -1
      SAVKBD = BOUNDK
      CALL E04JBU(N,NFREE,JFIX,HESL,NH,HESD,LHPROJ,W(LW1),IFLAG)
      IF (IFLAG.EQ.0) GO TO 260
      NWHY = 4
      GO TO 720
  260 GTG = 0.0D+0
      IF (NFREE.EQ.0) GO TO 540
      CALL E04JBY(N,NFREE,ISTATE,G,W(IGA),GTG)
      GO TO 180
C
C     PERFORM THE LINEAR SEARCH, TAKING AN INITIAL STEP OF LENGTH
C     ALPHA.
C
  280 ALPHA = E04JBT(FNEW,FM,GTP,SPE)
      SFTBND = 1 - ITYPE
      SFTBND = F06BLF(ALMIN*SFTBND,PNORM,FAIL)
      IW(1) = -1
      U = 1.0D+0 + ABS(FNEW)
      EPSA = 1.0D+1*EPSMCH*U
      EPSR = EPSA/U
      TOLRX = EPSR/(SQRT(EPSR)-ETA*F06BLF(GTP,PNORM*GPJNRM,FAIL))
      TOLREL = MAX(EPSMCH,TOLRX)
      EPS = TOLREL
      TNYTOL = EPSMCH*F06BLF(1.0D+0+XNORM,PNORM,FAIL)
      TOLAX = EPSA/(SQRT(EPSA)-F06BLF(GTP,PNORM,FAIL))
      TOLABS = F06BLF(TOLRX*XNORM+TOLAX,PNORM,FAIL)
      T = MAX(TNYTOL,TOLABS)
      CALL MINLIN(N,SFUN,EPS,T,ETA,SFTBND,SPE,W(IP),GTP,X,FNEW,ALPHA,G,
     *            NUMF,IFLAG,IW,LIW,W,LW)
      NFTOTL = NFTOTL + NUMF
      NITER = NITER + 1
      IF (IFLAG.EQ.2) GO TO 420
      IF (IFLAG.GE.0) GO TO 300
      NWHY = IFLAG
      GO TO 720
C
C     IF THE LINEAR SEARCH HAS FAILED TO FIND A LOWER POINT, THEN
C     (1) IF FORWARD DIFFERENCES WERE PREVIOUSLY USED TO APPROXIMATE
C     THE GRADIENT, TRY AGAIN WITH CENTRAL DIFFERENCES.
C
  300 IF (ITYPE.EQ.1) GO TO 340
      ITYPE = ITYPE + 2
      IW(1) = -2
      IFLAG = 0
      IF (IBOUND.EQ.4) IFLAG = 3
      CALL E04JBN(IFLAG,N,ISTATE,FNEW,X,DELTA,SFUN,ITYPE,NFTOTL,G,W(LW4)
     *            ,W(LW5),IW,LIW,W,LW)
      IF (IFLAG.GE.0) GO TO 320
      NWHY = IFLAG
      GO TO 720
  320 CALL E04JBY(N,NFREE,ISTATE,G,W(IGA),GTG)
      GO TO 180
C
C     (2) IF CENTRAL DIFFERENCES HAVE BEEN USED AND EITHER THE
C     GRADIENT IS SMALL OR THE BOUND ON THE CONDITION NUMBER OF THE
C     PROJECTED HESSIAN HAS ALREADY BEEN REDUCED UNSUCCESSFULLY,
C     CHECK THE LAGRANGE MULTIPLIERS OF ANY FIXED VARIABLES
C     WHICH ARE NOT CONSTANTS.
C
  340 U = 1.0D+0 + ABS(FNEW)
      IF (BOUNDK.GE.1.0D+2 .AND. GTG.GE.PEPS*U*U) GO TO 380
      IF (BOUNDK.LE.1.0D+0) GO TO 360
      BOUNDK = 1.0D+0
      CALL E04JBX(NFREE,HESD,N,HESL,NH,COND)
      GO TO 180
  360 BOUNDK = SAVKBD
      NWHY = 3
      IF (N-NFREE.LE.NEQUAL) GO TO 680
      GO TO 540
C
C     (3) OTHERWISE REDUCE BOUNDK, MODIFY THE CONDITION NUMBER OF
C     THE DIAGONAL FACTOR OF THE PROJECTED HESSIAN AND TRY AGAIN.
C
  380 BOUNDK = SQRT(BOUNDK)
      DO 400 I = 1, NFREE
         HESD(I) = SQRT(HESD(I))
  400 CONTINUE
      GO TO 180
C
C     IF THE LINEAR SEARCH HAS FOUND A SUFFICIENTLY LOWER POINT,
C     E04JBS TESTS IF ANY VARIABLE HAS REACHED A BOUND. IF SO, THE
C     VARIABLE IS FIXED ON THAT BOUND, ITS INDEX IN THE PERMUTATION
C     OF FREE VARIABLES IS STORED IN JFIX, NFREE IS DECREMENTED BY
C     1, THE UPPER BOUND ON THE CONDITION NUMBER OF THE PROJECTED
C     HESSIAN IS RECOMPUTED, THE ISTATE ENTRIES ARE UPDATED, THE
C     FUNCTION IS RE-EVALUATED IF NECESSARY AND E04JBU REDUCES THE
C     CHOLESKY FACTORS OF THE PROJECTED HESSIAN. OTHERWISE E04JBS
C     RETURNS JFIX = 0.
C
  420 IF (ITYPE.EQ.1 .AND. ALPHA.GT.F06BLF(ALMIN,PNORM,FAIL)) ITYPE = 0
      XNORM = SQRT(DDOT(N,X,1,X,1))
      BOUNDK = SAVKBD
      CALL E04JBS(N,RTEPS,NFREE,ISTATE,X,BL,BU,W(IP),JFIX,BOUNDK,RECALC)
      SAVKBD = BOUNDK
      IF (JFIX.EQ.0) GO TO 460
      IF ( .NOT. RECALC) GO TO 440
      IFLAG = 0
      IW(1) = 0
      CALL SFUN(IFLAG,N,X,FNEW,W(LW1),IW,LIW,W,LW)
      NFTOTL = NFTOTL + 1
      NWHY = IFLAG
      IF (IFLAG.LT.0) GO TO 720
  440 CALL E04JBU(N,NFREE,JFIX,HESL,NH,HESD,LHPROJ,W(LW1),IFLAG)
      IF (IFLAG.EQ.0) GO TO 460
      NWHY = 4
      GO TO 720
C
C     APPROXIMATE THE NEW GRADIENT FOR THE SUBSPACE OF FREE
C     VARIABLES. IF THE SUBSPACE IS EMPTY, CHECK THE LAGRANGE
C     MULTIPLIERS FOR ANY FIXED VARIABLES WHICH ARE NOT CONSTANTS
C
  460 GTG = 0.0D+0
      IF (NFREE.EQ.0) GO TO 540
      IW(1) = -2
      IFLAG = 0
      IF (IBOUND.EQ.4) IFLAG = 3
      CALL E04JBN(IFLAG,N,ISTATE,FNEW,X,DELTA,SFUN,ITYPE,NFTOTL,G,W(LW4)
     *            ,W(LW5),IW,LIW,W,LW)
      IF (IFLAG.GE.0) GO TO 480
      NWHY = IFLAG
      GO TO 720
  480 CALL E04JBY(N,NFREE,ISTATE,G,W(IGA),GTG)
C
C     IF A NEW VARIABLE HAS BEEN FIXED BY E04JBS, E04JBR MOVES THE
C     ENTRIES WITH INDICES GREATER THAN JFIX ONE POSITION BACKWARDS
C     IN THE VECTORS CONTAINING THE SEARCH DIRECTION AND THE
C     PREVIOUS GRADIENT FOR THE SUBSPACE OF FREE VARIABLES. IT ALSO
C     DEDUCTS FROM THE INNER PRODUCT OF THE OLD PROJECTED GRADIENT
C     AND THE SEARCH DIRECTION THE PRODUCT OF THE ELEMENTS RELATING
C     TO THE NEW FIXED VARIABLE.
C
      IF (JFIX.GT.0) CALL E04JBR(N,NFREE,JFIX,GTP,W(IPA),W(IGAOLD))
      GNEWTP = -DDOT(NFREE,W(IGA),1,W(IPA),1)
C
C     E04KBY CHECKS WHETHER THE NEW GTP IS GREATER THAN THE OLD GTP.
C     IF SO, IT USES THE COMPLEMENTARY DFP RULE TO UPDATE THE
C     CHOLESKY FACTORS OF THE PROJECTED HESSIAN MATRIX. IF OVERFLOW
C     IS LIKELY TO OCCUR AT ANY STAGE, E04KBY RETURNS IMMEDIATELY
C     WITH IFLAG = - 1. IF NOT, IFLAG = 1 ON EXIT IF THE FACTORS
C     HAVE BEEN UPDATED AND 0 OTHERWISE. WHEN THE HESSIAN FACTORS
C     HAVE BEEN ALTERED BY E04KBY, E04KBZ CHECKS
C     AND, IF NECESSARY, MODIFIES THE CONDITION NUMBER OF THE
C     DIAGONAL.
C
      GPJNRM = SQRT(GTG)
      IF (GPJNRM.GE.1.0D+1*XTOL) GO TO 500
      IFLAG = 0
      GO TO 520
  500 CALL E04KBY(NFREE,ALPHA,GTP,W(IGAOLD),GNEWTP,W(IGA),W(LW1),W(LW2),
     *            HESD,HESL,LH,IFLAG)
      IF (IFLAG.GE.0) GO TO 520
      NWHY = 4
      GO TO 720
  520 IF (IFLAG.GT.0) CALL E04KBZ(NFREE,BOUNDK,HESD,COND)
C
C     TEST FOR CONVERGENCE, USING THE WEAKER CRITERIA.
C
      D = OLDF - FNEW
      U = 1.0D+0 + ABS(FNEW)
      TEST = 1.0D+0 + ABS(OLDF)
      IF (GTG.GT.CHKEPS*U*U .AND. D.GT.1.0D-1*TEST) GO TO 180
      IF (N-NFREE.LE.NEQUAL) GO TO 560
C
C     CHECK THE LAGRANGE MULTIPLIERS FOR ANY FIXED VARIABLES WHICH
C     ARE NOT CONSTANTS. UNLESS THE FULL GRADIENT IS
C     ALREADY KNOWN, E04JBN FIRST APPROXIMATES THE ELEMENTS RELATING
C     TO THE FIXED VARIABLES.
C
  540 LMTYPE = -1
      IW(1) = -3
      IFLAG = 0
      CALL E04JBN(IFLAG,N,ISTATE,FNEW,X,DELTA,SFUN,LMTYPE,NFTOTL,G,
     *            W(LW4),W(LW5),IW,LIW,W,LW)
      IF (IFLAG.GE.0) GO TO 560
      NWHY = IFLAG
      GO TO 720
C
C     E04KBX COMPUTES THE FIRST-ORDER LAGRANGE MULTIPLIER FOR EACH
C     FIXED VARIABLE X(I). IF THIS IS NEGATIVE, IT UPDATES ISTATE(I)
C     FROM - 1 TO - 4 OR FROM - 2 TO - 5. WHEN ALL MULTIPLIERS HAVE
C     BEEN COMPUTED, INEGLM CONTAINS THE INDEX OF THE MOST NEGATIVE
C     MULTIPLIER. IF EVERY MULTIPLIER IS INDISPUTABLY POSITIVE,
C     INEGLM = 0 AND LM1POS IS .TRUE. IF THE MOST NEGATIVE
C     MULTIPLIER IS CLOSE TO ZERO, A CHECK IS MADE ON ITS RELATIVE
C     SIZE. IF THIS IS TOO SMALL, INEGLM IS RESET TO 0 TO INDICATE
C     THAT NO VARIABLE SHOULD BE RELEASED. IN THAT CASE E04KBX
C     RETURNS WITH THE - 4 AND - 5 ENTRIES STILL IN ISTATE AND THE
C     NUMBER OF SUCH ENTRIES IN NUMNEG. OTHERWISE THE ENTRIES ARE
C     RESTORED TO THEIR NORMAL VALUES AND NUMNEG IS RESET TO 0.
C
  560 LSFAIL = NWHY .EQ. 3
      INEGLM = 0
      LM1POS = .TRUE.
      NUMNEG = 0
      IF (N-NFREE.GT.NEQUAL) CALL E04KBX(N,NFREE,TOLEPS,ISTATE,G,LM1POS,
     *                            INEGLM,NUMNEG)
C
C     BRANCH IF EITHER A VARIABLE IS TO BE RELEASED OR IT IS NOT
C     POSSIBLE TO CONTINUE MINIMIZING ON THE CURRENT SUBSPACE.
C     OTHERWISE TEST FOR CONVERGENCE, USING THE TIGHTER CRITERIA. IF
C     THESE ARE NOT SATISFIED, CALL E04LBU, IF NECESSARY, TO RESTORE
C     THE TEMPORARY ISTATE ENTRIES TO THEIR NORMAL VALUES AND
C     PROCEED WITH THE MINIMIZATION.
C
      IF (INEGLM.GT.0) GO TO 660
      IF ( .NOT. LM1POS .AND. (LSFAIL .OR. NFREE.EQ.0)) GO TO 620
      IF (NFREE.EQ.0) GO TO 720
      IF (LSFAIL) GO TO 680
      U = 1.0D+0 + ABS(FNEW)
      IF (GTG.LT.ENDEPS*U*U) GO TO 600
      IF (NITER.EQ.0) GO TO 580
      D = OLDF - FNEW
      IF (ALPHA*PNORM.LT.TOLRTE*(1.0D+0+XNORM) .AND. ABS(D)
     *    .LT.TSQEPS*U .AND. GTG.LT.TSQPEP*U*U) GO TO 600
  580 IF (NUMNEG.GT.0) CALL E04LBU(N,NUMNEG,ISTATE)
      GO TO 180
  600 IF ( .NOT. LM1POS) GO TO 620
      IF (LOCSCH) GO TO 680
      GO TO 720
C
C     E04KBW IS CALLED WHEN ALL THE NON-POSITIVE FIRST-ORDER
C     LAGRANGE MULTIPLIERS ARE CLOSE TO ZERO AND EITHER THE TIGHTER
C     CONVERGENCE CRITERIA ARE ALREADY SATISFIED OR IT IS NO LONGER
C     POSSIBLE TO CONTINUE MINIMIZING ON THE CURRENT SUBSPACE.
C     TAKING IN TURN EACH OF THE FIXED VARIABLES WITH NEAR-ZERO
C     MULTIPLIERS (MARKED BY AN ENTRY OF - 4 OR - 5 IN ISTATE), IT
C     MAKES A SMALL, FEASIBLE PERTURBATION IN ITS VALUE. IF ANY SUCH
C     PERTURBATION YIELDS A LOWER FUNCTION VALUE, INEGLM RETURNS THE
C     INDEX OF THE PERTURBED X(I). OTHERWISE INEGLM = 0. E04KBW ENDS
C     WITH A CALL OF E04LBU.
C
  620 IW(1) = -5
      IFLAG = 0
      CALL E04KBW(IFLAG,N,NUMNEG,NFTOTL,SFUN,FNEW,X,ISTATE,W(LW3),
     *            INEGLM,IW,LIW,W,LW)
      IF (IFLAG.LT.0) NWHY = IFLAG
      IF (INEGLM.EQ.0) GO TO 720
C
C     TAKE THE PERTURBED X AS THE STARTING POINT FOR THE NEXT
C     ITERATION. THE RE-EVALUATION OF THE FUNCTION AND APPROXIMATED
C     GRADIENT ENABLES THE LIBRARY-USER TO OBTAIN ADDITIONAL
C     INFORMATION AT THE NEW POINT.
C
      IW(1) = 0
      IFLAG = 0
      XNORM = SQRT(DDOT(N,X,1,X,1))
      CALL SFUN(IFLAG,N,X,FNEW,W(LW1),IW,LIW,W,LW)
      NFTOTL = NFTOTL + 1
      IF (IFLAG.GE.0) GO TO 640
      NWHY = IFLAG
      GO TO 720
  640 IW(1) = -2
      IFLAG = 0
      IF (IBOUND.EQ.4) IFLAG = 3
      CALL E04JBN(IFLAG,N,ISTATE,FNEW,X,DELTA,SFUN,ITYPE,NFTOTL,G,W(LW4)
     *            ,W(LW5),IW,LIW,W,LW)
      IF (IFLAG.GE.0) GO TO 660
      NWHY = IFLAG
      GO TO 720
C
C     IF X(INEGLM) IS TO BE RELEASED, E04KBV PLACES IT AT THE END OF
C     THE PERMUTATION OF FREE VARIABLES AND ADDS A ROW AND A COLUMN
C     OF THE IDENTITY MATRIX TO THE PROJECTED HESSIAN. IT THEN
C     UPDATES THE PROJECTED GRADIENT AND CALCULATES GTG. FINALLY IT
C     RECOMPUTES BOUNDK AND, IF NECESSARY, MODIFIES THE ELEMENTS OF
C     HESD.
C
  660 CALL E04KBV(N,INEGLM,G,NFREE,ISTATE,W(IGA),GTG,HESD,LHPROJ,BOUNDK,
     *            COND)
      SAVKBD = BOUNDK
      GO TO 180
C
C     THE LOCAL SEARCH ROUTINE E04JBM IS USED AS A FINAL CHECK.
C
  680 IF (IPRINT.LE.0) GO TO 700
      GPJNRM = SQRT(GTG)
      CALL E04LBW(HESD,NFREE,RMAX,IFLAG,PCOND)
      IF (IFLAG.EQ.1) PCOND = RMAX
      CALL MONIT(N,X,FNEW,G,ISTATE,GPJNRM,PCOND,.TRUE.,NITER,NFTOTL,IW,
     *           LIW,W,LW)
  700 CALL E04JBM(N,NFREE,IBOUND,MAXFUN,DELTA,RTOLSQ,TOLEPS,ENDEPS,
     *            STEPMX,SQRT(ALMIN),SFUN,MINLIN,X,BL,BU,FNEW,ISTATE,G,
     *            GTG,ITYPE,W(IGA),W(IP),HESL,LH,LHPROJ,HESD,BOUNDK,
     *            NFTOTL,LCOUNT,NWHY,FINISH,IW,LIW,W,LW)
      XNORM = SQRT(DDOT(N,X,1,X,1))
      IF ( .NOT. FINISH) GO TO 180
C
C     TERMINATION OF ALGORITHM
C
  720 F = FNEW
      IF (IPRINT.LT.0) GO TO 740
      GPJNRM = SQRT(GTG)
      COND = 0.0D+0
      IFLAG = 0
      IF (NFREE.GT.0) CALL E04LBW(HESD,NFREE,RMAX,IFLAG,COND)
      IF (IFLAG.EQ.1) COND = RMAX
      CALL MONIT(N,X,FNEW,G,ISTATE,GPJNRM,COND,.TRUE.,NITER,NFTOTL,IW,
     *           LIW,W,LW)
  740 IF (NWHY.EQ.0) GO TO 760
      IFAIL = P01ABF(IFAIL,NWHY,SRNAME,0,P01REC)
      RETURN
  760 IFAIL = 0
      RETURN
C
C     END OF E04JBL (BCQNDF)
C
      END
