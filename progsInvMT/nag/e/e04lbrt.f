      SUBROUTINE E04LBR(N,SFUN,SHESS,USERH,MONIT,IPRINT,MINLIN,MAXFUN,
     *                  ETA,XTOL,DELTA,STEPMX,IBOUND,BL,BU,X,HESL,LH,
     *                  HESD,ISTATE,F,G,IW,LIW,W,LW,IFAIL)
C
C     MARK 6 RELEASE NAG COPYRIGHT 1977
C     MARK 6A REVISED  IER-97 IER-98
C     MARK 8 REVISED. IER-238 (APR 1980).
C     MARK 8 REVISED. IER-245 (MAY 1980).
C     MARK 9 REVISED. IER-325 (SEP 1981).
C     MARK 10 REVISED. IER-379 (JUN 1982).
C     MARK 11 REVISED. IER-437 (FEB 1984).
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C     MARK 12A REVISED. IER-506 (AUG 1986).
C     MARK 13 REVISED. USE OF MARK 12 X02 FUNCTIONS (APR 1988).
C     MARK 13A REVISED. IER-630 (APR 1988).
C     MARK 14 REVISED. IER-808 (DEC 1989).
C     MARK 16 REVISED. IER-995 (JUN 1993).
C
C     **************************************************************
C
C     E04LBR (BCMNAM) USES A MODIFIED NEWTON METHOD TO MINIMIZE A
C     FUNCTION F OF THE INDEPENDENT VARIABLES X1, X2, . . . , XN ,
C     SUBJECT TO SIMPLE UPPER AND/OR LOWER BOUNDS ON THE VARIABLES.
C
C     THE USER MUST SUPPLY AN INITIAL APPROXIMATION TO THE MINIMUM,
C     A SUBROUTINE SFUN TO COMPUTE THE FUNCTION VALUE AND/OR
C     GRADIENT VECTOR, AND A SUBROUTINE SHESS TO CALCULATE THE
C     HESSIAN MATRIX. THE ARRAYS W AND IW ARE USED AS WORK-SPACE BY
C     E04LBR AND MUST BE DIMENSIONED AT LEAST MAX(8, 7*N + N(N-1)/2
C     ) AND 2, RESPECTIVELY. ON EXIT, E04LBR GIVES THE ESTIMATED
C     POSITION OF THE CONSTRAINED MINIMUM IN X AND THE LOWEST
C     FUNCTION VALUE IN F.
C
C     THE USER WHO DOES NOT WISH TO PROVIDE THE HESSIAN MATRIX CAN
C     TAKE ADVANTAGE OF THE SUBROUTINE E04LBP TO APPROXIMATE ONLY
C     THE REQUIRED ELEMENTS OF THE HESSIAN MATRIX BY MEANS OF FINITE
C     DIFFERENCES, AND THE DUMMY SUBROUTINE E04KDZ TO CALL AS THE
C     ACTUAL ARGUMENT FOR SHESS.
C
C     PHILIP E. GILL, WALTER MURRAY, SUSAN M. PICKEN, MARGARET H.
C     WRIGHT AND ENID M. R. LONG, D.N.A.C., NATIONAL PHYSICAL
C     LABORATORY, ENGLAND
C
C     **************************************************************
C
C     MINLIN, MONIT, SFUN, SHESS
C     .. Scalar Arguments ..
      DOUBLE PRECISION  DELTA, ETA, F, STEPMX, XTOL
      INTEGER           IBOUND, IFAIL, IPRINT, LH, LIW, LW, MAXFUN, N
      LOGICAL           USERH
C     .. Array Arguments ..
      DOUBLE PRECISION  BL(N), BU(N), G(N), HESD(N), HESL(LH), W(LW),
     *                  X(N)
      INTEGER           ISTATE(N), IW(LIW)
C     .. Subroutine Arguments ..
      EXTERNAL          MINLIN, MONIT, SFUN, SHESS
C     .. Arrays in Common ..
      DOUBLE PRECISION  WMACH(15)
C     .. Local Scalars ..
      DOUBLE PRECISION  ALPHA, BNDMAX, CHKEPS, COND, DEL, DIFF, ENDEPS,
     *                  EPS, EPSA, EPSMCH, EPSR, FNEW, GPJNRM, GTG, GTP,
     *                  OLDF, PEPS, PNORM, RDELTA, RMAX, RTEPS, RTOL,
     *                  RTOLSQ, SIGNUM, SPE, T, TEST, TNYTOL, TOLABS,
     *                  TOLAX, TOLEPS, TOLREL, TOLRTE, TOLRX, TSQEPS,
     *                  TSQPEP, U, XNORM, SSPE
      INTEGER           I, IFLAG, IGPJ, IHD, IHDI, IHL, INEGLM, IP, IPA,
     *                  IQ, J, LHPROJ, LW1, LW2, LW3, NEQUAL, NFREE,
     *                  NFTOTL, NH, NITER, NUMF, NUMNEG, NWHY, ILM
      LOGICAL           FAIL, LM2POS, LSFAIL, NOMOVE, POSDEF, RECALC,
     *                  TIGHT
C     .. External Functions ..
      DOUBLE PRECISION  DDOT, F06BLF, X02AJF, X02ALF
      EXTERNAL          DDOT, F06BLF, X02AJF, X02ALF
C     .. External Subroutines ..
      EXTERNAL          E04LBB, E04LBG, E04LBH, E04LBJ, E04LBL, E04LBM,
     *                  E04LBN, E04LBP, E04LBQ, E04LBV, E04LBW, E04LBX,
     *                  E04LBY, E04LBZ, F01BQZ, F04AQZ, X02ZAZ
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX, MOD, SQRT
C     .. Common blocks ..
      COMMON            /AX02ZA/WMACH
C     .. Save statements ..
      SAVE              /AX02ZA/
C     .. Executable Statements ..
      ILM = 0
      CALL X02ZAZ
C
C     TWO MACHINE-DEPENDENT CONSTANTS ARE SET HERE. EPSMCH IS THE
C     SMALLEST POSITIVE REAL NUMBER SUCH THAT 1 + EPSMCH .GT. 1.
C     RMAX IS THE LARGEST POSITIVE REAL NUMBER SUCH THAT BOTH RMAX
C     AND - RMAX CAN BE HELD IN THE MACHINE.
C
      EPSMCH = X02AJF()
      RMAX = X02ALF()
C
C     SET PARAMETERS DEPENDENT ON EPSMCH.
C
      RTEPS = SQRT(EPSMCH)
      PEPS = EPSMCH**0.6666D+0
      CHKEPS = 1.0D-2
      ENDEPS = 1.0D-4*EPSMCH
      TOLEPS = RTEPS
      RTOL = XTOL
      IF (ABS(RTOL).LT.EPSMCH) RTOL = 1.0D+1*RTEPS
      RTOLSQ = RTOL*RTOL
      RDELTA = DELTA
      IF (ABS(RDELTA).LT.EPSMCH) RDELTA = RTEPS
      TOLRTE = RTOL + RTEPS
      TSQEPS = RTOLSQ + EPSMCH
      TSQPEP = RTOLSQ + PEPS
      GTG = 0.0D+0
C
C     CHECK INPUT PARAMETERS.
C
      NWHY = 1
      NH = N*(N-1)/2
      IF (NH.EQ.0) NH = 1
      IF (LW.LT.7*N+NH .OR. LIW.LT.2 .OR. LH.LT.NH .OR. N.LT.1 .OR.
     *    RTOL.LT.0.0D+0 .OR. ETA.GE.1.0D+0 .OR. ETA.LT.0.0D+0 .OR.
     *    STEPMX.LT.RTOL .OR. MAXFUN.LT.1 .OR. RDELTA.LT.0.0D+0 .OR.
     *    IBOUND.LT.0 .OR. IBOUND.GT.4) GO TO 540
      IF (IBOUND.NE.3) GO TO 20
      IF (BL(1).GT.BU(1)) GO TO 540
   20 IF (IBOUND.NE.0) GO TO 60
      DO 40 J = 1, N
         IF (BL(J).GT.BU(J)) GO TO 540
   40 CONTINUE
   60 CONTINUE
      NWHY = 0
C
C     COMPUTE STARTING POSITIONS FOR SUBDIVISIONS OF WORKSPACE.
C
      LW1 = 1
      LW2 = LW1 + N
      LW3 = LW2 + N
      IP = LW3 + N
      IGPJ = IP + N
      IPA = IGPJ + N
      IHD = IPA + N
      IHL = IHD + N
C
C     IF REQUESTED BY THE USER, E04LBZ SETS THE LOWER AND UPPER
C     BOUNDS ON ALL VARIABLES UNIFORMLY TO THE VALUES INDICATED BY
C     THE PARAMETER IBOUND. IF IBOUND IS ZERO, THE USER HAS ALREADY
C     SET THE BOUNDS.
C
      IF (IBOUND.GT.0) CALL E04LBZ(N,IBOUND,BNDMAX,BL,BU)
C
C     E04LBY CHECKS THE INITIAL X(I) VALUES. ANY VARIABLE WHICH LIES
C     CLOSE TO OR BEYOND A BOUND IT FIXES ON THAT BOUND, SETTING
C     ISTATE(I) TO - 2 FOR A LOWER BOUND AND - 1 FOR AN UPPER BOUND.
C     IF THE UPPER BOUND IS SET EQUAL TO THE LOWER BOUND, THAT IS,
C     IF X(I) IS EFFECTIVELY A CONSTANT, THEN ISTATE(I) IS SET TO -
C     3. NEQUAL RETURNS THE NUMBER OF CONSTANT X(I) AND NFREE
C     THE NUMBER OF FREE X(I), THAT IS THOSE WITH POSITIVE
C     ENTRIES IN ISTATE
C
      NEQUAL = 0
      CALL E04LBY(N,RTEPS,X,BL,BU,NFREE,ISTATE,NEQUAL)
C
C     PREPARE FOR FIRST ITERATION. INEGLM HAS A NEGATIVE DUMMY
C     VALUE. IMMEDIATELY AFTER A MULTIPLIER TEST IT RETURNS EITHER
C     THE POSITIVE INDEX OF THE VARIABLE TO BE RELEASED OR, IF NO
C     CONSTRAINT IS DELETED, THE VALUE ZERO.
C
      INEGLM = -1
      NITER = 0
      ALPHA = 0.0D+0
      PNORM = 0.0D+0
      NOMOVE = .FALSE.
      TIGHT = .FALSE.
C
C     EVALUATE THE FUNCTION AND THE GRADIENT AT THE INITIAL POINT.
C     THE SETTING OF IW(1), WHICH MUST NOT BE CHANGED, ENABLES THE
C     LIBRARY- USER TO DETERMINE FROM WHICH SUBROUTINE SFUN IS
C     CALLED. A NEGATIVE VALUE OF IFLAG INDICATES FAILURE IN THE
C     USER-SUPPLIED ROUTINE SFUN.
C
      IW(1) = 0
      IFLAG = 2
      CALL SFUN(IFLAG,N,X,FNEW,G,IW,LIW,W,LW)
      NFTOTL = 1
      OLDF = FNEW
      XNORM = SQRT(DDOT(N,X,1,X,1))
      IF (IFLAG.GE.0) GO TO 80
      NWHY = IFLAG
      GO TO 520
C
C     IF ALL VARIABLES ARE INITIALLY FIXED, CHECK THE MULTIPLIERS
C     FOR ANY FIXED VARIABLES WHICH ARE NOT CONSTANTS.
C
   80 F = FNEW
      IF (NEQUAL.EQ.N) GO TO 520
      IF (NFREE.GT.0) GO TO 100
      GTG = 0.0D+0
      GO TO 460
C
C     ****************** START OF ITERATION LOOP ******************
C
  100 NWHY = 0
      F = FNEW
C
C     CHECK THE NUMBER OF FUNCTION EVALUATIONS.
C
      IF (NFTOTL.LE.MAXFUN) GO TO 120
      NWHY = 2
      GO TO 520
C
C     BRANCH ACCORDING TO WHETHER A MOVE HAS BEEN MADE OR NOT.
C
  120 IFLAG = 1
      IW(1) = -4
      U = 1.0D+0 + ABS(FNEW)
      IF ( .NOT. NOMOVE) GO TO 160
C
C     WHEN NO MOVE HAS BEEN MADE, TEST FOR CONVERGENCE IMMEDIATELY
C     IF NO CONSTRAINT HAS BEEN DELETED. OTHERWISE UPDATE THE
C     PROJECTED GRADIENT AND THE CHOLESKY FACTORS OF THE PROJECTED
C     HESSIAN.
C
      IF (INEGLM.EQ.0) GO TO 300
      IF (USERH) GO TO 140
C
C     IF THE HESSIAN IS CALCULATED, THE FULL MATRIX IS ALREADY
C     STORED IN W. OTHERWISE E04LBQ UPDATES THE FINITE-DIFFERENCE
C     APPROXIMATION OF THE PROJECTED HESSIAN AND COMPUTES SUCH
C     ADDITIONAL ELEMENTS OF THE FULL MATRIX AS WILL BE NEEDED FOR
C     THE CALCULATION OF THE SECOND-ORDER LAGRANGE MULTIPLIERS.
C
      CALL E04LBQ(IFLAG,N,NH,X,G,ISTATE,INEGLM,SFUN,RDELTA,W(IHL),W(IHD)
     *            ,IW,LIW,W,LW)
      IF (IFLAG.GE.0) GO TO 140
      NWHY = IFLAG
      GO TO 520
C
C     E04LBN UPDATES THE PROJECTED GRADIENT AND THE CHOLESKY FACTORS
C     OF THE PROJECTED HESSIAN.
C
  140 CALL E04LBN(N,NFREE,INEGLM,ISTATE,G,W(IHD),W(IHL),NH,W(IGPJ),HESD,
     *            HESL,LH,DEL,IQ,LHPROJ,W,LW)
      GO TO 240
C
C     WHEN A MOVE HAS BEEN MADE, RECOMPUTE THE PROJECTED HESSIAN.
C
  160 IF (USERH) GO TO 180
C
C     E04LBP COMPUTES A FINITE-DIFFERENCE APPROXIMATION OF THE
C     PROJECTED HESSIAN MATRIX AND OF SUCH ADDITIONAL ELEMENTS OF
C     THE FULL HESSIAN AS WILL BE NEEDED FOR THE CALCULATION OF
C     SECOND-ORDER MULTIPLIERS.
C
      CALL E04LBP(IFLAG,N,NH,X,G,ISTATE,SFUN,RDELTA,W(IHL),W(IHD),IW,
     *            LIW,W,LW)
      IF (IFLAG.GE.0) GO TO 220
      NWHY = IFLAG
      GO TO 520
C
C     ALTERNATIVELY THE USER-SUPPLIED ROUTINE SHESS CALCULATES THE
C     FULL HESSIAN AT THE NEW POINT.
C
  180 IHDI = IHD
      DO 200 I = 1, N
         W(IHDI) = G(I)
         IHDI = IHDI + 1
  200 CONTINUE
      CALL SHESS(IFLAG,N,X,W(IHL),NH,W(IHD),IW,LIW,W,LW)
      IF (IFLAG.GE.0) GO TO 220
      NWHY = IFLAG
      GO TO 520
C
C     E04LBX IS CALLED TO PACK THE RELEVANT ELEMENTS OF THE FULL
C     GRADIENT AND HESSIAN VECTORS IN THE PROJECTED GRADIENT AND
C     HESSIAN VECTORS AND TO MAKE A POSITIVE ENTRY IN ISTATE(I) FOR
C     EACH FREE VARIABLE X(I). LHPROJ RETURNS THE NUMBER OF ENTRIES
C     IN HESL.
C
  220 CALL E04LBX(N,ISTATE,G,W(IHD),W(IHL),NH,W(IGPJ),HESD,HESL,LH,
     *            LHPROJ)
      IF (LHPROJ.EQ.0) LHPROJ = 1
C
C     FORM THE CHOLESKY FACTORS OF THE NEW PROJECTED HESSIAN BY
C     CALLING F01BQZ (FRMCHL) WITH SOFT FAILURE OPTION.
C
      DEL = EPSMCH
      IQ = 1
      CALL F01BQZ(NFREE,DEL,HESL,LHPROJ,HESD,IQ)
C
C     COMPUTE A SEARCH DIRECTION PA IN THE SUBSPACE OF FREE
C     VARIABLES, USING E04LBB WHEN THE PROJECTED GRADIENT IS SMALL
C     AND THE PROJECTED HESSIAN IS NOT POSITIVE DEFINITE, BUT
C     OTHERWISE F04AQZ (LDLTSL). THEN SET SIGNUM TO - 1 OR + 1 TO
C     ENSURE A DESCENT DIRECTION.
C
  240 POSDEF = IQ .EQ. 0
      GTG = DDOT(NFREE,W(IGPJ),1,W(IGPJ),1)
      IF (GTG.LE.RTEPS*U*U .AND. .NOT. POSDEF) GO TO 260
C
C     F04AQZ SOLVES LDLT.PA = G
C
      CALL F04AQZ(NFREE,LHPROJ,HESL,HESD,W(IGPJ),W(IPA))
      SIGNUM = -1.0D+0
      GTP = -DDOT(NFREE,W(IGPJ),1,W(IPA),1)
      GO TO 280
C
C     E04LBB SOLVES LT.PA = E(IQ), WHERE E(IQ) IS THE IQ-TH COLUMN
C     OF THE IDENTITY MATRIX.
C
  260 CALL E04LBB(NFREE,LHPROJ,IQ,HESL,W(IPA))
      SIGNUM = 1.0D+0
      GTP = DDOT(NFREE,W(IGPJ),1,W(IPA),1)
      IF (GTP.LE.0.0D+0) GO TO 280
      SIGNUM = -1.0D+0
      GTP = -GTP
C
C     E04LBV EXPANDS PA INTO THE N-DIMENSIONAL VECTOR REQUIRED BY
C     THE LINEAR SEARCH ROUTINE.
C
  280 CALL E04LBV(N,ISTATE,W(IPA),SIGNUM,W(IP))
      NOMOVE = .TRUE.
      IF ( .NOT. POSDEF) GO TO 340
C
C     CHECK FOR CONVERGENCE, APPLYING THE MORE STRINGENT TESTS IF
C     ALL THE MULTIPLIERS HAVE JUST PROVED POSITIVE. IF THE
C     APPROPRIATE CRITERIA ARE SATISFIED, CHECK THE MULTIPLIERS
C     FOR ANY VARIABLES WHICH ARE NOT CONSTANTS.
C     OTHERWISE CONTINUE MINIMIZING ON THE CURRENT SUBSPACE.
C
  300 DIFF = OLDF - FNEW
      IF (INEGLM.EQ.0) GO TO 320
      TEST = 1.0D-1*(1.0D+0+ABS(OLDF))
      IF (ILM.EQ.1) GO TO 340
      IF (GTG.GT.CHKEPS*U*U .AND. (NITER.EQ.0 .OR. DIFF.GT.TEST))
     *    GO TO 340
      IF (N-NFREE.GT.NEQUAL) GO TO 460
  320 IF (((ALPHA*PNORM.GE.TOLRTE*(1.0D+0+XNORM)) .OR. (ABS(DIFF)
     *    .GE.TSQEPS*U) .OR. (GTG.GE.TSQPEP*U*U) .OR. (NITER.EQ.0))
     *     .AND. (GTG.GE.ENDEPS*U*U)) GO TO 340
      TIGHT = .TRUE.
      GO TO 460
C
C     CALL MONIT EVERY IPRINT ITERATIONS. E04LBW COMPUTES COND AS
C     THE ESTIMATED CONDITION NUMBER OF THE PROJECTED HESSIAN,
C     RETURNING IFLAG = 1 IF IT IS TOO BIG FOR THE MACHINE.
C
  340 GPJNRM = SQRT(GTG)
      IF (IPRINT.LE.0) GO TO 360
      IF (MOD(NITER,IPRINT).NE.0) GO TO 360
      CALL E04LBW(HESD,NFREE,RMAX,IFLAG,COND)
      IF (IFLAG.NE.0) COND = RMAX
      CALL MONIT(N,X,FNEW,G,ISTATE,GPJNRM,COND,POSDEF,NITER,NFTOTL,IW,
     *           LIW,W,LW)
C
C     PREPARE TO ENTER THE LINEAR SEARCH ROUTINE.
C
  360 INEGLM = -1
      PNORM = SQRT(DDOT(NFREE,W(IPA),1,W(IPA),1))
      ALPHA = 1.0D+0
      OLDF = FNEW
      SPE = F06BLF(STEPMX,PNORM,FAIL)
C
C     E04LBM MODIFIES SPE TO THE MAXIMUM FEASIBLE STEP THAT MAY BE
C     TAKEN ALONG THE DIRECTION OF SEARCH.
C
      CALL E04LBM(N,SPE,EPSMCH,X,BL,BU,W(IP))
      IF (ALPHA.GE.SPE) ALPHA = SPE
C
C     PERFORM THE LINEAR SEARCH.
C
      IW(1) = -1
      U = 1.0D+0 + ABS(FNEW)
      EPSA = 1.0D+1*EPSMCH*U
      EPSR = EPSA/U
      TOLRX = EPSR/(SQRT(EPSR)-ETA*F06BLF(GTP,PNORM*GPJNRM,FAIL))
      TOLREL = MAX(EPSMCH,TOLRX)
      EPS = TOLREL
      TNYTOL = EPSMCH*F06BLF(1.0D+0+XNORM,PNORM,FAIL)
      TOLAX = EPSA/(SQRT(EPSA)-F06BLF(GTP,PNORM,FAIL))
      TOLABS = F06BLF(TOLRX*XNORM+TOLAX,PNORM,FAIL)
      T = MAX(TNYTOL,TOLABS)
      SSPE = SPE
      ILM = 0
      CALL MINLIN(N,SFUN,EPS,T,ETA,0.0D+0,SPE,W(IP),GTP,X,FNEW,ALPHA,G,
     *            NUMF,IFLAG,IW,LIW,W,LW)
      IF (SSPE.EQ.0.0D+0) IFLAG = 0
      IF (SSPE.EQ.0.0D+0) ALPHA = 0.0D+0
      IF (SSPE.EQ.0.0D+0) ILM = 1
      NITER = NITER + 1
      NFTOTL = NFTOTL + NUMF
      IF (IFLAG) 380, 420, 400
C
C     A NEGATIVE VALUE OF IFLAG INDICATES THAT THE USER WISHES TO
C     TERMINATE THE OPTIMIZATION.
C
  380 NWHY = IFLAG
      GO TO 520
C
C     A POSITIVE VALUE OF IFLAG INDICATES FAILURE IN THE LINEAR
C     SEARCH. THIS NECESSITATES CHECKING THE LAGRANGE MULTIPLIERS.
C
  400 NWHY = 3
      GO TO 460
C
C     A ZERO VALUE OF IFLAG INDICATES SUCCESS IN THE LINEAR SEARCH.
C     E04LBL FIXES ANY FREE VARIABLES WHICH HAVE MOVED ON TO BOUNDS.
C     PROCEED TO THE NEXT ITERATION IF SOME VARIABLES ARE STILL
C     FREE. OTHERWISE CHECK THE LAGRANGE MULTIPLIERS
C     FOR ANY FIXED VARIABLES WHICH ARE NOT CONSTANTS.
C
  420 NOMOVE = .FALSE.
      XNORM = SQRT(DDOT(N,X,1,X,1))
      CALL E04LBL(N,NFREE,RTEPS,ISTATE,X,BL,BU,W(IP),RECALC)
      IF ( .NOT. RECALC) GO TO 440
      IFLAG = 2
      IW(1) = 0
      CALL SFUN(IFLAG,N,X,FNEW,G,IW,LIW,W,LW)
      NFTOTL = NFTOTL + 1
      IF (IFLAG.GE.0) GO TO 440
      NWHY = IFLAG
      GO TO 540
  440 IF (NFREE.GT.0) GO TO 100
      GTG = 0.0D+0
C
C     E04LBJ COMPUTES THE FIRST-ORDER MULTIPLIER RLM1 FOR EACH FIXED
C     VARIABLE X(ILM). IF THIS IS NEGATIVE, IT COMPUTES THE SECOND-
C     ORDER MULTIPLIER RLM2, USING E04LBK TO CALCULATE THE
C     ADDITIONAL TERM IF IT IS STILL POSSIBLE TO CONTINUE MINIMIZING
C     ON THE CURRENT SUBSPACE BUT OTHERWISE SETTING RLM2 = RLM1. IF
C     RLM2 IS NEGATIVE AND SUFFICIENTLY CLOSE TO RLM1, IT UPDATES
C     ISTATE(ILM) FROM - 1 TO - 4 OR FROM - 2 TO - 5. WHEN ALL
C     MULTIPLIERS HAVE BEEN COMPUTED, RNEGLM CONTAINS THE ACTUAL
C     VALUE AND INEGLM THE INDEX OF THE MOST NEGATIVE MULTIPLIER. IF
C     INEGLM = 0, THAT IS, IF ALL MULTIPLIERS ARE INDISPUTABLY
C     NEGATIVE, LM2POS IS SET TO .TRUE. OTHERWISE, E04LBT CHECKS THE
C     RELATIVE SIZE OF RNEGLM. IF THIS IS TOO SMALL, IT RESETS
C     INEGLM TO ZERO TO INDICATE THAT NO VARIABLE SHOULD IMMEDIATELY
C     BE RELEASED. IF, IN ADDITION, THE TIGHTER CONVERGENCE CRITERIA
C     ARE SATISFIED OR IT IS NO LONGER POSSIBLE TO CONTINUE
C     MINIMIZING ON THE CURRENT SUBSPACE, E04LNJ RETURNS TO E04LBR
C     WITH THE - 4 AND - 5 ENTRIES STILL IN ISTATE AND THE NUMBER OF
C     SUCH ENTRIES IN NUMNEG. OTHERWISE E04LBU RESTORES THE ENTRIES
C     TO THEIR NORMAL VALUES AND NUMNEG TO ZERO.
C
  460 F = FNEW
      IF (N-NFREE.LE.NEQUAL) GO TO 520
      LSFAIL = NWHY .EQ. 3
      CALL E04LBJ(N,NFREE,TOLEPS,LSFAIL,TIGHT,ISTATE,G,W(IP),W(IHL),NH,
     *            LM2POS,INEGLM,NUMNEG)
C
C     WHEN THERE IS NO NEGATIVE MULTIPLIER, ACCEPT THE SOLUTION IF
C     (1) THE TIGHTER CONVERGENCE CRITERIA ARE SATISFIED OR (2) ALL
C     THE VARIABLES ARE FIXED OR (3) THE LAST LINEAR SEARCH WAS
C     UNSUCCESSFUL. OTHERWISE CONTINUE MINIMIZING ON THE CURRENT
C     SUBSPACE IF THIS IS POSSIBLE. IF NOT, BRANCH TO 200.
C
      IF (LM2POS .AND. (TIGHT .OR. NFREE.EQ.0 .OR. LSFAIL)) GO TO 520
      IF (NUMNEG.GT.0) GO TO 480
C
C     E04LBH RELEASES THE VARIABLE X(INEGLM) FROM ITS BOUND, UPDATES
C     THE ISTATE ENTRIES ACCORDINGLY AND SETS TIGHT TO .FALSE.
C
      IF (INEGLM.GT.0) CALL E04LBH(N,INEGLM,TIGHT,ISTATE,NFREE)
      GO TO 100
C
C     WHEN ALL THE NON-POSITIVE LAGRANGE MULTIPLIERS ARE CLOSE TO
C     ZERO AND EITHER THE TIGHTER CONVERGENCE CRITERIA ARE ALREADY
C     SATISFIED OR IT IS NO LONGER POSSIBLE TO CONTINUE MINIMIZING
C     ON THE CURRENT SUBSPACE, E04LBG RELEASES IN TURN EACH OF THE
C     FIXED VARIABLES WITH NEAR-ZERO MULTIPLIERS (MARKED BY AN ENTRY
C     OF - 4 OR - 5 IN ISTATE) UNTIL A DIRECTION OF NEGATIVE
C     CURVATURE IS OBTAINED, THAT IS, UNTIL THE PROJECTED HESSIAN
C     CEASES TO BE POSITIVE DEFINITE. IT THEN COMPUTES A SEARCH
C     DIRECTION AND TAKES A SMALL STEP ALONG IT. IF THE TRIAL POINT
C     IS INFEASIBLE, OR IF ITS FUNCTION VALUE IS NO LOWER, E04LBG
C     RETURNS WITH IFLAG = 5. OTHERWISE IT TAKES A SERIES OF
C     INCREASING STEPS UNTIL THE FUNCTION VALUE CEASES TO DECREASE
C     OR A BOUND IS VIOLATED. IT THEN ACCEPTS THE FEASIBLE POINT
C     WITH THE LOWEST FUNCTION VALUE AS THE STARTING POINT FOR THE
C     NEXT ITERATION. THE RE-EVALUATION OF THE FUNCTION AND THE
C     GRADIENT ENABLES THE LIBRARY-USER TO OBTAIN ADDITIONAL
C     INFORMATION AT THE NEW POINT.
C
  480 IF ( .NOT. NOMOVE) DEL = EPSMCH
      CALL E04LBG(IFLAG,N,NFREE,NUMNEG,NFTOTL,NOMOVE,USERH,SHESS,DEL,
     *            RDELTA,BL,BU,SFUN,FNEW,X,ISTATE,G,W(IGPJ),W(IHD),HESD,
     *            W(IHL),NH,HESL,LH,LHPROJ,IQ,INEGLM,TIGHT,IW,LIW,W,LW)
      IF (IFLAG.GE.0 .AND. IFLAG.NE.5) GO TO 500
      NWHY = IFLAG
      GO TO 520
  500 IW(1) = 0
      XNORM = SQRT(DDOT(N,X,1,X,1))
      IFLAG = 2
      CALL SFUN(IFLAG,N,X,FNEW,G,IW,LIW,W,LW)
      NFTOTL = NFTOTL + 1
      IF (IFLAG.GE.0) GO TO 100
      NWHY = IFLAG
C
C     TERMINATION OF ALGORITHM
C
  520 IF (IPRINT.LT.0) GO TO 540
      GPJNRM = SQRT(GTG)
      IFLAG = 0
      COND = 0.0D+0
      IF (NFREE.GT.0) CALL E04LBW(HESD,NFREE,RMAX,IFLAG,COND)
      IF (IFLAG.NE.0) COND = RMAX
      CALL MONIT(N,X,FNEW,G,ISTATE,GPJNRM,COND,POSDEF,NITER,NFTOTL,IW,
     *           LIW,W,LW)
  540 IFAIL = NWHY
      RETURN
C
C     END OF E04LBR (BCMNAM)
C
      END
