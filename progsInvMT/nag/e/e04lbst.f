      SUBROUTINE E04LBS(N,SFUN,EPS,T,ETA,SFTBND,XLAMDA,P,GTP,X,F,ALPHA,
     *                  G,NFTOTL,IFLAG,IW,LIW,W,LW)
C
C     MARK 6 RELEASE NAG COPYRIGHT 1977
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C     MARK 14 REVISED. IER-809 (DEC 1989).
C
C     **************************************************************
C
C     E04LBS (LINDER) FINDS AN APPROXIMATION ALPHA TO THE POINT AT
C     WHICH THE FUNCTION F(X + ALPHA*P) ATTAINS ITS MINIMUM VALUE
C     ALONG THE DIRECTION P. THE METHOD USED IS THAT OF SUCCESSIVE
C     CUBIC INTERPOLATION WITH SAFEGUARDS, DESCRIBED IN D.N.A.C.
C     REPORT NO. 37. THE REAL FUNCTION DDOT IS USED IN E04LBS.
C     NOTE THAT BOTH FUNCTION AND GRADIENT VALUES ARE CALCULATED.
C     E04LBS CALLS E04BBZ TO GIVE THE STEP-LENGTH TO EACH POINT.
C     THERE IS AN ALTERNATIVE LINEAR SEARCH SUBROUTINE CALLED E04JBQ
C     IN WHICH FUNCTION VALUES ONLY ARE CALCUL- ATED. E04JBQ MAY BE
C     USED WHEN THE GRADIENT VECTOR IS UNAVAILABLE, OR WHEN IT IS
C     EXPENSIVE TO COMPUTE COMPARED WITH THE FUNCTION VALUE. IF THE
C     EVALUATION OF G TAKES MORE THAN ABOUT 4 TIMES AS LONG AS ONE
C     EVALUATION OF F, E04JBQ WILL USUALLY BE PREFERABLE. IF IN
C     DOUBT, USE SUBROUTINE E04LBS AS IT IS SLIGHTLY MORE ROBUST.
C     THE PARAMETER LISTS OF E04LBS AND E04JBQ ARE THE SAME, AND
C     CONSEQUENTLY THE SUB- ROUTINES ARE EASILY INTERCHANGED. THE
C     SUBROUTINE E04LBS GIVES A NEW GRADIENT VECTOR, THE SUBROUTINE
C     E04JBQ DOES NOT. IF IFLAG = 0 OR 1, THEN E04LBS HAS BEEN USED
C     AND THE NEW GRADIENT VECTOR IS IN G. IF IFLAG = 2 OR 3, E04JBQ
C     HAS BEEN USED AND G HAS NOT BEEN UPDATED. A NEGATIVE VALUE OF
C     IFLAG ON RETURN FROM SFUN INDICATES THAT THE USER WISHES TO
C     TERMINATE THE OPTIMIZATION. THE LENGTH OF THE WORKSPACE VECTOR
C     W SHOULD BE AT LEAST 3*N. LW SHOULD BE SET TO THE ACTUAL
C     LENGTH OF W.
C
C     PHILIP E. GILL, WALTER MURRAY, SUSAN M. PICKEN, MARGARET H.
C     WRIGHT AND ENID M. R. LONG D.N.A.C., NATIONAL PHYSICAL
C     LABORATORY, ENGLAND
C
C     **************************************************************
C
C     SFUN
C     .. Scalar Arguments ..
      DOUBLE PRECISION  ALPHA, EPS, ETA, F, GTP, SFTBND, T, XLAMDA
      INTEGER           IFLAG, LIW, LW, N, NFTOTL
C     .. Array Arguments ..
      DOUBLE PRECISION  G(N), P(N), W(LW), X(N)
      INTEGER           IW(LIW)
C     .. Subroutine Arguments ..
      EXTERNAL          SFUN
C     .. Local Scalars ..
      DOUBLE PRECISION  A, B, B1, D, E, FMIN, FU, FW, GMIN, GTEST1,
     *                  GTEST2, GU, GW, OLDF, R, RR, SCXBD, SS, TOL, U,
     *                  XMIN, XW
      INTEGER           I, ILOC, ITEST, ITG1, ITG2, ITX, LTG1, LTG2,
     *                  LTX, NUMF
C     .. External Functions ..
      DOUBLE PRECISION  DDOT
      EXTERNAL          DDOT
C     .. External Subroutines ..
      EXTERNAL          E04BBZ
C     .. Executable Statements ..
      LTX = 1
      LTG1 = LTX + N
      LTG2 = LTG1 + N
      NUMF = 0
      U = ALPHA
      FU = F
      FMIN = F
      GU = GTP
      ILOC = 1
   20 CALL E04BBZ(EPS,T,ETA,XLAMDA,U,FU,GU,XMIN,FMIN,GMIN,XW,FW,GW,A,B,
     *            OLDF,B1,SCXBD,E,D,RR,SS,GTEST1,GTEST2,TOL,ILOC,ITEST)
C
C     IF ITEST = 1, THE ALGORITHM REQUIRES THE FUNCTION VALUE TO BE
C     CALCULATED.
C
      IF (ITEST.NE.1) GO TO 80
      R = XMIN + U
      ITX = LTX
      DO 40 I = 1, N
         W(ITX) = X(I) + R*P(I)
         ITX = ITX + 1
   40 CONTINUE
      IFLAG = 2
      CALL SFUN(IFLAG,N,W(LTX),FU,W(LTG1),IW,LIW,W,LW)
      NUMF = NUMF + 1
      IF (IFLAG.LT.0) GO TO 80
      GU = DDOT(N,W(LTG1),1,P,1)
      IF (FU.GT.FMIN .AND. ILOC.EQ.2) GO TO 20
      ITG1 = LTG1
      ITG2 = LTG2
      DO 60 I = 1, N
         W(ITG2) = W(ITG1)
         ITG1 = ITG1 + 1
         ITG2 = ITG2 + 1
   60 CONTINUE
      GO TO 20
   80 NFTOTL = NUMF
      IF (IFLAG.LT.0) RETURN
C
C     IF ITEST = 2 OR 3, A LOWER POINT COULD NOT BE FOUND.
C
      IFLAG = 1
      IF (ITEST.NE.0) RETURN
C
C     IF ITEST = 0, A SUCCESSFUL SEARCH HAS BEEN MADE.
C
      ALPHA = XMIN
      ITG2 = LTG2
      DO 100 I = 1, N
         X(I) = X(I) + ALPHA*P(I)
         G(I) = W(ITG2)
         ITG2 = ITG2 + 1
  100 CONTINUE
      F = FMIN
      IFLAG = 0
      RETURN
C
C     END OF E04LBS (LINDER)
C
      END
