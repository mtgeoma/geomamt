      SUBROUTINE E04VDW(FIRSTV,HITLOW,ISTATE,INFORM,JADD,N,NROWA,NCLIN,
     *                  NCLIN0,NCTOTL,NUMINF,ALFA,PALFA,ATPHIT,BIGALF,
     *                  BIGBND,PNORM,ANORM,AP,AX,BL,BU,FEATOL,P,X)
C     MARK 12 RE-ISSUE. NAG COPYRIGHT 1986.
C
C
C     ******************************************************************
C     E04VDW FINDS A STEP  ALFA  SUCH THAT THE POINT  X + ALFA*P
C     REACHES ONE OF THE LINEAR CONSTRAINTS (INCLUDING BOUNDS).
C     TWO POSSIBLE STEPS ARE DEFINED AS FOLLOWS...
C
C     ALFA1   IS THE MAXIMUM STEP THAT CAN BE TAKEN WITHOUT VIOLATING
C          ONE OF THE LINEAR CONSTRAINTS THAT IS CURRENTLY SATISFIED.
C     ALFA2   REACHES A LINEAR CONSTRAINT THAT IS CURRENTLY VIOLATED.
C          USUALLY THIS WILL BE THE FURTHEST SUCH CONSTRAINT ALONG  P,
C          BUT IF  FIRSTV = .TRUE.  IT WILL BE THE FIRST ONE ALONG  P.
C          THIS IS USED ONLY BY  E04MBY  WHEN THE PROBLEM HAS BEEN
C          DETERMINED TO BE INFEASIBLE, AND WE ARE NOW MINIMIZING THE
C          SUM OF INFEASIBILITIES.
C          (ALFA2  IS NOT DEFINED IF NUMINF = 0.)
C
C     ALFA  WILL USUALLY BE THE MINIMUM OF  ALFA1  AND  ALFA2.
C     ALFA  COULD BE NEGATIVE (SINCE WE ALLOW INACTIVE CONSTRAINTS
C     TO BE VIOLATED BY AS MUCH AS  FEATOL).  IN SUCH CASES, A
C     THIRD POSSIBLE STEP IS COMPUTED, TO FIND THE NEAREST SATISFIED
C     CONSTRAINT (PERTURBED BY  FEATOL) ALONG THE DIRECTION  - P.
C     ALFA  WILL BE RESET TO THIS STEP IF IT IS SHORTER.  THIS IS THE
C     ONLY CASE FOR WHICH THE FINAL STEP  ALFA  DOES NOT MOVE  X
C     EXACTLY ONTO A CONSTRAINT (THE ONE DENOTED BY  JADD).
C
C     CONSTRAINTS IN THE WORKING SET ARE IGNORED  (ISTATE(J) GE 1).
C
C     JADD    DENOTES WHICH LINEAR CONSTRAINT IS REACHED.
C
C     HITLOW  INDICATES WHETHER IT IS THE LOWER OR UPPER BOUND THAT
C          HAS RESTRICTED  ALFA.
C
C     VALUES OF ISTATE(J)....
C
C     - 2         - 1         0           1          2         3
C     A*X LT BL   A*X GT BU   A*X FREE   A*X = BL   A*X = BU   BL = BU
C
C     THE VALUES -2 AND -1 DO NOT OCCUR ONCE E04MBY FINDS A FEASIBLE
C     POINT.
C
C     SYSTEMS OPTIMIZATION LABORATORY, STANFORD UNIVERSITY.
C     VERSION OF MAY 1982.  REV. OCT. 1982.  FEB. 1984.
C     ******************************************************************
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION  ALFA, ATPHIT, BIGALF, BIGBND, PALFA, PNORM
      INTEGER           INFORM, JADD, N, NCLIN, NCLIN0, NCTOTL, NROWA,
     *                  NUMINF
      LOGICAL           FIRSTV, HITLOW
C     .. Array Arguments ..
      DOUBLE PRECISION  ANORM(NCLIN0), AP(NCLIN0), AX(NROWA),
     *                  BL(NCTOTL), BU(NCTOTL), FEATOL(NCTOTL), P(N),
     *                  X(N)
      INTEGER           ISTATE(NCTOTL)
C     .. Scalars in Common ..
      INTEGER           ISTART, MSG, NOUT
C     .. Arrays in Common ..
      DOUBLE PRECISION  PARM(10)
C     .. Local Scalars ..
      DOUBLE PRECISION  ABSATP, ALFA1, ALFA2, APMAX1, APMAX2, ATP, ATP1,
     *                  ATP2, ATX, EPSPT9, ONE, PALFA1, PALFA2, RES,
     *                  ROWNRM, ZERO
      INTEGER           I, J, JADD1, JADD2, JS, JSAVE1, JSAVE2
      LOGICAL           HLOW1, HLOW2, LASTV, NEGSTP, NOLOW, NOUPP, STEP2
C     .. Local Arrays ..
      CHARACTER*110     REC(4)
C     .. External Subroutines ..
      EXTERNAL          E04VDX, X04BAF
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MIN
C     .. Common blocks ..
      COMMON            /AE04VC/NOUT, MSG, ISTART
      COMMON            /CE04VC/PARM
C     .. Data statements ..
      DATA              ZERO, ONE/0.0D+0, 1.0D+0/
C     .. Executable Statements ..
C
      EPSPT9 = PARM(4)
C
      INFORM = 0
C
C     ------------------------------------------------------------------
C     FIRST PASS -- FIND STEPS TO PERTURBED CONSTRAINTS, SO THAT
C     PALFA1  WILL BE SLIGHTLY LARGER THAN THE TRUE STEP, AND
C     PALFA2  WILL BE SLIGHTLY SMALLER THAN IT SHOULD BE.  IN DEGENERATE
C     CASES, THIS STRATEGY GIVES US SOME FREEDOM IN THE SECOND PASS.
C     THE GENERAL IDEA FOLLOWS THAT DESCRIBED BY P.M.J. HARRIS, P.21 OF
C     MATHEMATICAL PROGRAMMING 5, 1 (1973), 1--28.
C     ------------------------------------------------------------------
C
      NEGSTP = .FALSE.
      CALL E04VDX(FIRSTV,NEGSTP,BIGALF,BIGBND,PNORM,JADD1,JADD2,PALFA1,
     *            PALFA2,ISTATE,N,NCLIN0,NROWA,NCTOTL,ANORM,AP,AX,BL,BU,
     *            FEATOL,P,X)
C
      JSAVE1 = JADD1
      JSAVE2 = JADD2
C
C     ------------------------------------------------------------------
C     SECOND PASS -- RECOMPUTE STEP-LENGTHS WITHOUT PERTURBATION.
C     AMONGST CONSTRAINTS THAT ARE CLOSE TO THE PERTURBED STEPS,
C     CHOOSE THE ONE (OF EACH TYPE) THAT MAKES THE LARGEST ANGLE
C     WITH THE SEARCH DIRECTION.
C     ------------------------------------------------------------------
      IF (MSG.EQ.99) THEN
         WRITE (REC,FMT=99999)
         CALL X04BAF(NOUT,REC(1))
         CALL X04BAF(NOUT,REC(2))
         CALL X04BAF(NOUT,REC(3))
         CALL X04BAF(NOUT,REC(4))
      END IF
      ALFA1 = BIGALF
      ALFA2 = ZERO
      IF (FIRSTV) ALFA2 = BIGALF
C
      APMAX1 = ZERO
      APMAX2 = ZERO
      ATP1 = ZERO
      ATP2 = ZERO
      HLOW1 = .FALSE.
      HLOW2 = .FALSE.
      LASTV = .NOT. FIRSTV
C
      DO 240 J = 1, NCTOTL
         JS = ISTATE(J)
         IF (JS.GT.0) GO TO 240
         IF (J.GT.N) GO TO 20
C
C        BOUND CONSTRAINT.
C
         ATX = X(J)
         ATP = P(J)
         ROWNRM = ONE
         GO TO 40
C
C        GENERAL LINEAR CONSTRAINT.
C
   20    I = J - N
         ATX = AX(I)
         ATP = AP(I)
         ROWNRM = ANORM(I) + ONE
C
   40    IF (ABS(ATP).GT.EPSPT9*ROWNRM*PNORM) GO TO 60
         RES = -ONE
         GO TO 220
   60    IF (ATP.GT.ZERO) GO TO 140
C
C        ATX IS DECREASING.
C        TEST FOR SMALLER ALFA1 IF LOWER BOUND IS SATISFIED.
C
         IF (JS.EQ.(-2)) GO TO 220
         ABSATP = -ATP
         NOLOW = BL(J) .LE. (-BIGBND)
         IF (NOLOW) GO TO 80
         RES = ATX - BL(J)
         IF (PALFA1*ABSATP.LT.RES .AND. J.NE.JSAVE1) GO TO 80
         IF (APMAX1*ROWNRM*PNORM.GE.ABSATP) GO TO 80
         APMAX1 = ABSATP/(ROWNRM*PNORM)
         ALFA1 = RES/ABSATP
         JADD1 = J
         ATP1 = ATP
         HLOW1 = .TRUE.
C
C        TEST FOR BIGGER ALFA2 IF UPPER BOUND IS VIOLATED.
C
   80    IF (JS.NE.(-1)) GO TO 220
         RES = ATX - BU(J)
         IF (LASTV .AND. PALFA2*ABSATP.GT.RES .AND. J.NE.JSAVE2)
     *       GO TO 220
         IF (FIRSTV .AND. PALFA2*ABSATP.LT.RES .AND. J.NE.JSAVE2)
     *       GO TO 220
         IF (APMAX2*ROWNRM*PNORM.GE.ABSATP) GO TO 220
         APMAX2 = ABSATP/(ROWNRM*PNORM)
         ALFA2 = BIGALF
         IF (ABSATP.LT.ONE) GO TO 100
         ALFA2 = RES/ABSATP
         GO TO 120
  100    IF (RES.LT.BIGALF*ABSATP) ALFA2 = RES/ABSATP
  120    JADD2 = J
         ATP2 = ATP
         HLOW2 = .FALSE.
         GO TO 220
C
C        ATX IS INCREASING.
C        TEST FOR SMALLER ALFA1 IF UPPER BOUND IS SATISFIED.
C
  140    IF (JS.EQ.(-1)) GO TO 220
         NOUPP = BU(J) .GE. BIGBND
         IF (NOUPP) GO TO 160
         RES = BU(J) - ATX
         IF (PALFA1*ATP.LT.RES .AND. J.NE.JSAVE1) GO TO 160
         IF (APMAX1*ROWNRM*PNORM.GE.ATP) GO TO 160
         APMAX1 = ATP/(ROWNRM*PNORM)
         ALFA1 = RES/ATP
         JADD1 = J
         ATP1 = ATP
         HLOW1 = .FALSE.
C
C        TEST FOR BIGGER ALFA2 IF LOWER BOUND IS VIOLATED.
C
  160    IF (JS.NE.(-2)) GO TO 220
         RES = BL(J) - ATX
         IF (LASTV .AND. PALFA2*ATP.GT.RES .AND. J.NE.JSAVE2)
     *       GO TO 220
         IF (FIRSTV .AND. PALFA2*ATP.LT.RES .AND. J.NE.JSAVE2)
     *       GO TO 220
         IF (APMAX2*ROWNRM*PNORM.GE.ATP) GO TO 220
         APMAX2 = ATP/(ROWNRM*PNORM)
         ALFA2 = BIGALF
         IF (ATP.LT.ONE) GO TO 180
         ALFA2 = RES/ATP
         GO TO 200
  180    IF (RES.LT.BIGALF*ATP) ALFA2 = RES/ATP
  200    JADD2 = J
         ATP2 = ATP
         HLOW2 = .TRUE.
C
  220    IF (MSG.EQ.99) THEN
            WRITE (REC,FMT=99998) J, JS, FEATOL(J), ATX, ATP, JADD1,
     *        ALFA1, JADD2, ALFA2
            CALL X04BAF(NOUT,REC(1))
         END IF
  240 CONTINUE
C
C     ------------------------------------------------------------------
C     IF FEASIBLE, ONLY ALFA1 WILL HAVE BEEN SET.
C     ------------------------------------------------------------------
      ALFA = ALFA1
      PALFA = PALFA1
      JADD = JADD1
      ATPHIT = ATP1
      HITLOW = HLOW1
      IF (NUMINF.EQ.0) GO TO 260
      IF (JADD2.EQ.0) GO TO 260
C
C     INFEASIBLE -- SEE IF WE STEP TO THE FURTHEST VIOLATED CONSTRAINT.
C     BE PREPARED TO STEP IN THE RANGE  (ALFA1, PALFA1)  IF THE VIOLATED
C     CONSTRAINT HAS A LARGER VALUE OF  AP.
C
      STEP2 = ALFA2 .LT. ALFA1 .OR. (ALFA2.LE.PALFA1 .AND. APMAX2.GE.
     *        APMAX1)
      IF ( .NOT. STEP2) GO TO 260
      ALFA = ALFA2
      JADD = JADD2
      ATPHIT = ATP2
      HITLOW = HLOW2
      GO TO 280
C
C     TEST FOR NEGATIVE STEP.
C     JADD  WILL RETAIN ITS CURRENT VALUE, BUT WE MAY SHORTEN  ALFA
C     TO BE  - PALFA1,  THE STEP TO THE NEAREST PERTURBED SATISFIED
C     CONSTRAINT ALONG THE DIRECTION  - P.
C
  260 NEGSTP = ALFA .LT. ZERO
      IF ( .NOT. NEGSTP) GO TO 280
C
      CALL E04VDX(FIRSTV,NEGSTP,BIGALF,BIGBND,PNORM,JADD1,JADD2,PALFA1,
     *            PALFA2,ISTATE,N,NCLIN0,NROWA,NCTOTL,ANORM,AP,AX,BL,BU,
     *            FEATOL,P,X)
C
      IF (MSG.GE.80) THEN
         WRITE (REC,FMT=99997) ALFA, PALFA1
         CALL X04BAF(NOUT,REC(1))
         CALL X04BAF(NOUT,REC(2))
         CALL X04BAF(NOUT,REC(3))
         CALL X04BAF(NOUT,REC(4))
      END IF
      ALFA = -MIN(ABS(ALFA),PALFA1)
C
C     TEST FOR UNDEFINED OR INFINITE STEP.  THIS SHOULD MEAN THAT THE
C     SOLUTION IS UNBOUNDED.
C
  280 IF (JADD.EQ.0) ALFA = BIGALF
      IF (JADD.EQ.0) PALFA = BIGALF
      IF (JADD.EQ.0) INFORM = 2
      IF (ALFA.GE.BIGALF) INFORM = 3
      IF (MSG.GE.80 .AND. INFORM.GT.0) THEN
         WRITE (REC,FMT=99996) JADD, ALFA
         CALL X04BAF(NOUT,REC(1))
         CALL X04BAF(NOUT,REC(2))
         CALL X04BAF(NOUT,REC(3))
         CALL X04BAF(NOUT,REC(4))
      END IF
      RETURN
C
C
C     END OF E04VDW (BNDALF)
99999 FORMAT (/' E04VDW ENTERED',/'    J  JS         FEATOL         AX',
     *  '             AP     JADD1        ALFA1     JADD2        ALFA2',
     *  /)
99998 FORMAT (I5,I4,3G15.5,2(I6,G17.7))
99997 FORMAT (/' //E04VDW//  NEGATIVE STEP.',/' //E04VDW//           A',
     *  'LFA          PALFA',/' //E04VDW//',2G15.4)
99996 FORMAT (/' //E04VDW//  UNBOUNDED STEP.',/' //E04VDW//  JADD     ',
     *  '      ALFA',/' //E04VDW//  ',I4,G15.4)
      END
