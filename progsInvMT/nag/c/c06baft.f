      SUBROUTINE C06BAF(SEQN,NCALL,RESULT,ABSERR,WORK,IWORK,IFAIL)
C     MARK 10 RELEASE. NAG COPYRIGHT 1982.
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C     MARK 13 REVISED. USE OF MARK 12 X02 FUNCTIONS (APR 1988).
C     MARK 14C REVISED. IER-870 (NOV 1990).
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     MODIFIED VERSION OF ROUTINE D01AJY (EPSILON ALGORITHM)
C     BASED ON QUADPACK ROUTINE EPSALG
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     PURPOSE
C        THE ROUTINE TRANSFORMS A GIVEN SEQUENCE OF
C        APPROXIMATIONS, BY MEANS OF THE EPSILON
C        ALGORITHM OF P. WYNN, AND PREDICTS A LIMIT
C        FOR THE SEQUENCE.
C        AN ESTIMATE OF THE ABSOLUTE ERROR IS ALSO GIVEN.
C        THE CONDENSED EPSILON TABLE IS COMPUTED. ONLY THOSE
C        ELEMENTS NEEDED FOR THE COMPUTATION OF THE
C        NEXT DIAGONAL ARE PRESERVED.
C
C     PARAMETERS
C        SEQN   - THE NEW ELEMENT IN THE FIRST COLUMN
C                 OF THE EPSILON TABLE.
C
C        NCALL  - NUMBER OF CALLS MADE TO THE ROUTINE.
C                 MUST BE SET TO ZERO BEFORE FIRST ENTRY
C                 AND UNCHANGED BETWEEN CALLS.
C
C        RESULT - RESULTING APPROXIMATION TO THE LIMIT
C                 OF THE SEQUENCE.
C
C        ABSERR - ESTIMATE OF THE ABSOLUTE ERROR COMPUTED FROM
C                 RESULT AND THE 3 PREVIOUS /RESULTS/
C
C        WORK   - ONE DIMENSION ARRAY OF SIZE IWORK
C
C        IWORK  - DIMENSION OF WORK. MUST BE .GT. 8
C                 PREFERABLY IWORK.GE.(MAX NUMBER OF SEQN)+6
C
C        IFAIL  - ON EXIT =1 IF NCALL .LT. ZERO
C                         =2 IF IWORK .LT. 9
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     MODIFICATIONS
C     THE TWO ARRAYS EPSTAB AND RES3LA HAVE BEEN COMBINED
C     TO ONE WORK ARRAY - RES3LA(1),(2),(3) IS NOW
C                          WORK (2),(3),(4)
C                    AND  EPSTAB(1),(2),...,(N) IS NOW
C                          WORK (5),(6),...,(N+4).
C     SEQN HAD TO BE ASSIGNED TO SOME ELEMENT OF EPSTAB
C     BEFORE CALLING THIS ROUTINE IN ORIGINAL FORM, IS NOW
C     ASSIGNED TO WORK(I) INSIDE THIS ROUTINE WHERE INFO
C     NECESSARY TO DETERMINE I IS PASSED VIA WORK(1).
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     /LIMEXP/ IS THE MAXIMUM NUMBER OF ELEMENTS THE EPSILON
C     TABLE CAN CONTAIN. IF THIS NUMBER IS REACHED, THE UPPER
C     DIAGONAL OF THE EPSILON TABLE IS DELETED.
C
C     .. Parameters ..
      CHARACTER*6       SRNAME
      PARAMETER         (SRNAME='C06BAF')
C     .. Scalar Arguments ..
      DOUBLE PRECISION  ABSERR, RESULT, SEQN
      INTEGER           IFAIL, IWORK, NCALL
C     .. Array Arguments ..
      DOUBLE PRECISION  WORK(IWORK)
C     .. Local Scalars ..
      DOUBLE PRECISION  DELTA1, DELTA2, DELTA3, E0, E1, E1ABS, E2, E3,
     *                  EPMACH, EPSINF, ERR1, ERR2, ERR3, OFLOW, RES,
     *                  SS, TOL1, TOL2, TOL3
      INTEGER           I, IB, IB2, IE, IERR, IND, K1, K2, K3, LIMEXP,
     *                  N, NEWELM, NUM
C     .. Local Arrays ..
      CHARACTER*1       P01REC(1)
C     .. External Functions ..
      DOUBLE PRECISION  X02AJF, X02ALF
      INTEGER           P01ABF
      EXTERNAL          X02AJF, X02ALF, P01ABF
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX, MOD, SQRT
C     .. Executable Statements ..
      LIMEXP = IWORK - 2
C
C     MACHINE DEPENDENT CONSTANTS
C     ---------------------------
C
      EPMACH = X02AJF()
      OFLOW = SQRT(X02ALF())
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C          LIST OF MAJOR VARIABLES
C          -----------------------
C          E0     - THE 4 ELEMENTS ON WHICH THE
C          E1       COMPUTATION OF A NEW ELEMENT IN
C          E2       THE EPSILON TABLE IS BASED
C          E3                 E0
C                       E3    E1    NEW
C                             E2
C          NEWELM - NUMBER OF ELEMENTS TO BE COMPUTED IN THE NEW
C                   DIAGONAL
C          RESULT - THE ELEMENT ON THE FAR RIGHT OF THE NEW DIAGONAL
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      IERR = 1
      IF (NCALL.LT.0) GO TO 200
      IERR = 2
      IF (IWORK.LT.9) GO TO 200
      IERR = 0
      IF (NCALL.EQ.0) WORK(1) = 4.0D0
      N = WORK(1)
      N = N + 1
      NCALL = NCALL + 1
      WORK(N) = SEQN
      ABSERR = OFLOW
      RESULT = WORK(N)
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     MODIFICATION
C     USED TO BE GOTO 180, LEAVING THE 1ST 2 RESULTS UNRECORDED
C     FOR ABSERR PURPOSES
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      IF (N.LT.7) GO TO 140
      WORK(N+2) = WORK(N)
      NEWELM = (N-5)/2
      WORK(N) = OFLOW
      NUM = N
      K1 = N
      DO 60 I = 1, NEWELM
         K2 = K1 - 1
         K3 = K1 - 2
         RES = WORK(K1+2)
         E0 = WORK(K3)
         E1 = WORK(K2)
         E2 = RES
         E1ABS = ABS(E1)
         E3 = WORK(K1)
         WORK(K1) = E1
         DELTA1 = E1 - E3
         ERR1 = ABS(DELTA1)
         TOL1 = MAX(E1ABS,ABS(E3))*EPMACH
         DELTA2 = E2 - E1
         ERR2 = ABS(DELTA2)
         TOL2 = MAX(ABS(E2),E1ABS)*EPMACH
         DELTA3 = E1 - E0
         ERR3 = ABS(DELTA3)
         TOL3 = MAX(E1ABS,ABS(E0))*EPMACH
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        IF TWO ELEMENTS ARE VERY CLOSE TO EACH OTHER, OMIT
C        A PART OF THE TABLE BY ADJUSTING THE VALUE OF N
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
         IF (ERR1.LE.TOL1 .OR. ERR2.LE.TOL2 .OR. ERR3.LE.TOL3)
     *       GO TO 20
         SS = 1.0D0/DELTA1 + 1.0D0/DELTA2 - 1.0D0/DELTA3
         EPSINF = ABS(SS*E1)
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        TEST TO DETECT IRREGULAR BEHAVIOUR IN THE TABLE, AND
C        EVENTUALLY OMIT A PART OF THE TABLE ADJUSTING THE VALUE
C        OF N
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        MODIFICATION
C        THE TEST FOR IRREGULAR BEHAVIOUR DOES NOT NOW TAKE
C        PLACE AFTER COMPUTING THE NEW ELEMENT IN THE 2ND
C        COLUMN OF EPS TABLE (I.E. DURING THE FIRST TIME
C        ROUND THE I=1,NEWELM LOOP).
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
         IF (EPSINF.GT.0.1D-03 .OR. I.EQ.1) GO TO 40
   20    N = I + I + 3
         GO TO 80
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        COMPUTE A NEW ELEMENT AND EVENTUALLY ADJUST
C        THE VALUE OF RESULT
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
   40    RES = E1 + 1.0D0/SS
         WORK(K1) = RES
         K1 = K1 - 2
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        MODIFICATION
C        THE FOLLOWING 3 LINES OF CODE SELECTED THE BEST ELEMENT ON THE
C        NEWLY COMPUTED LOWER DIAGONAL-NOT THE ELEMENT ON THE FAR RIGHT
C        OF THE TABLE. SINCE THIS BEST ELEMENT IS RARELY BETTER THAN
C        AND OCCASSIONALLY MUCH WORSE THAN THE FAR RIGHTHAND ELEMENT
C        THEY HAVE BEEN COMMENTED OUT.THE FAR RIGHTHAND ELEMENT IS
C        RETURNED AS THE RESULT.
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        ERROR = ERR2 + ABS(RES-E2) + ERR3
C        IF (ERROR.GT.ABSERR) GO TO 80
C        ABSERR = ERROR
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
         RESULT = RES
   60 CONTINUE
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     SHIFT THE TABLE
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
   80 IF (N.EQ.LIMEXP) N = 2*(LIMEXP/2) - 1
      IB = 5
      IF (MOD(NUM,2).EQ.0) IB = 6
      IE = NEWELM + 1
      DO 100 I = 1, IE
         IB2 = IB + 2
         WORK(IB) = WORK(IB2)
         IB = IB2
  100 CONTINUE
      IF (NUM.EQ.N) GO TO 140
      IND = NUM - N + 5
      DO 120 I = 5, N
         WORK(I) = WORK(IND)
         IND = IND + 1
  120 CONTINUE
  140 IF (NCALL.GE.4) GO TO 160
      WORK(NCALL+1) = RESULT
      ABSERR = OFLOW
      GO TO 180
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     COMPUTE ERROR ESTIMATE
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  160 ABSERR = ABS(RESULT-WORK(4)) + ABS(RESULT-WORK(3)) +
     *         ABS(RESULT-WORK(2))
      WORK(2) = WORK(3)
      WORK(3) = WORK(4)
      WORK(4) = RESULT
  180 ABSERR = MAX(ABSERR,5.0D+00*EPMACH*ABS(RESULT))
      WORK(1) = N
  200 IFAIL = P01ABF(IFAIL,IERR,SRNAME,0,P01REC)
      RETURN
      END
