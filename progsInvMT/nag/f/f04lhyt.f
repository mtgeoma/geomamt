      SUBROUTINE F04LHY(N,NBLOKS,BLKSTR,A,LENA,PIVOT,B,LDB,IR)
C     MARK 13 RELEASE. NAG COPYRIGHT 1988.
C     MARK 14 REVISED. IER-744 (DEC 1989).
C     .. Parameters ..
      DOUBLE PRECISION  ONE
      PARAMETER         (ONE=1.0D0)
C     .. Scalar Arguments ..
      INTEGER           IR, LDB, LENA, N, NBLOKS
C     .. Array Arguments ..
      DOUBLE PRECISION  A(LENA), B(LDB,IR)
      INTEGER           BLKSTR(3,NBLOKS), PIVOT(N)
C     .. Local Scalars ..
      INTEGER           APTR, BPTR, I, I1, INDEXA, INDPIV, IP, IPIV,
     *                  IPPLUS, IPTR, J, LDB1, LDB2, M, NCLBLK, NCLOLD,
     *                  NCLPIV, NCOL, NCPOLD, NOVRLP, NRWBLK, NRWOLD,
     *                  NRWPIV, PIVPTR, XPTR, XPTR1
      LOGICAL           SINGLE
C     .. External Subroutines ..
      EXTERNAL          DGEMM, DTRSM, F04LHX, DSWAP
C     .. Executable Statements ..
      SINGLE = IR .EQ. 1
      LDB1 = LDB
      LDB2 = LDB
      NRWBLK = BLKSTR(1,1)
      BPTR = 1
      INDPIV = 0
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     USE PIVOT INFORMATION FROM COLUMN ELIMINATIONS WITH COLUMN
C     PIVOTING TO TRANSFORM RIGHT HAND SIDES .
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      NCLPIV = 0
      IPTR = 0
      DO 40 I = 1, NBLOKS - 1
         NCOL = BLKSTR(2,I)
         NOVRLP = BLKSTR(3,I)
         NRWBLK = BLKSTR(1,I)
         NCPOLD = NCLPIV
         NRWPIV = NCOL - NOVRLP - NCPOLD
         NCLPIV = NRWBLK - NRWPIV
         DO 20 J = NRWPIV + 1, NRWBLK
            PIVPTR = IPTR + J + NCPOLD
            IP = PIVOT(PIVPTR)
            IF (IP.NE.NCPOLD+J) THEN
               IPPLUS = IP + IPTR
               CALL DSWAP(IR,B(IPPLUS,1),LDB,B(PIVPTR,1),LDB)
            END IF
   20    CONTINUE
         IPTR = IPTR + NRWPIV + NCPOLD
   40 CONTINUE
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     FORWARD LOOP .
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      NCPOLD = 0
      APTR = 1
      NRWBLK = BLKSTR(1,1)
      NCLBLK = BLKSTR(2,1)
      BPTR = 1
      DO 60 M = 1, NBLOKS - 1
         INDEXA = APTR + NRWBLK*NCPOLD
         NOVRLP = BLKSTR(3,M)
         NRWPIV = NCLBLK - NOVRLP - NCPOLD
         NCLPIV = NRWBLK - NRWPIV
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        FORWARD SOLUTION AND MODIFICATION IN ONE BLOCK FROM COLUMN
C        ELIMINATIONS WITH ROW PIVOTING .
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         IF (NRWPIV.GT.0) THEN
            IF (SINGLE) LDB1 = LDB - BPTR + 1
            CALL F04LHX('L','U','T','N',NRWPIV+NOVRLP,IR,1,NRWPIV,
     *                  A(INDEXA),NRWBLK,B(BPTR,1),LDB1)
         END IF
         INDEXA = INDEXA + NRWBLK*NRWPIV + NRWPIV
         BPTR = BPTR + NRWPIV
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        FORWARD SOLUTION AND MODIFICATION IN ONE BLOCK FROM COLUMN
C        ELIMINATIONS WITH COLUMN PIVOTING .
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         IF (NCLPIV.GT.0) THEN
            IF (SINGLE) LDB1 = LDB - BPTR + 1
            CALL F04LHX('L','U','T','N',NOVRLP,IR,1,NCLPIV,A(INDEXA),
     *                  NRWBLK,B(BPTR,1),LDB1)
         END IF
         NCPOLD = NCLPIV
         APTR = APTR + NRWBLK*NCLBLK
         BPTR = BPTR + NCLPIV
         NRWBLK = BLKSTR(1,M+1)
         NCLBLK = BLKSTR(2,M+1)
   60 CONTINUE
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     LAST BLOCK HANDLED SEPARATELY .
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      INDEXA = APTR + NCPOLD*NRWBLK
      IF (SINGLE) LDB1 = LDB - BPTR + 1
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     FORWARD SOLUTION FROM LAST BLOCK .
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      CALL DTRSM('L','U','T','N',NRWBLK,IR,1.0D0,A(INDEXA),NRWBLK,
     *           B(BPTR,1),LDB1)
      XPTR = BPTR
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     BACKWARD SOLUTION FROM LAST BLOCK .
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      CALL DTRSM('L','L','T','U',NRWBLK,IR,1.0D0,A(INDEXA),NRWBLK,
     *           B(XPTR,1),LDB1)
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     USE PIVOT INFORMATION FROM COLUMN ELIMINATION WITH ROW PIVOTING
C     TO TRANSFORM RIGHT HAND SIDES .
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      INDPIV = N - NRWBLK
      DO 80 I = NRWBLK, 1, -1
         I1 = INDPIV + I
         IPIV = PIVOT(I1)
         IF (I.NE.IPIV) THEN
            CALL DSWAP(IR,B(I1,1),LDB,B(INDPIV+IPIV,1),LDB)
         END IF
   80 CONTINUE
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     BACKWARD LOOP .
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      DO 120 M = NBLOKS - 1, 1, -1
         NCPOLD = NCLPIV
         NRWOLD = NRWBLK
         NCLOLD = NCLBLK
         XPTR1 = XPTR - NCPOLD
         IF (SINGLE) THEN
            LDB1 = LDB - XPTR1 + 1
            LDB2 = LDB - XPTR + 1
         END IF
         NRWBLK = BLKSTR(1,M)
         NCLBLK = BLKSTR(2,M)
         NOVRLP = BLKSTR(3,M)
         NRWPIV = NRWBLK - NCLPIV
         NCLPIV = NCLBLK - NOVRLP - NRWPIV
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        BACKWARD MODIFICATION FROM OVERLAP WITH NEXT BLOCK .
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         IF (NCPOLD.GT.0) THEN
            CALL DGEMM('T','N',NCPOLD,IR,NRWOLD,-ONE,A(APTR),NRWOLD,
     *                  B(XPTR,1),LDB2,ONE,B(XPTR1,1),LDB1)
         END IF
         APTR = APTR - NCLBLK*NRWBLK
         INDEXA = APTR + (NCLBLK-NOVRLP)*NRWBLK + NRWPIV
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        BACKWARD SOLUTION FROM COLUMN ELIMINATION WITH COLUMN PIVOTING
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         IF (NCPOLD.GT.0) THEN
            IF (SINGLE) LDB1 = LDB - XPTR1 + 1
            CALL DTRSM('L','L','T','U',NCPOLD,IR,1.0D0,A(INDEXA),NRWBLK,
     *                 B(XPTR1,1),LDB1)
         END IF
         INDEXA = APTR + NCLPIV*NRWBLK
         XPTR = XPTR - NRWBLK
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        BACKWARD MODIFICATION AND SOLUTION FROM COLUMN ELIMINATIONS
C        WITH ROW PIVOTING .
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         IF (NRWPIV.GT.0) THEN
            IF (SINGLE) LDB1 = LDB - XPTR + 1
            CALL F04LHX('L','L','T','U',NRWBLK,IR,1,NRWPIV,A(INDEXA),
     *                  NRWBLK,B(XPTR,1),LDB1)
         END IF
         INDPIV = INDPIV - NRWBLK
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        USE PIVOT INFORMATION FROM COLUMN ELIMINATIONS WITH ROW
C        PIVOTING TO TRANSFORM RIGHT HAND SIDES .
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         DO 100 I = NRWPIV, 1, -1
            I1 = INDPIV + I
            IPIV = PIVOT(I1)
            IF (I.NE.IPIV) THEN
               CALL DSWAP(IR,B(I1,1),LDB,B(INDPIV+IPIV,1),LDB)
            END IF
  100    CONTINUE
  120 CONTINUE
C
      RETURN
      END
