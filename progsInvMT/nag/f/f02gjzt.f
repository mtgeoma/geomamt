      SUBROUTINE F02GJZ(N,AR,IAR,AI,IAI,BR,IBR,BI,IBI,ALFR,ALFI,BETA,ZR,
     *                  IZR,ZI,IZI)
C     MARK 8 RELEASE. NAG COPYRIGHT 1979.
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C
C     THIS ROUTINE IS A COMPLEX ANALOGUE OF THE FOURTH STEP OF THE
C     QZ ALGORITHM FOR SOLVING GENERALIZED MATRIX EIGENVALUE
C     PROBLEMS
C     SIAM J. NUMER. ANAL. 10, 241-256(1973) BY MOLER AND STEWART.
C
C     THIS ROUTINE ACCEPTS A PAIR OF COMPLEX MATRICES IN UPPER
C     TRIANGULAR FORM, WHERE ONE OF THEM FURTHER MUST HAVE REAL
C     DIAGONAL ELEMENTS. IT COMPUTES THE EIGENVECTORS OF THE
C     TRIANGULAR PROBLEM AND TRANSFORMS THE RESULTS BACK TO THE
C     ORIGINAL COORDINATE SYSTEM. IT IS USUALLY PRECEDED BY
C     F02GJX AND F02GJY.
C
C     ON INPUT
C
C     N IS THE ORDER OF THE MATRICES.
C
C     A=(AR,AI) CONTAINS A COMPLEX UPPER TRIANGULAR MATRIX.
C
C     B=(BR,BI) CONTAINS A COMPLEX UPPER TRIANGULAR MATRIX WITH REAL
C     DIAGONAL ELEMENTS.  IN ADDITION, LOCATION BR(N,1) CONTAINS
C     THE TOLERANCE QUANTITY (EPSB) COMPUTED AND SAVED IN  F02GJY.
C
C     ALFR, ALFI, AND BETA ARE VECTORS WITH COMPONENTS WHOSE
C     RATIOS ((ALFR+I*ALFI)/BETA) ARE THE GENERALIZED
C     EIGENVALUES.  THEY ARE USUALLY OBTAINED FROM F02GJY.
C
C     Z=(ZR,ZI) CONTAINS THE TRANSFORMATION MATRIX PRODUCED IN THE
C     REDUCTIONS BY  F02GJX  AND  F02GJY, IF PERFORMED.
C     IF THE EIGENVECTORS OF THE TRIANGULAR PROBLEM ARE
C     DESIRED, Z MUST CONTAIN THE IDENTITY MATRIX.
C
C     IAR, IAI, IBR, IBI, IZR AND IZI MUST SPECIFY THE FIRST
C     DIMENSIONS OF THE ARRAYS AR, AI, BR, BI, ZR AND ZI AS DECLARED
C     IN THE CALLING (SUB)PROGRAM.
C     IAR,IAI,IBR,IBI,IZR,IZI.GE.N  .
C
C     ON OUTPUT
C
C     A IS UNALTERED.
C
C     B HAS BEEN DESTROYED.
C
C     ALFR, ALFI, AND BETA ARE UNALTERED.
C
C     Z CONTAINS THE EIGENVECTORS.  EACH EIGENVECTOR IS NORMALIZED
C     SO THAT THE SUM OF SQUARES OF THE MODULI OF THE COMPONENTS IS
C     EQUAL TO 1.0 AND THE COMPONENT OF LARGEST MODULUS IS REAL.
C
C     IMPLEMENTED FROM EISPACK BY
C     W. PHILLIPS OXFORD UNIVERSITY COMPUTING SERVICE.
C
C     .. Scalar Arguments ..
      INTEGER           IAI, IAR, IBI, IBR, IZI, IZR, N
C     .. Array Arguments ..
      DOUBLE PRECISION  AI(IAI,N), ALFI(N), ALFR(N), AR(IAR,N), BETA(N),
     *                  BI(IBI,N), BR(IBR,N), ZI(IZI,N), ZR(IZR,N)
C     .. Local Scalars ..
      DOUBLE PRECISION  ALMI, ALMR, BETM, C, D, EPSB, MAX, R, RI, SUM,
     *                  T, TERM, TI, XI, ZERO
      INTEGER           EN, I, II, J, JJ, K, M, NA, NN
C     .. External Subroutines ..
      EXTERNAL          A02ACF
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, SQRT
C     .. Data statements ..
      DATA              ZERO/0.0D0/
C     .. Executable Statements ..
      IF (N.LE.1) GO TO 300
      EPSB = BR(N,1)
C     ---------- FOR EN=N STEP -1 UNTIL 2 DO -- ----------
      DO 80 NN = 2, N
         EN = N + 2 - NN
         NA = EN - 1
         ALMR = ALFR(EN)
         ALMI = ALFI(EN)
         BETM = BETA(EN)
C        ---------- FOR I=EN-1 STEP -1 UNTIL 1 DO -- ----------
         DO 60 II = 1, NA
            I = EN - II
            R = ZERO
            RI = ZERO
            M = I + 1
C
            DO 40 J = M, EN
               T = BETM*AR(I,J) - ALMR*BR(I,J) + ALMI*BI(I,J)
               TI = BETM*AI(I,J) - ALMR*BI(I,J) - ALMI*BR(I,J)
               IF (J.EQ.EN) GO TO 20
               XI = T*BI(J,EN) + TI*BR(J,EN)
               T = T*BR(J,EN) - TI*BI(J,EN)
               TI = XI
   20          R = R + T
               RI = RI + TI
   40       CONTINUE
C
            T = ALMR*BETA(I) - BETM*ALFR(I)
            TI = ALMI*BETA(I) - BETM*ALFI(I)
            IF (T.EQ.ZERO .AND. TI.EQ.ZERO) T = EPSB
            CALL A02ACF(R,RI,T,TI,BR(I,EN),BI(I,EN))
   60    CONTINUE
C
   80 CONTINUE
C     END BACK SUBSTITUTION.
C     TRANSFORM THE ORIGINAL COORDINATE SYSTEM.
C     FOR J=N STEP -1 UNTIL 2 DO
      DO 140 JJ = 2, N
         J = N + 2 - JJ
         M = J - 1
C
         DO 120 I = 1, N
C
            DO 100 K = 1, M
               ZR(I,J) = ZR(I,J) + ZR(I,K)*BR(K,J) - ZI(I,K)*BI(K,J)
               ZI(I,J) = ZI(I,J) + ZR(I,K)*BI(K,J) + ZI(I,K)*BR(K,J)
  100       CONTINUE
C
  120    CONTINUE
  140 CONTINUE
C     NORMALIZE SO THAT THE SUM OF SQUARES OF THE MODULI OF THE
C     COMPONENTS IS EQUAL TO 1.0 AND THE COMPONENT OF LARGEST
C     MODULUS IS REAL.
      DO 280 I = 1, N
         SUM = ZERO
         MAX = ZERO
         DO 180 J = 1, N
            IF (ABS(ZR(J,I)).LE.MAX) GO TO 160
            MAX = ABS(ZR(J,I))
  160       IF (ABS(ZI(J,I)).LE.MAX) GO TO 180
            MAX = ABS(ZI(J,I))
  180    CONTINUE
         DO 200 J = 1, N
            ZR(J,I) = ZR(J,I)/MAX
            ZI(J,I) = ZI(J,I)/MAX
  200    CONTINUE
         MAX = ZERO
         DO 240 J = 1, N
            TERM = ZR(J,I)**2 + ZI(J,I)**2
            SUM = SUM + TERM
            IF (TERM.LE.MAX) GO TO 220
            MAX = TERM
            C = ZR(J,I)
            D = -ZI(J,I)
  220       CONTINUE
  240    CONTINUE
         SUM = SUM*(C**2+D**2)
         SUM = SQRT(SUM)
         DO 260 J = 1, N
            TERM = ZR(J,I)
            ZR(J,I) = (ZR(J,I)*C-ZI(J,I)*D)/SUM
            ZI(J,I) = (D*TERM+C*ZI(J,I))/SUM
  260    CONTINUE
  280 CONTINUE
C
  300 RETURN
      END
