      SUBROUTINE F04AXZ(N,ICN,A,LICN,LENR,LENRL,LENOFF,IDISP,IP,IQ,X,W,
     *                  MTYPE,RESID)
C     MARK 7 RELEASE. NAG COPYRIGHT 1978
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C     DERIVED FROM HARWELL LIBRARY ROUTINE MA30C
C
C     SOLVES THE EQUATIONS  A*X = B  OR  (A**T)*X = B , AFTER  A
C     HAS BEEN DECOMPOSED BY F01BRF OR F01BSF.
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION  RESID
      INTEGER           LICN, MTYPE, N
C     .. Array Arguments ..
      DOUBLE PRECISION  A(LICN), W(N), X(N)
      INTEGER           ICN(LICN), IDISP(2), IP(N), IQ(N), LENOFF(N),
     *                  LENR(N), LENRL(N)
C     .. Local Scalars ..
      DOUBLE PRECISION  WI, WII, ZERO
      INTEGER           I, IB, IBACK, IBLEND, IBLOCK, IEND, IFIRST, II,
     *                  III, ILAST, J, J1, J2, J3, JJ, JPIV, JPIVP1, K,
     *                  LJ1, LJ2, LT, LTEND, NUMBLK
      LOGICAL           NEG, NOBLOC
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MAX
C     .. Data statements ..
C
      DATA              ZERO/0.0D0/
C     .. Executable Statements ..
C
C     THE FINAL VALUE OF RESID IS THE MAXIMUM RESIDUAL FOR AN
C     INCONSISTENT SET OF EQUATIONS.
      RESID = ZERO
C     NOBLOC IS .TRUE. IF SUBROUTINE BLOCK HAS BEEN USED PREVIOUSLY
C     AND IS .FALSE. OTHERWISE.  THE VALUE .FALSE. MEANS THAT LENOFF
C     WILL NOT BE SUBSEQUENTLY ACCESSED.
      NOBLOC = LENOFF(1) .LT. 0
      IF (MTYPE.NE.1) GO TO 280
C
C     WE NOW SOLVE   A * X = B.
C     NEG IS USED TO INDICATE WHEN THE LAST ROW IN A BLOCK HAS BEEN
C     REACHED.  IT IS THEN SET TO TRUE WHEREAFTER BACKSUBSTITUTION
C     IS PERFORMED ON THE BLOCK.
      NEG = .FALSE.
C     IP(N) IS NEGATED SO THAT THE LAST ROW OF THE LAST BLOCK CAN
C     BE RECOGNISED.  IT IS RESET TO ITS POSITIVE VALUE ON EXIT.
      IP(N) = -IP(N)
C     PREORDER VECTOR ... W(I) = X(IP(I))
      DO 20 II = 1, N
         I = IP(II)
         I = ABS(I)
         W(II) = X(I)
   20 CONTINUE
C     LT HOLDS THE POSITION OF THE FIRST NON-ZERO IN THE CURRENT
C     ROW OF THE OFF-DIAGONAL BLOCKS.
      LT = 1
C     IFIRST HOLDS THE INDEX OF THE FIRST ROW IN THE CURRENT BLOCK.
      IFIRST = 1
C     IBLOCK HOLDS THE POSITION OF THE FIRST NON-ZERO IN THE CURRENT
C     ROW OF THE LU DECOMPOSITION OF THE DIAGONAL BLOCKS.
      IBLOCK = IDISP(1)
C     IF I IS NOT THE LAST ROW OF A BLOCK, THEN A PASS THROUGH THIS
C     LOOP ADDS THE INNER PRODUCT OF ROW I OF THE OFF-DIAGONAL
C     BLOCKS AND W TO W AND PERFORMS FORWARD ELIMINATION USING ROW I
C     OF THE LU DECOMPOSITION.   IF I IS THE LAST ROW OF A BLOCK
C     THEN, AFTER PERFORMING THESE AFOREMENTIONED OPERATIONS,
C     BACKSUBSTITUTION IS PERFORMED USING THE ROWS OF THE BLOCK.
      DO 240 I = 1, N
         WI = W(I)
         IF (NOBLOC) GO TO 60
         IF (LENOFF(I).EQ.0) GO TO 60
C        OPERATIONS USING LOWER TRIANGULAR BLOCKS.
C        LTEND IS THE END OF ROW I IN THE OFF-DIAGONAL BLOCKS.
         LTEND = LT + LENOFF(I) - 1
         DO 40 JJ = LT, LTEND
            J = ICN(JJ)
            WI = WI - A(JJ)*W(J)
   40    CONTINUE
C        LT IS SET THE BEGINNING OF THE NEXT OFF-DIAGONAL ROW.
         LT = LTEND + 1
C        SET NEG TO .TRUE. IF WE ARE ON THE LAST ROW OF THE BLOCK.
   60    IF (IP(I).LT.0) NEG = .TRUE.
         IF (LENRL(I).EQ.0) GO TO 100
C        FORWARD ELIMINATION PHASE.
C        IEND IS THE END OF THE L PART OF ROW I IN THE LU
C        DECOMPOSITION.
         IEND = IBLOCK + LENRL(I) - 1
         DO 80 JJ = IBLOCK, IEND
            J = ICN(JJ)
            WI = WI + A(JJ)*W(J)
   80    CONTINUE
C        IBLOCK IS ADJUSTED TO POINT TO THE START OF THE NEXT ROW.
  100    IBLOCK = IBLOCK + LENR(I)
         W(I) = WI
         IF ( .NOT. NEG) GO TO 240
C        BACK SUBSTITUTION PHASE.
C        J1 IS POSITION IN A/ICN AFTER END OF BLOCK BEGINNING IN ROW
C        IFIRST AND ENDING IN ROW I.
         J1 = IBLOCK
C        ARE THERE ANY SINGULARITIES IN THIS BLOCK...  IF NOT, CONTINUE
C        WITH THE BACKSUBSTITUTION.
         IB = I
         IF (IQ(I).GT.0) GO TO 140
         DO 120 III = IFIRST, I
            IB = I - III + IFIRST
            IF (IQ(IB).GT.0) GO TO 140
            J1 = J1 - LENR(IB)
            RESID = MAX(RESID,ABS(W(IB)))
            W(IB) = ZERO
  120    CONTINUE
C        ENTIRE BLOCK IS SINGULAR.
         GO TO 220
C        EACH PASS THROUGH THIS LOOP PERFORMS THE BACK-SUBSTITUTION
C        OPERATIONS FOR A SINGLE ROW, STARTING AT THE END OF THE BLOCK
C        AND WORKING THROUGH IT IN REVERSE ORDER.
  140    DO 200 III = IFIRST, IB
            II = IB - III + IFIRST
C           J2 IS END OF ROW II.
            J2 = J1 - 1
C           J1 IS BEGINNING OF ROW II.
            J1 = J1 - LENR(II)
C           JPIV IS THE POSITION OF THE PIVOT IN ROW II.
            JPIV = J1 + LENRL(II)
            JPIVP1 = JPIV + 1
C           IF ROW  II OF U HAS NO NON-ZEROS GO TO 90.
            IF (J2.LT.JPIVP1) GO TO 180
            WII = W(II)
            DO 160 JJ = JPIVP1, J2
               J = ICN(JJ)
               WII = WII - A(JJ)*W(J)
  160       CONTINUE
            W(II) = WII
  180       W(II) = W(II)/A(JPIV)
  200    CONTINUE
  220    IFIRST = I + 1
         NEG = .FALSE.
  240 CONTINUE
C
C     REORDER SOLUTION VECTOR ... X(I) = W(IQINVERSE(I))
      DO 260 II = 1, N
         I = IQ(II)
         I = ABS(I)
         X(I) = W(II)
  260 CONTINUE
      IP(N) = -IP(N)
      GO TO 640
C
C     WE NOW SOLVE   (A**T) * X = B.
C     PREORDER VECTOR ... W(I)=X(IQ(I))
  280 DO 300 II = 1, N
         I = IQ(II)
         I = ABS(I)
         W(II) = X(I)
  300 CONTINUE
C     LJ1 POINTS TO THE BEGINNING THE CURRENT ROW IN THE
C     OFF-DIAGONAL BLOCKS.
      LJ1 = IDISP(1)
C     IBLOCK IS INITIALIZED TO POINT TO THE BEGINNING OF THE BLOCK
C     AFTER THE LAST ONE.
      IBLOCK = IDISP(2) + 1
C     ILAST IS THE LAST ROW IN THE CURRENT BLOCK.
      ILAST = N
C     IBLEND POINTS TO THE POSITION AFTER THE LAST NON-ZERO IN THE
C     CURRENT BLOCK.
      IBLEND = IBLOCK
C     EACH PASS THROUGH THIS LOOP OPERATES WITH ONE DIAGONAL BLOCK
C     AND THE OFF-DIAGONAL PART OF THE MATRIX CORRESPONDING TO THE
C     ROWS OF THIS BLOCK.  THE BLOCKS ARE TAKEN IN REVERSE ORDER AND
C     THE NUMBER OF TIMES THE LOOP IS ENTERED IS
C     MIN(N,NO. BLOCKS+1).
      DO 580 NUMBLK = 1, N
         IF (ILAST.EQ.0) GO TO 600
         IBLOCK = IBLOCK - LENR(ILAST)
C        THIS LOOP FINDS THE INDEX OF THE FIRST ROW IN THE CURRENT
C        BLOCK... IT IS FIRST AND IBLOCK IS SET TO THE POSITION OF
C        THE BEGINNING OF THIS FIRST ROW.
         DO 320 K = 1, N
            II = ILAST - K
            IF (II.EQ.0) GO TO 340
            IF (IP(II).LT.0) GO TO 340
            IBLOCK = IBLOCK - LENR(II)
  320    CONTINUE
  340    IFIRST = II + 1
C        J1 POINTS TO THE POSITION OF THE BEGINNING OF ROW I (LT PART)
C        OR PIVOT
         J1 = IBLOCK
C        FORWARD ELIMINATION.
C        EACH PASS THROUGH THIS LOOP PERFORMS THE OPERATIONS FOR ONE
C        ROW OF THE BLOCK.  IF THE CORRESPONDING ELEMENT OF W IS ZERO
C        THEN THE OPERATIONS CAN BE AVOIDED.
         DO 420 I = IFIRST, ILAST
            IF (W(I).EQ.ZERO) GO TO 400
C           IS ROW I SINGULAR...  IF SO, GO TO ...
            IF (IQ(I).LT.0) GO TO 440
C           J2 FIRST POINTS TO THE PIVOT IN ROW I AND THEN IS MADE TO
C           POINT TO THE FIRST NON-ZERO IN THE U TRANSPOSE PART OF THE
C           ROW.
            J2 = J1 + LENRL(I)
            WI = W(I)/A(J2)
            IF (LENR(I)-LENRL(I).EQ.1) GO TO 380
            J2 = J2 + 1
C           J3 POINTS TO THE END OF ROW I.
            J3 = J1 + LENR(I) - 1
            DO 360 JJ = J2, J3
               J = ICN(JJ)
               W(J) = W(J) - A(JJ)*WI
  360       CONTINUE
  380       W(I) = WI
  400       J1 = J1 + LENR(I)
  420    CONTINUE
         GO TO 480
C        DEALS WITH REST OF BLOCK WHICH IS SINGULAR.
  440    DO 460 II = I, ILAST
            RESID = MAX(RESID,ABS(W(II)))
            W(II) = ZERO
  460    CONTINUE
C        BACK SUBSTITUTION.
C        THIS LOOP DOES THE BACK SUBSTITUTION ON THE ROWS OF THE BLOCK
C        IN THE REVERSE ORDER DOING IT SIMULTANEOUSLY ON THE L
C        TRANSPOSE PART OF THE DIAGONAL BLOCKS AND THE OFF-DIAGONAL
C        BLOCKS.
  480    J1 = IBLEND
         DO 560 IBACK = IFIRST, ILAST
            I = ILAST - IBACK + IFIRST
C           J1 POINTS TO THE BEGINNING OF ROW I.
            J1 = J1 - LENR(I)
            IF (LENRL(I).EQ.0) GO TO 520
C           J2 POINTS TO THE END OF THE L TRANSPOSE PART OF ROW I.
            J2 = J1 + LENRL(I) - 1
            DO 500 JJ = J1, J2
               J = ICN(JJ)
               W(J) = W(J) + A(JJ)*W(I)
  500       CONTINUE
  520       IF (NOBLOC) GO TO 560
C           OPERATIONS USING LOWER TRIANGULAR BLOCKS.
            IF (LENOFF(I).EQ.0) GO TO 560
C           LJ2 POINTS TO THE END OF ROW I OF THE OFF-DIAGONAL BLOCKS.
            LJ2 = LJ1 - 1
C           LJ1 POINTS TO THE BEGINNING OF ROW I OF THE OFF-DIAGONAL
C           BLOCKS.
            LJ1 = LJ1 - LENOFF(I)
            DO 540 JJ = LJ1, LJ2
               J = ICN(JJ)
               W(J) = W(J) - A(JJ)*W(I)
  540       CONTINUE
  560    CONTINUE
         IBLEND = J1
         ILAST = IFIRST - 1
  580 CONTINUE
C     REORDER SOLUTION VECTOR ... X(I)=W(IPINVERSE(I))
  600 DO 620 II = 1, N
         I = IP(II)
         I = ABS(I)
         X(I) = W(II)
  620 CONTINUE
C
  640 RETURN
      END
