      SUBROUTINE F04QAF(M,N,B,X,SE,APROD,DAMP,ATOL,BTOL,CONLIM,ITNLIM,
     *                  MSGLVL,ITN,ANORM,ACOND,RNORM,ARNORM,XNORM,WORK,
     *                  RWORK,LRWORK,IWORK,LIWORK,INFORM,IFAIL)
C     MARK 11 RELEASE. NAG COPYRIGHT 1983.
C     MARK 11.5(F77) REVISED. (SEPT 1985.)
C
C     DESCRIPTION
C     -----------
C
C     F04QAF  FINDS A SOLUTION  X  TO THE FOLLOWING PROBLEMS...
C
C     1. UNSYMMETRIC EQUATIONS --    SOLVE  A*X = B
C
C     2. LINEAR LEAST SQUARES  --    SOLVE  A*X = B
C                                    IN THE LEAST-SQUARES SENSE
C
C     3. DAMPED LEAST SQUARES  --    SOLVE  (   A    )*X = ( B )
C                                           ( DAMP*I )     ( 0 )
C                                    IN THE LEAST-SQUARES SENSE
C
C     WHERE  A  IS A MATRIX WITH  M  ROWS AND  N  COLUMNS, B  IS AN
C     M-VECTOR, AND  DAMP  IS A SCALAR ( ALL QUANTITIES REAL ).
C     THE MATRIX  A  IS INTENDED TO BE LARGE AND SPARSE.  IT IS ACCESSED
C     BY MEANS OF SUBROUTINE CALLS OF THE FORM
C
C          CALL APROD ( MODE, M, N, X, Y, RWORK, LRWORK, IWORK, LIWORK )
C
C     WHICH MUST PERFORM THE FOLLOWING FUNCTIONS...
C
C                IF MODE = 1, COMPUTE  Y = Y + A*X.
C                IF MODE = 2, COMPUTE  X = X + A( TRANSPOSE )*Y.
C
C     THE VECTORS X AND Y ARE INPUT PARAMETERS IN BOTH CASES.
C     IF MODE = 1, Y SHOULD BE ALTERED WITHOUT CHANGING X.
C     IF MODE = 2, X SHOULD BE ALTERED WITHOUT CHANGING Y.
C     THE PARAMETERS RWORK, LRWORK, IWORK, LIWORK MAY BE USED FOR
C     WORKSPACE AS DESCRIBED BELOW.
C
C     THE RHS VECTOR  B  IS OVERWRITTEN.
C
C     NOTE.  F04QAF USES AN ITERATIVE METHOD TO APPROXIMATE THE
C            SOLUTION.
C     THE NUMBER OF ITERATIONS REQUIRED TO REACH A CERTAIN ACCURACY
C     DEPENDS STRONGLY ON THE SCALING OF THE PROBLEM.  POOR SCALING OF
C     THE ROWS OR COLUMNS OF  A  SHOULD THEREFORE BE AVOIDED WHERE
C     POSSIBLE.
C
C     FOR EXAMPLE, IN PROBLEM 1 THE SOLUTION IS UNALTERED BY
C     ROW-SCALING.  IF A ROW OF  A  IS VERY SMALL OR LARGE COMPARED TO
C     THE OTHER ROWS OF  A,  THE CORRESPONDING ROW OF  ( A  B )  SHOULD
C     BE SCALED UP OR DOWN.
C
C     IN PROBLEMS 1 AND 2, THE SOLUTION  X  IS EASILY RECOVERED
C     FOLLOWING COLUMN-SCALING.  IN THE ABSENCE OF BETTER INFORMATION,
C     THE NONZERO COLUMNS OF  A  SHOULD BE SCALED SO THAT THEY ALL HAVE
C     THE SAME EUCLIDEAN NORM ( E.G.  1.0 ).
C
C     IN PROBLEM 3, THERE IS NO FREEDOM TO RE-SCALE IF  DAMP  IS
C     NONZERO.  HOWEVER, THE VALUE OF  DAMP  SHOULD BE ASSIGNED ONLY
C     AFTER ATTENTION HAS BEEN PAID TO THE SCALING OF  A.
C
C     THE PARAMETER  DAMP  IS INTENDED TO HELP REGULARIZE
C     ILL-CONDITIONED SYSTEMS, BY PREVENTING THE TRUE SOLUTION FROM
C     BEING VERY LARGE.  ANOTHER AID TO REGULARIZATION IS PROVIDED BY
C     THE PARAMETER  ACOND,  WHICH MAY BE USED TO TERMINATE ITERATIONS
C     BEFORE THE COMPUTED SOLUTION BECOMES VERY LARGE.
C
C     THE FOLLOWING QUANTITIES ARE USED IN DISCUSSING THE SUBROUTINE
C     PARAMETERS...
C
C     ABAR   =  (   A    ),          BBAR  =  ( B )
C               ( DAMP*I )                    ( 0 )
C
C     R      =  B  -  A*X,           RBAR  =  BBAR  -  ABAR*X
C
C     RNORM  =  SQRT( NORM( R )**2  + ( DAMP**2 )*( NORM( X )**2 ) )
C            =  NORM( RBAR )
C
C     RELPR  =  THE RELATIVE PRECISION OF FLOATING-POINT ARITHMETIC
C               ON THE MACHINE BEING USED.
C
C     F04QAF  MINIMIZES THE FUNCTION  RNORM  WITH RESPECT TO  X.
C
C     PARAMETERS
C     ----------
C
C     M       INPUT      THE NUMBER OF ROWS IN  A.
C
C     N       INPUT      THE NUMBER OF COLUMNS IN  A.
C
C     APROD   EXTERNAL   SEE ABOVE.
C
C     DAMP    INPUT      THE DAMPING PARAMETER FOR PROBLEM 3 ABOVE.
C                        ( DAMP  SHOULD BE 0.0 FOR PROBLEMS 1 AND 2. )
C                        IF THE SYSTEM  A*X = B  IS INCOMPATIBLE, VALUES
C                        OF  DAMP  IN THE RANGE 0 TO
C                        SQRT( RELPR )*NORM( A )
C                        WILL PROBABLY HAVE A NEGLIGIBLE EFFECT.
C                        LARGER VALUES OF  DAMP  WILL TEND TO DECREASE
C                        THE NORM OF  X  AND TO REDUCE THE NUMBER OF
C                        ITERATIONS REQUIRED BY F04QAF.
C
C                        THE WORK PER ITERATION AND THE STORAGE NEEDED
C                        BY F04QAF ARE THE SAME FOR ALL VALUES OF  DAMP.
C
C     LIWORK  INPUT      THE LENGTH OF THE WORKSPACE ARRAY  IWORK.
C     LRWORK  INPUT      THE LENGTH OF THE WORKSPACE ARRAY  RWORK.
C     IWORK   WORKSPACE  AN INTEGER ARRAY OF LENGTH  LIWORK.
C     RWORK   WORKSPACE  A REAL ARRAY OF LENGTH  LRWORK.
C
C             NOTE.  F04QAF DOES NOT EXPLICITLY USE THE PREVIOUS FOUR
C             PARAMETERS, BUT PASSES THEM TO SUBROUTINE APROD FOR
C             POSSIBLE USE AS WORKSPACE.  IF APROD DOES NOT NEED
C             IW  OR  RW,  THE VALUES  LENIW = 1  OR  LENRW = 1  SHOULD
C             BE USED, AND THE ACTUAL PARAMETERS CORRESPONDING TO
C             IW  OR  RW  MAY BE ANY CONVENIENT ARRAY OF SUITABLE TYPE.
C
C     B( M )  INPUT      THE RHS VECTOR.  BEWARE THAT  B  IS
C                        OVER-WRITTEN BY F04QAF.
C
C     X( N )  OUTPUT     RETURNS THE COMPUTED SOLUTION  X.
C
C     SE( N ) OUTPUT     RETURNS STANDARD ERROR ESTIMATES FOR THE
C                        COMPONENTS OF  X.  FOR EACH I,  SE( I )  IS SET
C                        TO THE VALUE  RNORM*SQRT( SIGMA( I, I )/T ),
C                        WHERE  SIGMA( I, I )  IS AN ESTIMATE OF THE ITH
C                        DIAGONAL OF THE INVERSE OF
C                        ABAR( TRANSPOSE )*ABAR
C                        AND  T = 1      IF  M .LE. N,
C                             T = M - N  IF  M .GT. N  AND  DAMP = 0,
C                             T = M      IF  DAMP .NE. 0.
C
C     ATOL    INPUT      AN ESTIMATE OF THE RELATIVE ERROR IN THE DATA
C                        DEFINING THE MATRIX  A.  FOR EXAMPLE,
C                        IF  A  IS ACCURATE TO ABOUT 6 DIGITS, SET
C                        ATOL = 1.0E-6 .
C
C     BTOL    INPUT      AN ESTIMATE OF THE RELATIVE ERROR IN THE DATA
C                        DEFINING THE RHS VECTOR  B.  FOR EXAMPLE,
C                        IF  B  IS ACCURATE TO ABOUT 6 DIGITS, SET
C                        BTOL = 1.0E-6 .
C
C     CONLIM  INPUT      AN UPPER LIMIT ON  COND( ABAR ),  THE APPARENT
C                        CONDITION NUMBER OF THE MATRIX  ABAR.
C                        ITERATIONS WILL BE TERMINATED IF A COMPUTED
C                        ESTIMATE OF  COND( ABAR )  EXCEEDS  CONLIM.
C                        THIS IS INTENDED TO PREVENT CERTAIN SMALL OR
C                        ZERO SINGULAR VALUES OF  A  OR  ABAR  FROM
C                        COMING INTO EFFECT AND CAUSING UNWANTED GROWTH
C                        IN THE COMPUTED SOLUTION.
C
C                        CONLIM  AND  DAMP  MAY BE USED SEPARATELY OR
C                        TOGETHER TO REGULARIZE ILL-CONDITIONED SYSTEMS.
C
C                        NORMALLY,  CONLIM  SHOULD BE IN THE RANGE
C                        1000  TO  1/RELPR.
C                        SUGGESTED VALUE --
C                        CONLIM = 1/( 100*RELPR )  FOR COMPATIBLE
C                        SYSTEMS,
C                        CONLIM = 1/( 10*SQRT( RELPR ) )  FOR LEAST
C                        SQUARES.
C
C             NOTE.  IF THE USER IS NOT CONCERNED ABOUT THE PARAMETERS
C             ATOL, BTOL  AND  CONLIM,  ANY OR ALL OF THEM MAY BE SET
C             TO ZERO.  THE EFFECT WILL BE THE SAME AS THE VALUES
C             RELPR, RELPR  AND  1/RELPR  RESPECTIVELY.
C
C     ITNLIM  INPUT      AN UPPER LIMIT ON THE NUMBER OF ITERATIONS.
C                        SUGGESTED VALUE --
C                        ITNLIM = N/2     FOR WELL CONDITIONED SYSTEMS,
C                        ITNLIM = 4*N     OTHERWISE.
C
C     ITN     OUTPUT     THE NUMBER OF ITERATIONS TAKEN.
C
C     MSGLVL  INPUT      DETERMINES THE LEVEL OF PRINTING.
C                        IF MSGLVL .GT. 1 THEN PROGRESS IS MONITERED
C                        BY PRINTING OUT A SUMMARY LINE PERIODICALLY.
C                        IF MSGLVL .GT. 0 THEN A SUMMARY IS PRINTED
C                        AT THE END OF THE ROUTINE.
C                        OUTPUT IS ON THE UNIT GIVEN BY X04ABF.
C
C     INFORM  OUTPUT     AN INTEGER GIVING THE REASON FOR TERMINATION...
C
C                0       X = 0  IS THE EXACT SOLUTION.
C                        NO ITERATIONS WERE PERFORMED.
C
C                1       THE EQUATIONS  A*X = B  ARE PROBABLY
C                        COMPATIBLE.  NORM( A*X - B )  IS SUFFICIENTLY
C                        SMALL, GIVEN THE VALUES OF  ATOL  AND  BTOL.
C
C                2       THE SYSTEM  A*X = B  IS PROBABLY NOT
C                        COMPATIBLE.  A LEAST-SQUARES SOLUTION HAS
C                        BEEN OBTAINED WHICH IS SUFFICIENTLY ACCURATE,
C                        GIVEN THE VALUE OF  ATOL.
C
C                3       THE EQUATIONS  A*X = B  ARE PROBABLY
C                        COMPATIBLE.  NORM( A*X - B )  IS AS SMALL AS
C                        SEEMS REASONABLE ON THIS MACHINE.
C
C                4       THE SYSTEM  A*X = B  IS PROBABLY NOT
C                        COMPATIBLE.  A LEAST-SQUARES SOLUTION HAS
C                        BEEN OBTAINED WHICH IS AS ACCURATE AS SEEMS
C                        REASONABLE ON THIS MACHINE.
C
C                5       AN ESTIMATE OF  COND( ABAR )  HAS EXCEEDED
C                        CONLIM.   THE SYSTEM  A*X = B  APPEARS TO BE
C                        ILL-CONDITIONED.  OTHERWISE, THERE COULD BE AN
C                        AN ERROR IN SUBROUTINE APROD .
C
C                6       COND( ABAR )  SEEMS TO BE SO LARGE THAT THERE
C                        IS NOT MUCH POINT IN DOING FURTHER ITERATIONS,
C                        GIVEN THE PRECISION OF THIS MACHINE.
C                        THERE COULD BE AN ERROR IN SUBROUTINE APROD.
C
C                7       THE ITERATION LIMIT  ITNLIM  WAS REACHED.
C
C     ANORM   OUTPUT     AN ESTIMATE OF THE FROBENIUS NORM OF  ABAR.
C                        THIS IS THE SQUARE-ROOT OF THE SUM OF SQUARES
C                        OF THE ELEMENTS OF  ABAR.
C                        IF  DAMP  IS SMALL AND IF THE COLUMNS OF  A
C                        HAVE ALL BEEN SCALED TO HAVE LENGTH  1.0,
C                        ANORM  SHOULD INCREASE TO ROUGHLY  SQRT( N ).
C                        A RADICALLY DIFFERENT VALUE FOR  ANORM  MAY
C                        INDICATE AN ERROR IN SUBROUTINE APROD ( THERE
C                        MAY BE AN INCONSISTENCY BETWEEN MODES 1 AND
C                        2 ).
C
C     ACOND   OUTPUT     AN ESTIMATE OF  COND( ABAR ),  THE CONDITION
C                        NUMBER OF  ABAR.  A VERY HIGH VALUE OF  ACOND
C                        MAY AGAIN INDICATE AN ERROR IN APROD.
C
C     RNORM   OUTPUT     AN ESTIMATE OF THE FINAL VALUE OF NORM( RBAR ),
C                        THE FUNCTION BEING MINIMIZED ( SEE NOTATION
C                        ABOVE ).  THIS WILL BE SMALL IF  A*X = B  HAS
C                        A SOLUTION.
C
C     ARNORM  OUTPUT     AN ESTIMATE OF THE FINAL VALUE OF
C                        NORM( ABAR( TRANSPOSE )*RBAR ), THE NORM OF
C                        THE RESIDUAL FOR THE USUAL NORMAL EQUATIONS.
C                        THIS SHOULD BE SMALL IN ALL CASES.  ( ARNORM
C                        WILL OFTEN BE SMALLER THAN THE TRUE VALUE
C                        COMPUTED FROM THE OUTPUT VECTOR  X. )
C
C     XNORM   OUTPUT     AN ESTIMATE OF THE NORM OF THE FINAL
C                        SOLUTION VECTOR  X.
C
C     WORK    WORKSPACE  ARRAY OF LENGTH AT LEAST 2*N.
C
C
C     SUBROUTINES AND FUNCTIONS USED
C     ------------------------------
C
C     USER       APROD
C     BLAS       COPY  , NRM2  , SCAL
C     NAG BLAS   CNSV  , ROTG
C     NAG        X02ZAZ
C     FORTRAN    ABS   , MOD   , SQRT
C
C     REFERENCES
C     ----------
C
C     PAIGE, C.C. AND SAUNDERS, M.A.  LSQR: AN ALGORITHM FOR SPARSE
C        LINEAR EQUATIONS AND SPARSE LEAST SQUARES.
C        ACM TRANSACTIONS ON MATHEMATICAL SOFTWARE 8, 1 ( MARCH 1982 ).
C
C     LAWSON, C.L., HANSON, R.J., KINCAID, D.R. AND KROGH, F.T.
C        BASIC LINEAR ALGEBRA SUBPROGRAMS FOR FORTRAN USAGE.
C        ACM TRANSACTIONS ON MATHEMATICAL SOFTWARE 5, 3 ( SEPT 1979 ),
C        308-323 AND 324-325.
C
C     FURTHER COMMENTS
C     ----------------
C
C     LSQR.           VERSION DATED 22 FEBRUARY 1982.  MAS.
C     F04QAF.    THIS VERSION DATED 11 OCT  1983.  S.J.HAMMARLING
C
C     IN THIS VERSION THE VECTORS V AND W ARE STORED IN THE ARRAY
C     WORK AS FOLLOWS.
C
C        V( I ) = WORK( I, 1 ),  I = 1, 2, ..., N
C        W( I ) = WORK( I, 2 ),  I = 1, 2, ..., N.
C
C     APROD
C     .. Parameters ..
      CHARACTER*6       SRNAME
      PARAMETER         (SRNAME='F04QAF')
C     .. Scalar Arguments ..
      DOUBLE PRECISION  ACOND, ANORM, ARNORM, ATOL, BTOL, CONLIM, DAMP,
     *                  RNORM, XNORM
      INTEGER           IFAIL, INFORM, ITN, ITNLIM, LIWORK, LRWORK, M,
     *                  MSGLVL, N
C     .. Array Arguments ..
      DOUBLE PRECISION  B(M), RWORK(LRWORK), SE(N), WORK(N,2), X(N)
      INTEGER           IWORK(LIWORK)
C     .. Subroutine Arguments ..
      EXTERNAL          APROD
C     .. Arrays in Common ..
      DOUBLE PRECISION  WMACH(15)
C     .. Local Scalars ..
      DOUBLE PRECISION  ALFA, BBNORM, BETA, BNORM, CS, CS1, CS2, CTOL,
     *                  DAMPSQ, DDNORM, DELTA, GAMBAR, GAMMA, ONE, PHI,
     *                  PHIBAR, PSI, QTR, RES1, RES2, RHO, RHOBAR, RHS,
     *                  RTOL, SN, SN1, SN2, T, T1, T2, T3, TAU, TEN,
     *                  TEST1, TEST2, TEST3, THETA, TWO, XXNORM, Z,
     *                  ZBAR, ZERO
      INTEGER           I, MODE, NCONV, NOUT, NSTOP
C     .. Local Arrays ..
      CHARACTER*1       P01REC(1)
      CHARACTER*80      REC(7)
C     .. External Functions ..
      DOUBLE PRECISION  DNRM2
      INTEGER           P01ABF
      EXTERNAL          DNRM2, P01ABF
C     .. External Subroutines ..
      EXTERNAL          F06FBF, DSCAL, F06BAF, DCOPY, DAXPY, X02ZAZ,
     *                  X04BAF
C     .. Intrinsic Functions ..
      INTRINSIC         ABS, MOD, SQRT
C     .. Common blocks ..
      COMMON            /AX02ZA/WMACH
C     .. Save statements ..
      SAVE              /AX02ZA/
C     .. Data statements ..
      DATA              ZERO/0.0D+0/, QTR/0.25D+0/
      DATA              ONE/1.0D+0/, TWO/2.00D+0/
      DATA              TEN/10.0D+0/
C     .. Executable Statements ..
C
C     CHECK INPUT PARAMETERS.
C
      IF (M.GE.1 .AND. N.GE.1 .AND. LRWORK.GE.1 .AND. LIWORK.GE.1)
     *    GO TO 20
      IFAIL = P01ABF(IFAIL,1,SRNAME,0,P01REC)
      RETURN
   20 CONTINUE
      IF (ITNLIM.LT.1) ITNLIM = N
C
C     INITIALIZE.
C
      CALL X02ZAZ
      NOUT = WMACH(11) + QTR
C
      IF (MSGLVL.GT.0) THEN
         WRITE (REC,FMT=99999)
         CALL X04BAF(NOUT,REC(1))
         CALL X04BAF(NOUT,REC(2))
      END IF
      IF (MSGLVL.GT.0) THEN
         WRITE (REC,FMT=99998) M, N, DAMP, ATOL, CONLIM, BTOL, ITNLIM
         DO 40 I = 1, 7
            CALL X04BAF(NOUT,REC(I))
   40    CONTINUE
      END IF
      CTOL = ZERO
      IF (CONLIM.GT.ZERO) CTOL = ONE/CONLIM
      DAMPSQ = DAMP**2
      ANORM = ZERO
      ACOND = ZERO
      BBNORM = ZERO
      DDNORM = ZERO
      RES2 = ZERO
      XNORM = ZERO
      XXNORM = ZERO
      CS2 = -ONE
      SN2 = ZERO
      Z = ZERO
      ITN = 0
      INFORM = 0
      NSTOP = 0
C
      CALL F06FBF(N,ZERO,WORK,1)
      CALL F06FBF(N,ZERO,X,1)
      CALL F06FBF(N,ZERO,SE,1)
C
C     SET UP THE FIRST VECTORS FOR THE BIDIAGONALIZATION.
C     THESE SATISFY   BETA*U = B,   ALFA*V = A( TRANSPOSE )*U.
C
      BETA = DNRM2(M,B,1)
      IF (BETA.GT.ZERO) CALL DSCAL(M,ONE/BETA,B,1)
C
      MODE = 2
      CALL APROD(MODE,M,N,WORK,B,RWORK,LRWORK,IWORK,LIWORK)
      IF (MODE.LT.0) GO TO 360
C
      ALFA = DNRM2(N,WORK,1)
      IF (ALFA.GT.ZERO) CALL DSCAL(N,ONE/ALFA,WORK,1)
      CALL DCOPY(N,WORK,1,WORK(1,2),1)
C
      RHOBAR = ALFA
      PHIBAR = BETA
      BNORM = BETA
      RNORM = BETA
      IF (ALFA.EQ.ZERO .OR. BETA.EQ.ZERO) GO TO 280
      IF (MSGLVL.LE.1) GO TO 60
      WRITE (REC,FMT=99997)
      CALL X04BAF(NOUT,REC(1))
      CALL X04BAF(NOUT,REC(2))
      CALL X04BAF(NOUT,REC(3))
      TEST1 = ONE
      TEST2 = ALFA/BETA
      WRITE (REC,FMT=99996) ITN, X(1), RNORM, TEST1, TEST2
      CALL X04BAF(NOUT,REC(1))
      WRITE (REC,FMT=99995)
      CALL X04BAF(NOUT,REC(1))
   60 CONTINUE
C
C        ***********************
C        * MAIN ITERATION LOOP *   K = 2, 3, ...
C        ***********************
C
C     +    WHILE( INFORM .EQ. 0 )LOOP
   80 IF (INFORM.NE.0) GO TO 240
      ITN = ITN + 1
C
C        PERFORM THE NEXT STEP OF THE BIDIAGONALIZATION TO OBTAIN THE
C        NEXT  BETA, U, ALFA, V.  THESE SATISFY THE RELATIONS
C                   BETA*U  =  A*V  -  ALFA*U,
C                   ALFA*V  =  A( TRANSPOSE )*U  -  BETA*V.
C
      CALL DSCAL(M,-ALFA,B,1)
      MODE = 1
      CALL APROD(MODE,M,N,WORK,B,RWORK,LRWORK,IWORK,LIWORK)
      IF (MODE.LT.0) GO TO 360
C
      BETA = DNRM2(M,B,1)
      IF (BETA.GT.ZERO) CALL DSCAL(M,ONE/BETA,B,1)
C
      BBNORM = BBNORM + ALFA**2 + BETA**2 + DAMPSQ
C
      CALL DSCAL(N,-BETA,WORK,1)
      MODE = 2
      CALL APROD(MODE,M,N,WORK,B,RWORK,LRWORK,IWORK,LIWORK)
      IF (MODE.LT.0) GO TO 360
C
      ALFA = DNRM2(N,WORK,1)
      IF (ALFA.GT.ZERO) CALL DSCAL(N,ONE/ALFA,WORK,1)
C
C        USE A PLANE ROTATION TO ELIMINATE THE DAMPING PARAMETER.
C        THIS ALTERS THE DIAGONAL( RHOBAR )OF THE LOWER-BIDIAGONAL
C        MATRIX.
C
      RHO = RHOBAR
      T = DAMP
      CALL F06BAF(RHO,T,CS1,SN1)
C
      IF (DAMP.EQ.ZERO) GO TO 100
      PSI = SN1*PHIBAR
      PHIBAR = CS1*PHIBAR
      GO TO 120
  100 CONTINUE
      PSI = ZERO
  120 CONTINUE
C
C        USE A PLANE ROTATION TO ELIMINATE THE SUBDIAGONAL ELEMENT
C        ( BETA ) OF THE LOWER-BIDIAGONAL MATRIX, GIVING AN
C        UPPER-BIDIAGONAL MATRIX.
C
      T = BETA
      CALL F06BAF(RHO,T,CS,SN)
C
      THETA = SN*ALFA
      RHOBAR = -CS*ALFA
      PHI = CS*PHIBAR
      PHIBAR = SN*PHIBAR
      TAU = SN*PHI
C
C        UPDATE  X, W  AND THE STANDARD ERROR ESTIMATES.
C
      T1 = PHI/RHO
      T2 = -THETA/RHO
      T3 = ONE/RHO
C
      DO 140 I = 1, N
         T = (T3*WORK(I,2))**2
         SE(I) = T + SE(I)
         DDNORM = T + DDNORM
  140 CONTINUE
C
      CALL DAXPY(N,T1,WORK(1,2),1,X,1)
      CALL DSCAL(N,T2,WORK(1,2),1)
C
      DO 160 I = 1, N
         WORK(I,2) = WORK(I,2) + WORK(I,1)
  160 CONTINUE
C
C        USE A PLANE ROTATION ON THE RIGHT TO ELIMINATE THE
C        SUPER-DIAGONAL ELEMENT ( THETA ) OF THE UPPER-BIDIAGONAL
C        MATRIX. THEN USE THE RESULT TO ESTIMATE  NORM( X ).
C
      DELTA = SN2*RHO
      GAMBAR = -CS2*RHO
      RHS = PHI - DELTA*Z
      ZBAR = RHS/GAMBAR
      XNORM = SQRT(XXNORM+ZBAR**2)
C
      GAMMA = GAMBAR
      T = THETA
      CALL F06BAF(GAMMA,T,CS2,SN2)
C
      Z = RHS/GAMMA
      XXNORM = XXNORM + Z**2
C
C        TEST FOR CONVERGENCE.
C        FIRST, ESTIMATE THE NORM AND CONDITION OF THE MATRIX  ABAR,
C        AND THE NORMS OF  RBAR  AND  ABAR( TRANSPOSE )*RBAR.
C
      ANORM = SQRT(BBNORM)
      ACOND = ANORM*SQRT(DDNORM)
      RES1 = PHIBAR**2
      RES2 = RES2 + PSI**2
      RNORM = SQRT(RES1+RES2)
      ARNORM = ALFA*ABS(TAU)
C
C        NOW USE THESE NORMS TO ESTIMATE CERTAIN OTHER QUANTITIES,
C        SOME OF WHICH WILL BE SMALL NEAR A SOLUTION.
C
      TEST1 = RNORM/BNORM
      TEST2 = ARNORM/(ANORM*RNORM)
      TEST3 = ONE/ACOND
      T1 = TEST1/(ONE+ANORM*XNORM/BNORM)
      RTOL = BTOL + ATOL*ANORM*XNORM/BNORM
C
C        THE FOLLOWING TESTS GUARD AGAINST EXTREMELY SMALL VALUES OF
C        ATOL, BTOL  OR  CTOL. ( THE USER MAY HAVE SET ANY OR ALL OF
C        THE PARAMETERS  ATOL, BTOL, CONLIM  TO ZERO. )
C        THE EFFECT IS EQUIVALENT TO THE NORMAL TESTS USING
C        ATOL = RELPR,  BTOL = RELPR,  CONLIM = 1/RELPR.
C
      T3 = ONE + TEST3
      T2 = ONE + TEST2
      T1 = ONE + T1
      IF (ITN.GE.ITNLIM) INFORM = 7
      IF (T3.LE.ONE) INFORM = 6
      IF (T2.LE.ONE) INFORM = 4
      IF (T1.LE.ONE) INFORM = 3
C
C        ALLOW FOR TOLERANCES SET BY THE USER.
C
      IF (TEST3.LE.CTOL) INFORM = 5
      IF (TEST2.LE.ATOL) INFORM = 2
      IF (TEST1.LE.RTOL) INFORM = 1
C
C        SEE IF IT IS TIME TO PRINT SOMETHING.
C
      IF ((MSGLVL.LE.1) .OR. (ITN.GT.10 .AND. ITN.LT.(ITNLIM-10)
     *    .AND. MOD(ITN,10).NE.0 .AND. TEST3.GT.TWO*CTOL .AND. TEST2.GT.
     *    TEN*ATOL .AND. TEST1.GT.TEN*RTOL)) GO TO 180
C
C           PRINT A LINE FOR THIS ITERATION.
C
      WRITE (REC,FMT=99996) ITN, X(1), RNORM, TEST1, TEST2, ANORM, ACOND
      CALL X04BAF(NOUT,REC(1))
      IF (MOD(ITN,10).EQ.0) THEN
         WRITE (REC,FMT=99995)
         CALL X04BAF(NOUT,REC(1))
      END IF
  180 CONTINUE
C
C        STOP IF APPROPRIATE.
C        THE CONVERGENCE CRITERIA ARE REQUIRED TO BE MET ON  NCONV
C        CONSECUTIVE ITERATIONS, WHERE  NCONV  IS SET BELOW.
C        SUGGESTED VALUE --   NCONV = 1, 2  OR  3.
C
      IF (INFORM.NE.0) GO TO 200
      NSTOP = 0
      GO TO 220
  200 CONTINUE
      NCONV = 1
      NSTOP = NSTOP + 1
      IF (NSTOP.LT.NCONV .AND. ITN.LT.ITNLIM) INFORM = 0
  220 CONTINUE
      GO TO 80
  240 CONTINUE
C     +    END WHILE
C
C        ******************************
C        * END OF MAIN ITERATION LOOP *
C        ******************************
C
C     FINISH OFF THE STANDARD ERROR ESTIMATES.
C
      T = ONE
      IF (M.GT.N) T = M - N
      IF (DAMP.NE.ZERO) T = M
      T = RNORM/SQRT(T)
C
      DO 260 I = 1, N
         SE(I) = T*SQRT(SE(I))
  260 CONTINUE
C
C     PRINT THE STOPPING CONDITION.
C
  280 IF (MSGLVL.LE.0) GO TO 320
      WRITE (REC,FMT=99994) ITN, INFORM
      CALL X04BAF(NOUT,REC(1))
      CALL X04BAF(NOUT,REC(2))
      CALL X04BAF(NOUT,REC(3))
      IF (INFORM.EQ.0) WRITE (REC,FMT=99993)
      IF (INFORM.EQ.1) WRITE (REC,FMT=99992)
      IF (INFORM.EQ.2) WRITE (REC,FMT=99991)
      IF (INFORM.EQ.3) WRITE (REC,FMT=99990)
      IF (INFORM.EQ.4) WRITE (REC,FMT=99989)
      IF (INFORM.EQ.5) WRITE (REC,FMT=99988)
      IF (INFORM.EQ.6) WRITE (REC,FMT=99987)
      IF (INFORM.EQ.7) WRITE (REC,FMT=99986)
      IF (INFORM.GE.0 .AND. INFORM.LE.7) CALL X04BAF(NOUT,REC(1))
      WRITE (REC,FMT=99985) RNORM, XNORM, ARNORM, ANORM, ACOND
      DO 300 I = 1, 5
         CALL X04BAF(NOUT,REC(I))
  300 CONTINUE
  320 CONTINUE
      IF (INFORM.GT.4) GO TO 340
      IFAIL = 0
      RETURN
  340 CONTINUE
      IFAIL = P01ABF(IFAIL,INFORM-3,SRNAME,0,P01REC)
      RETURN
  360 IF (MSGLVL.LE.0) GO TO 380
      WRITE (REC,FMT=99994) ITN, MODE
      CALL X04BAF(NOUT,REC(1))
      CALL X04BAF(NOUT,REC(2))
      CALL X04BAF(NOUT,REC(3))
      WRITE (REC,FMT=99984)
      CALL X04BAF(NOUT,REC(1))
  380 IFAIL = P01ABF(IFAIL,MODE,SRNAME,0,P01REC)
      INFORM = MODE
      RETURN
C
C
C     END OF F04QAF (LSQR)
C
99999 FORMAT (' OUTPUT FROM F04QAF.',/)
99998 FORMAT (' LEAST-SQUARES SOLUTION OF  A*X = B',//' THE MATRIX A H',
     *  'AS ',I6,' ROWS AND ',I6,' COLS',/' THE DAMPING PARAMETER IS  ',
     *  'DAMP = ',1P,D13.2,//' ATOL = ',1P,D12.2,4X,' CONLIM = ',1P,
     *  D13.2,/' BTOL = ',1P,D12.2,4X,' ITNLIM = ',I6)
99997 FORMAT (//'    ITN',4X,'X( 1 )',5X,'FUNCTION',5X,'COMPAT',2X,'IN',
     *  'COMPAT',1X,'NRM(ABAR)COND(ABAR)')
99996 FORMAT (1X,I6,1X,1P,2D12.5,1X,1P,2D9.2,1X,1P,2D9.2)
99995 FORMAT (1X)
99994 FORMAT (/' NO. OF ITERATIONS  = ',I6,/' STOPPING CONDITION = ',I6)
99993 FORMAT (' ( THE EXACT SOLUTION IS  X = 0  )')
99992 FORMAT (' (  A*X - B  IS SMALL ENOUGH, GIVEN ATOL, BTOL )')
99991 FORMAT (' ( THE LEAST-SQRS SOLN IS GOOD ENOUGH, GIVEN ATOL )')
99990 FORMAT (' ( A*X - B   IS SMALL ENOUGH FOR THIS MACHINE )')
99989 FORMAT (' ( THE LEAST-SQRS SOLN IS GOOD ENOUGH FOR THIS MACHINE )'
     *  )
99988 FORMAT (' ( THE ESTIMATE OF COND( ABAR ) HAS EXCEEDED CONLIM )')
99987 FORMAT (' ( COND( ABAR ) SEEMS TO BE TOO LARGE FOR THIS MACHINE )'
     *  )
99986 FORMAT (' ( THE ITERATION LIMIT HAS BEEN REACHED )')
99985 FORMAT (//' ACTUAL        NORM( RBAR ), NORM( X )    ',1P,2D12.2,
     *  /' NORM( TRANSPOSE( ABAR )*RBAR )           ',1P,D12.2,/' ESTI',
     *  'MATES OF  NORM( ABAR ), COND( ABAR ) ',1P,2D12.2)
99984 FORMAT (' ( TERMINATION REQUESTED BY USER ROUTINE )')
      END
