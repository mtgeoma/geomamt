      SUBROUTINE F01LHX(BOTBLK,NRWBOT,NCLBOT,TOPBLK,NRWBLK,NCLBLK,PIVOT,
     *                  NCLPIV,NRWPIV,NCPIV2,NOVRLP,TL,INDEX,IFAIL)
C     MARK 13 RELEASE. NAG COPYRIGHT 1988.
C     MARK 13B REVISED. IER-662 (AUG 1988).
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     F01LHX PERFORMS NCLPIV COLUMN ELIMINATIONS ON THE MATRICES
C     BOTBLK AND TOPBLK USING COLUMN PIVOTING.
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C       AUXILIARY ROUTINES
C       ------------------
C       DGER  : TO PERFORM RANK ONE UPDATE OF A MATRIX
C       DSWAP : TO INTERCHANGE TWO VECTORS
C       DSCAL : TO MULTIPLY A VECTOR BY A SCALAR
C       IDAMAX: TO FIND INDEX OF LARGEST ABSOLUTE ELEMEMT OF A VECTOR
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION  TL
      INTEGER           IFAIL, INDEX, NCLBLK, NCLBOT, NCLPIV, NCPIV2,
     *                  NOVRLP, NRWBLK, NRWBOT, NRWPIV
C     .. Array Arguments ..
      DOUBLE PRECISION  BOTBLK(NRWBOT,NCLBOT), TOPBLK(NRWBLK,NCLBLK)
      INTEGER           PIVOT(*)
C     .. Local Scalars ..
      DOUBLE PRECISION  COLMLT, X
      INTEGER           J, JPLUS1, L, L1, LOOP, MXINDX, NCOLS, NCPVRJ,
     *                  NOVMIJ, NROPCO, NRPNCP, NRPVJ1, NRPVPJ, NRWPJ1
C     .. External Functions ..
      INTEGER           IDAMAX
      EXTERNAL          IDAMAX
C     .. External Subroutines ..
      EXTERNAL          DGER, DSCAL, DSWAP
C     .. Intrinsic Functions ..
      INTRINSIC         ABS
C     .. Executable Statements ..
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     THE J LOOP CONTROLS THE NCLPIV COLUMN ELIMINATIONS .
C
C     CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      DO 20 J = 1, NCLPIV
         NRPVPJ = NRWPIV + J
         JPLUS1 = J + 1
         NRWPJ1 = NRWPIV + JPLUS1
         NOVMIJ = NOVRLP - J
         NRPNCP = NRPVPJ + NCPIV2
         NROPCO = NCPIV2 + NRWPIV
         NRPVJ1 = NRPVPJ + 1
         LOOP = NRPNCP + 1
         NCOLS = NROPCO + JPLUS1
         NCPVRJ = NROPCO + J
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        DETERMINE THE COLUMN PIVOT X AND PIVOT INDEX L .
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         MXINDX = IDAMAX(NCLBLK-NRPNCP+1,TOPBLK(NRPVPJ,NRPNCP),NRWBLK)
         L = NRPNCP + MXINDX - 1
         X = ABS(TOPBLK(NRPVPJ,L))
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        IF L=NRPNCP THEN PIVOT ROW  IS ALREADY IN CORRECT
C        POSITION . IF NOT PERFORM COLUMN INTERCHANGES .
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         IF (L.NE.NRPNCP) THEN
            L1 = L - NCPIV2 - NRWPIV
C
C           CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C           INTERCHANGE IN TOPBLK AND BOTBLK .
C
C           CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
            CALL DSWAP(NRWBLK,TOPBLK(1,L),1,TOPBLK(1,NRPNCP),1)
C
            CALL DSWAP(NRWBOT,BOTBLK(1,L1),1,BOTBLK(1,J),1)
C
         END IF
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        SET PIVOT(J) TO THE INDEX FOR THE PIVOT COLUMN .
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         PIVOT(J) = L
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        TEST FOR SINGULARITY .
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         IF (ABS(X).LT.TL) THEN
            IF (IFAIL.EQ.0) THEN
               INDEX = INDEX + NRPVPJ
               IFAIL = 1
            END IF
            GO TO 20
         END IF
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        COMPUTE ROW MULTIPLIERS IN TOPBLK (IF ANY) AND BOTBLK .
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         COLMLT = 1.0D0/TOPBLK(NRPVPJ,NRPNCP)
C
         IF (NRWBLK-NRPVPJ.GT.0) THEN
            CALL DSCAL(NRWBLK-NRPVPJ,COLMLT,TOPBLK(NRPVJ1,NRPNCP),1)
         END IF
C
         CALL DSCAL(NRWBOT,COLMLT,BOTBLK(1,J),1)
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        PERFORM COLUMN ELIMINATION IN TOPBLK :
C           COLUMN  (NCPIV2+NRWPIV+J) ,
C           ROW POSITIONS  NRWPIV+J+1,...,NRWPIV+NCLPIV
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         IF (NCLPIV.GT.J) THEN
            CALL DGER(NCLPIV-J,NOVMIJ,-1.0D0,TOPBLK(NRWPJ1,NCPVRJ),1,
     *                TOPBLK(NRPVPJ,NCOLS),NRWBLK,TOPBLK(NRWPJ1,NCOLS),
     *                NRWBLK)
         END IF
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C        PERFORM COLUMN ELIMINATION IN BOTBLK :
C           COLUMN  J ,
C           ROW POSITIONS  1,...,NRWBOT
C
C        CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
         IF (NOVMIJ.GT.0) THEN
            CALL DGER(NRWBOT,NOVMIJ,-1.0D0,BOTBLK(1,J),1,TOPBLK(NRPVPJ,
     *                NCOLS),NRWBLK,BOTBLK(1,JPLUS1),NRWBOT)
         END IF
   20 CONTINUE
      RETURN
      END
